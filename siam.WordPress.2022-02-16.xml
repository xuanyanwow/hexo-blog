<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.7.5" created="2022-02-16 02:09" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Siam博客</title>
	<link>https://blog.siammm.cn</link>
	<description>程序员学习笔记,常见问题记录博客</description>
	<pubDate>Wed, 16 Feb 2022 02:09:12 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://blog.siammm.cn</wp:base_site_url>
	<wp:base_blog_url>https://blog.siammm.cn</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[Siam]]></wp:author_login><wp:author_email><![CDATA[59419979@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[Siam]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>37</wp:term_id>
		<wp:category_nicename><![CDATA[android]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Android]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>25</wp:term_id>
		<wp:category_nicename><![CDATA[docker]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Docker]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>15</wp:term_id>
		<wp:category_nicename><![CDATA[easyswoole]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[easyswoole]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[linux]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Linux]]></wp:cat_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:category>
		<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[mysql]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Mysql]]></wp:cat_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:category>
		<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[php]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[PHP]]></wp:cat_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:category>
		<wp:category>
		<wp:term_id>31</wp:term_id>
		<wp:category_nicename><![CDATA[share]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[分享世界]]></wp:cat_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:category>
		<wp:category>
		<wp:term_id>12</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%89%8d%e7%ab%af]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[前端]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>27</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[常见问题]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[未分类]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[mixed]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[杂乱知识]]></wp:cat_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:category>
		<wp:category>
		<wp:term_id>33</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[源码分享]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>40</wp:term_id>
		<wp:category_nicename><![CDATA[%e8%bf%90%e7%bb%b4%e3%80%81%e6%9e%b6%e6%9e%84]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[运维、架构]]></wp:cat_name>
	</wp:category>
			<wp:tag>
		<wp:term_id>38</wp:term_id>
		<wp:tag_slug><![CDATA[android]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Android]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[chrome]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Chrome]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[composer]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Composer]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[docker]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Docker]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[easyswoole]]></wp:tag_slug>
		<wp:tag_name><![CDATA[easyswoole]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[git]]></wp:tag_slug>
		<wp:tag_name><![CDATA[GIT]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[http]]></wp:tag_slug>
		<wp:tag_name><![CDATA[HTTP]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[jquery]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Jquery]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[layui]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Layui]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[mysql]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mysql]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[php]]></wp:tag_slug>
		<wp:tag_name><![CDATA[PHP]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[redis]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Redis]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[swoole]]></wp:tag_slug>
		<wp:tag_name><![CDATA[swoole]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[thinkphp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Thinkphp]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>39</wp:term_id>
		<wp:tag_slug><![CDATA[vant]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Vant]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[vmware]]></wp:tag_slug>
		<wp:tag_name><![CDATA[VMware]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[vue]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Vue]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[分享世界]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%89%8d%e7%ab%af]]></wp:tag_slug>
		<wp:tag_name><![CDATA[前端]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98]]></wp:tag_slug>
		<wp:tag_name><![CDATA[常见问题]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%be%ae%e4%bf%a1]]></wp:tag_slug>
		<wp:tag_name><![CDATA[微信]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab]]></wp:tag_slug>
		<wp:tag_name><![CDATA[源码分享]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>30</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%99%9a%e6%8b%9f%e6%9c%ba]]></wp:tag_slug>
		<wp:tag_name><![CDATA[虚拟机]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80]]></wp:tag_slug>
		<wp:tag_name><![CDATA[计算机基础]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%bf%9b%e7%a8%8b%e9%80%9a%e4%bf%a1]]></wp:tag_slug>
		<wp:tag_name><![CDATA[进程通信]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id>37</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[android]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Android]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>38</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[android]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Android]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>21</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[chrome]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Chrome]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>23</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[composer]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Composer]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>25</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[docker]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Docker]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>26</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[docker]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Docker]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>15</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[easyswoole]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[easyswoole]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>17</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[easyswoole]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[easyswoole]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>22</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[GIT]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>11</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[http]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[HTTP]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>13</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jquery]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Jquery]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>14</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[layui]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Layui]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>4</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linux]]></wp:term_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:term>
		<wp:term>
		<wp:term_id>3</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mysql]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Mysql]]></wp:term_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:term>
		<wp:term>
		<wp:term_id>18</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mysql]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mysql]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>2</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[PHP]]></wp:term_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:term>
		<wp:term>
		<wp:term_id>9</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[php]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[PHP]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>19</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[redis]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Redis]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>16</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[swoole]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[swoole]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>10</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[thinkphp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Thinkphp]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>39</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vant]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Vant]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>29</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vmware]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[VMware]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>36</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Vue]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>31</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[share]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[分享世界]]></wp:term_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:term>
		<wp:term>
		<wp:term_id>32</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[分享世界]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>12</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%89%8d%e7%ab%af]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[前端]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>20</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%89%8d%e7%ab%af]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[前端]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>7</wp:term_id>
		<wp:term_taxonomy><![CDATA[link_category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8f%8b%e9%93%be]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[友链]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>27</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[常见问题]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>28</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[常见问题]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>24</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%be%ae%e4%bf%a1]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[微信]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>1</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[未分类]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>5</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mixed]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[杂乱知识]]></wp:term_name>
		<wp:termmeta>
			<wp:meta_key><![CDATA[taxonomyImage]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:termmeta>
	</wp:term>
		<wp:term>
		<wp:term_id>33</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[源码分享]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>34</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[源码分享]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>30</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%99%9a%e6%8b%9f%e6%9c%ba]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[虚拟机]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>8</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[计算机基础]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>40</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bf%90%e7%bb%b4%e3%80%81%e6%9e%b6%e6%9e%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[运维、架构]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>35</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%bf%9b%e7%a8%8b%e9%80%9a%e4%bf%a1]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[进程通信]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>6</wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[顶部菜单]]></wp:term_name>
	</wp:term>
			<wp:term><wp:term_id>6</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95]]></wp:term_slug><wp:term_name><![CDATA[顶部菜单]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=5.7.5</generator>

		<item>
		<title><![CDATA[Siam博客]]></title>
		<link>https://blog.siammm.cn/%e6%9c%aa%e6%a0%87%e9%a2%98-1</link>
		<pubDate>Wed, 12 Jun 2019 07:24:42 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/06/未标题-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Siam博客]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date><![CDATA[2019-06-12 15:24:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-12 07:24:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-06-12 15:24:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-06-12 07:24:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%aa%e6%a0%87%e9%a2%98-1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/06/未标题-1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/06/未标题-1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:354;s:6:"height";i:100;s:4:"file";s:23:"2019/06/未标题-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"未标题-1-150x100.png";s:5:"width";i:150;s:6:"height";i:100;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"未标题-1-300x85.png";s:5:"width";i:300;s:6:"height";i:85;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Siam博客]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Siam博客logo]]></title>
		<link>https://blog.siammm.cn/logo</link>
		<pubDate>Wed, 12 Jun 2019 07:26:40 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/06/logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Siam博客logo]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2019-06-12 15:26:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-12 07:26:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-06-12 15:26:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-06-12 07:26:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[logo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/06/logo.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/06/logo.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:80;s:6:"height";i:80;s:4:"file";s:16:"2019/06/logo.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[Siam博客logo]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[20190612032728575_easyicon_net_32]]></title>
		<link>https://blog.siammm.cn/20190612032728575_easyicon_net_32</link>
		<pubDate>Wed, 12 Jun 2019 07:28:06 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/06/20190612032728575_easyicon_net_32.ico</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[siam_ico]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2019-06-12 15:28:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-12 07:28:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-06-12 15:28:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-06-12 07:28:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20190612032728575_easyicon_net_32]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/06/20190612032728575_easyicon_net_32.ico]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/06/20190612032728575_easyicon_net_32.ico]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:4:{s:5:"width";i:32;s:6:"height";i:32;s:4:"file";s:45:"2019/06/20190612032728575_easyicon_net_32.ico";s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[siam_ico]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[又拍云_logo2]]></title>
		<link>https://blog.siammm.cn/%e5%8f%88%e6%8b%8d%e4%ba%91_logo2</link>
		<pubDate>Wed, 10 Jul 2019 01:56:09 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/07/又拍云_logo2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date><![CDATA[2019-07-10 09:56:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-10 01:56:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-10 09:56:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-10 01:56:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%88%e6%8b%8d%e4%ba%91_logo2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/07/又拍云_logo2.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/又拍云_logo2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:553;s:6:"height";i:241;s:4:"file";s:27:"2019/07/又拍云_logo2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"又拍云_logo2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"又拍云_logo2-300x131.png";s:5:"width";i:300;s:6:"height";i:131;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[swoole_logo]]></title>
		<link>https://blog.siammm.cn/uqsi1enwrh6125wq939b</link>
		<pubDate>Wed, 10 Jul 2019 13:51:34 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/07/UQSI1ENWRH6125WQ939B.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date><![CDATA[2019-07-10 21:51:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-10 13:51:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-10 21:51:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-10 13:51:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[uqsi1enwrh6125wq939b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/07/UQSI1ENWRH6125WQ939B.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/UQSI1ENWRH6125WQ939B.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:700;s:6:"height";i:220;s:4:"file";s:32:"2019/07/UQSI1ENWRH6125WQ939B.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"UQSI1ENWRH6125WQ939B-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"UQSI1ENWRH6125WQ939B-300x94.png";s:5:"width";i:300;s:6:"height";i:94;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[swoole_logo]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[upyun-logo]]></title>
		<link>https://blog.siammm.cn/upyun-logo</link>
		<pubDate>Thu, 11 Jul 2019 01:46:34 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/07/upyun-logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date><![CDATA[2019-07-11 09:46:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-11 01:46:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-11 09:46:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-11 01:46:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[upyun-logo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/07/upyun-logo.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/upyun-logo.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:594;s:6:"height";i:302;s:4:"file";s:22:"2019/07/upyun-logo.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"upyun-logo-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"upyun-logo-300x153.png";s:5:"width";i:300;s:6:"height";i:153;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[thinkphp]]></title>
		<link>https://blog.siammm.cn/archives/80/576b491997453</link>
		<pubDate>Sat, 13 Jul 2019 12:02:37 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/07/576b491997453.png</guid>
		<description></description>
		<content:encoded><![CDATA[thinkphp官方logo]]></content:encoded>
		<excerpt:encoded><![CDATA[thinkphp官方logo]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date><![CDATA[2019-07-13 20:02:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-13 12:02:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-13 20:02:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-13 12:02:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[576b491997453]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/07/576b491997453.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/576b491997453.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:800;s:6:"height";i:457;s:4:"file";s:25:"2019/07/576b491997453.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"576b491997453-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"576b491997453-300x171.png";s:5:"width";i:300;s:6:"height";i:171;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:25:"576b491997453-768x439.png";s:5:"width";i:768;s:6:"height";i:439;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[smtp01]]></title>
		<link>https://blog.siammm.cn/archives/88/smtp01</link>
		<pubDate>Thu, 18 Jul 2019 07:45:13 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/07/smtp01.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 15:45:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 07:45:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-18 15:45:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-18 07:45:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[smtp01]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>88</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/07/smtp01.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/smtp01.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:538;s:6:"height";i:387;s:4:"file";s:18:"2019/07/smtp01.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"smtp01-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"smtp01-300x216.jpg";s:5:"width";i:300;s:6:"height";i:216;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[smtp02]]></title>
		<link>https://blog.siammm.cn/archives/88/smtp02</link>
		<pubDate>Thu, 18 Jul 2019 07:45:32 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/07/smtp02.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 15:45:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 07:45:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-18 15:45:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-18 07:45:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[smtp02]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>88</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/07/smtp02.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/smtp02.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:532;s:6:"height";i:416;s:4:"file";s:18:"2019/07/smtp02.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"smtp02-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"smtp02-300x235.jpg";s:5:"width";i:300;s:6:"height";i:235;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[smtp03]]></title>
		<link>https://blog.siammm.cn/archives/88/smtp03</link>
		<pubDate>Thu, 18 Jul 2019 07:45:33 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/07/smtp03.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 15:45:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 07:45:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-18 15:45:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-18 07:45:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[smtp03]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>88</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/07/smtp03.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/07/smtp03.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:536;s:6:"height";i:433;s:4:"file";s:18:"2019/07/smtp03.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"smtp03-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"smtp03-300x242.jpg";s:5:"width";i:300;s:6:"height";i:242;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php]]></title>
		<link>https://blog.siammm.cn/archives/112/u4318049384190703300fm26gp0</link>
		<pubDate>Sun, 04 Aug 2019 13:47:43 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/u4318049384190703300fm26gp0.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date><![CDATA[2019-08-04 21:47:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-04 13:47:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-04 21:47:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-04 13:47:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[u4318049384190703300fm26gp0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>112</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/u4318049384190703300fm26gp0.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/u4318049384190703300fm26gp0.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:500;s:6:"height";i:333;s:4:"file";s:39:"2019/08/u4318049384190703300fm26gp0.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:39:"u4318049384190703300fm26gp0-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:39:"u4318049384190703300fm26gp0-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[php]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[git]]></title>
		<link>https://blog.siammm.cn/archives/116/liget3pc0wmi3owmy6y1</link>
		<pubDate>Wed, 07 Aug 2019 01:24:27 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/LIGET3P55C0WMI3OWMY6Y1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2019-08-07 09:24:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-07 01:24:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-07 09:24:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-07 01:24:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[liget3pc0wmi3owmy6y1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>116</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/LIGET3P55C0WMI3OWMY6Y1-e1565141255580.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/LIGET3P55C0WMI3OWMY6Y1-e1565141255580.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:716;s:6:"height";i:226;s:4:"file";s:49:"2019/08/LIGET3P55C0WMI3OWMY6Y1-e1565141255580.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:49:"LIGET3P55C0WMI3OWMY6Y1-e1565141255580-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:48:"LIGET3P55C0WMI3OWMY6Y1-e1565141255580-300x95.png";s:5:"width";i:300;s:6:"height";i:95;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:34:"LIGET3P55C0WMI3OWMY6Y1-768x203.png";s:5:"width";i:768;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
		<wp:meta_value><![CDATA[git]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_backup_sizes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:4:{s:9:"full-orig";a:3:{s:5:"width";i:925;s:6:"height";i:244;s:4:"file";s:26:"LIGET3P55C0WMI3OWMY6Y1.png";}s:14:"thumbnail-orig";a:4:{s:4:"file";s:34:"LIGET3P55C0WMI3OWMY6Y1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:11:"medium-orig";a:4:{s:4:"file";s:33:"LIGET3P55C0WMI3OWMY6Y1-300x79.png";s:5:"width";i:300;s:6:"height";i:79;s:9:"mime-type";s:9:"image/png";}s:17:"medium_large-orig";a:4:{s:4:"file";s:34:"LIGET3P55C0WMI3OWMY6Y1-768x203.png";s:5:"width";i:768;s:6:"height";i:203;s:9:"mime-type";s:9:"image/png";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[4G}AIYA[Y`CC@DN`80}@`2H]]></title>
		<link>https://blog.siammm.cn/archives/119/4gaiyayccdn802h</link>
		<pubDate>Fri, 09 Aug 2019 15:25:35 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/4GAIYAYCC@DN80@2H.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date><![CDATA[2019-08-09 23:25:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-09 15:25:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-09 23:25:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-09 15:25:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[4gaiyayccdn802h]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>119</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/4GAIYAYCC@DN80@2H.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/4GAIYAYCC@DN80@2H.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:700;s:6:"height";i:225;s:4:"file";s:29:"2019/08/4GAIYAYCC@DN80@2H.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"4GAIYAYCC@DN80@2H-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"4GAIYAYCC@DN80@2H-300x96.png";s:5:"width";i:300;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[31B}6_F)2Z07`7A7FP_92(Y]]></title>
		<link>https://blog.siammm.cn/archives/128/31b6_f2z077a7fp_92y</link>
		<pubDate>Wed, 14 Aug 2019 12:17:36 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/31B6_F2Z077A7FP_92Y.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2019-08-14 20:17:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-14 12:17:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-14 20:17:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-14 12:17:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[31b6_f2z077a7fp_92y]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>128</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/31B6_F2Z077A7FP_92Y.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/31B6_F2Z077A7FP_92Y.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:491;s:6:"height";i:341;s:4:"file";s:31:"2019/08/31B6_F2Z077A7FP_92Y.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"31B6_F2Z077A7FP_92Y-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"31B6_F2Z077A7FP_92Y-300x208.png";s:5:"width";i:300;s:6:"height";i:208;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[6WGW7~3G%K93C8(FG{YX~5B]]></title>
		<link>https://blog.siammm.cn/archives/134/6wgw73gk93c8fgyx5b</link>
		<pubDate>Fri, 23 Aug 2019 09:57:12 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/6WGW73GK93C8FGYX5B.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date><![CDATA[2019-08-23 17:57:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-23 09:57:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-23 17:57:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-23 09:57:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[6wgw73gk93c8fgyx5b]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>134</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/6WGW73GK93C8FGYX5B.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/6WGW73GK93C8FGYX5B.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:777;s:6:"height";i:269;s:4:"file";s:30:"2019/08/6WGW73GK93C8FGYX5B.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"6WGW73GK93C8FGYX5B-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"6WGW73GK93C8FGYX5B-300x104.png";s:5:"width";i:300;s:6:"height";i:104;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"6WGW73GK93C8FGYX5B-768x266.png";s:5:"width";i:768;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[[I}036QI7QL_2%1K~VLG6BS]]></title>
		<link>https://blog.siammm.cn/archives/150/i036qi7ql_21kvlg6bs</link>
		<pubDate>Fri, 30 Aug 2019 02:38:16 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/I036QI7QL_21KVLG6BS.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:38:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:38:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:38:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:38:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[i036qi7ql_21kvlg6bs]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>150</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/I036QI7QL_21KVLG6BS.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/I036QI7QL_21KVLG6BS.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:784;s:6:"height";i:416;s:4:"file";s:31:"2019/08/I036QI7QL_21KVLG6BS.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"I036QI7QL_21KVLG6BS-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"I036QI7QL_21KVLG6BS-300x159.png";s:5:"width";i:300;s:6:"height";i:159;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:31:"I036QI7QL_21KVLG6BS-768x408.png";s:5:"width";i:768;s:6:"height";i:408;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[{D8793DT)@X35QJ]W~8%@S7]]></title>
		<link>https://blog.siammm.cn/archives/156/d8793dtx35qjw8s7</link>
		<pubDate>Fri, 30 Aug 2019 02:42:21 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/D8793DT@X35QJW8@S7.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:42:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:42:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:42:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:42:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[d8793dtx35qjw8s7]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>156</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/D8793DT@X35QJW8@S7.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/D8793DT@X35QJW8@S7.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:783;s:6:"height";i:418;s:4:"file";s:30:"2019/08/D8793DT@X35QJW8@S7.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"D8793DT@X35QJW8@S7-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"D8793DT@X35QJW8@S7-300x160.png";s:5:"width";i:300;s:6:"height";i:160;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"D8793DT@X35QJW8@S7-768x410.png";s:5:"width";i:768;s:6:"height";i:410;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[D~N]OJA`{NMMD1LJ_F(4JDW]]></title>
		<link>https://blog.siammm.cn/archives/165/dnojanmmd1lj_f4jdw</link>
		<pubDate>Fri, 30 Aug 2019 02:49:15 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/08/DNOJANMMD1LJ_F4JDW.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:49:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:49:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:49:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:49:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[dnojanmmd1lj_f4jdw]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>165</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/08/DNOJANMMD1LJ_F4JDW.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/08/DNOJANMMD1LJ_F4JDW.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:912;s:6:"height";i:498;s:4:"file";s:30:"2019/08/DNOJANMMD1LJ_F4JDW.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:30:"DNOJANMMD1LJ_F4JDW-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:30:"DNOJANMMD1LJ_F4JDW-300x164.png";s:5:"width";i:300;s:6:"height";i:164;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"DNOJANMMD1LJ_F4JDW-768x419.png";s:5:"width";i:768;s:6:"height";i:419;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[RM53`3{A6`LIC5VPBK653SM]]></title>
		<link>https://blog.siammm.cn/archives/186/rm533a6lic5vpbk653sm</link>
		<pubDate>Wed, 09 Oct 2019 04:08:54 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/10/RM533A6LIC5VPBK653SM.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date><![CDATA[2019-10-09 12:08:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-09 04:08:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-09 12:08:54]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-09 04:08:54]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[rm533a6lic5vpbk653sm]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>186</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/10/RM533A6LIC5VPBK653SM.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/RM533A6LIC5VPBK653SM.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:617;s:6:"height";i:278;s:4:"file";s:32:"2019/10/RM533A6LIC5VPBK653SM.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"RM533A6LIC5VPBK653SM-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"RM533A6LIC5VPBK653SM-300x135.png";s:5:"width";i:300;s:6:"height";i:135;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[44{GRHZT)K9NXG@Z4K6@(Y4]]></title>
		<link>https://blog.siammm.cn/archives/190/44grhztk9nxgz4k6y4</link>
		<pubDate>Wed, 16 Oct 2019 01:15:38 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/10/44GRHZTK9NXG@Z4K6@Y4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date><![CDATA[2019-10-16 09:15:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-16 01:15:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-16 09:15:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-16 01:15:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[44grhztk9nxgz4k6y4]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>190</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/10/44GRHZTK9NXG@Z4K6@Y4.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/44GRHZTK9NXG@Z4K6@Y4.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:982;s:6:"height";i:402;s:4:"file";s:32:"2019/10/44GRHZTK9NXG@Z4K6@Y4.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"44GRHZTK9NXG@Z4K6@Y4-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"44GRHZTK9NXG@Z4K6@Y4-300x123.png";s:5:"width";i:300;s:6:"height";i:123;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:32:"44GRHZTK9NXG@Z4K6@Y4-768x314.png";s:5:"width";i:768;s:6:"height";i:314;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[关于Siam]]></title>
		<link>https://blog.siammm.cn/sample-page</link>
		<pubDate>Wed, 12 Jun 2019 02:21:52 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">http://blog.siammm.cn/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>有朋自远方来</h1>

欢迎来到我的博客，我是宣言(Siam)，98年生人。非常感谢在学习路上遇到的每一个人，无论是教导还是批评亦或是嘲讽。

<h1>关于Siam</h1>

<ul>
<li>程序员，主要方向：PHP、微信体系应用、后端架构</li>
<li>EasySwoole开发组组员</li>
<li>主要贡献：文档维护改版、带领文档维护团队、ORM组件主要参与维护者、FastCache组件主要参与维护者等</li>
<li>业余绘画爱好者，希望能培养出发现美的眼睛</li>
</ul>

<h1>我的目标</h1>

选择程序，这一切都源自于内心的热爱。

对于某些人而言，我无疑是非常幸运的，因为我知道我想要得到什么。

我爱计算机，我爱程序，我爱挑战困难战胜困难。

我将会把程序做好，但不仅仅是把程序做好。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2019-06-12 10:21:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-12 02:21:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-25 12:09:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-25 04:09:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sample-page]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[隐私政策]]></title>
		<link>https://blog.siammm.cn/?page_id=3</link>
		<pubDate>Wed, 12 Jun 2019 02:21:52 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">http://blog.siammm.cn/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading --><h2>我们是谁</h2><!-- /wp:heading --><!-- wp:paragraph --><p>我们的站点地址是：http://blog.siammm.cn。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们收集何种及为何收集个人数据</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>评论</h3><!-- /wp:heading --><!-- wp:paragraph --><p>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>媒体</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>联系表单</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>If you visit our login page, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您登出您的账户，用于登录的cookies将会被移除。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>其他站点的嵌入内容</h3><!-- /wp:heading --><!-- wp:paragraph --><p>此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>统计</h3><!-- /wp:heading --><!-- wp:heading --><h2>我们与谁共享您的信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>我们保留多久您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您对您的信息有什么权利</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们将您的信息发送到哪</h2><!-- /wp:heading --><!-- wp:paragraph --><p>访客评论可能会被自动垃圾评论监测服务检查。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您的联系信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>其他信息</h2><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们如何保护您的数据</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们有何种数据泄露处理流程</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们从哪些第三方接收数据</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>我们通过用户数据进行何种自动决策及/或归纳</h3><!-- /wp:heading --><!-- wp:heading {"level":3} --><h3>行业监管披露要求</h3><!-- /wp:heading -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2019-06-12 10:21:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-12 02:21:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-06-12 10:21:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-06-12 02:21:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[根据浏览器生成用户标识，实现免登陆用户状态订单储存。]]></title>
		<link>https://blog.siammm.cn/archives/164</link>
		<pubDate>Fri, 30 Aug 2019 02:48:00 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[fingerprint2库，在github上有

<pre data-language=HTML><code class="language-markup line-numbers">&lt;html&gt;

&lt;head&gt;
    &lt;title&gt;浏览器指纹，实现用户免登陆状态&lt;/title&gt;
    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/fingerprintjs2/2.0.6/fingerprint2.min.js"&gt;&lt;/script&gt;


&lt;/head&gt;

&lt;body&gt;

&lt;script&gt;
    var my_hasher =  function(value, seed){ return value.length % seed; };
    if (window.requestIdleCallback) {
        requestIdleCallback(function () {
            Fingerprint2.get(function (components) {
                var values = components.map(function (component) { return component.value });
                var murmur = Fingerprint2.x64hash128(values.join(''), 31);
                console.log("用户标识--&gt;" + murmur);
                alert(murmur);
            })
        })
    } else {
        setTimeout(function () {
            Fingerprint2.get(function (components) {
                var values = components.map(function (component) { return component.value });
                var murmur = Fingerprint2.x64hash128(values.join(''), 31);
                console.log("用户标识--&gt;" + murmur);
                alert(murmur);
            })
        }, 500)
    }
&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:48:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:48:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:48:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:48:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%a0%b9%e6%8d%ae%e6%b5%8f%e8%a7%88%e5%99%a8%e7%94%9f%e6%88%90%e7%94%a8%e6%88%b7%e6%a0%87%e8%af%86%ef%bc%8c%e5%ae%9e%e7%8e%b0%e5%85%8d%e7%99%bb%e9%99%86%e7%94%a8%e6%88%b7%e7%8a%b6%e6%80%81%e8%ae%a2]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[分享世界]]></title>
		<link>https://blog.siammm.cn/%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c</link>
		<pubDate>Fri, 30 Aug 2019 04:32:38 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?page_id=169</guid>
		<description></description>
		<content:encoded><![CDATA[<style>
    .page-common img{
        display: inline-block;
    }
</style>

<ul>
<li><p><a href="https://www.bilibili.com/read/cv3285768">2019年10月15日 :heart: B站算法视频全系列</a></p></li>
<li><p><a href="http://tv.cctv.com/2019/06/02/VIDEHWza75wnRSgbCv3z6OXZ190602.shtml">2019年10月08日 :heart: 中国少年公开课《开讲啦》徐星——恐龙、科学、好奇心、孩童般的快乐</a></p></li>
<li><p><a href="https://www.sohu.com/a/194412105_750370">2019年10月08日 :heart: 21个数学原理 gif图演示</a></p></li>
<li><p><a href="https://juejin.im/post/5b20857b6fb9a01e701006dd">2019年09月02日 :heart: MySQL 高扩展架构构建百万在线系统实践</a></p></li>
<li><p><a href="https://www.jianshu.com/p/d7665192aaaf">2019年09月02日 :heart: Mysql原理和优化</a></p></li>
<li><p><a href="https://www.kancloud.cn/ervinhua/phpstorm/441831">2019年06月28日  :relieved:  PHPStorm使用手册</a></p></li>
<li><p><a href="https://leeon.gitbooks.io/devtools/learn_basic/tips_and_tricks_part_source.html">2019年06月08日  :relieved:  ChromeDevTools工具使用中文教程</a></p></li>
<li><p><a href="https://chromedevtools.github.io/devtools-protocol/1-2">2019年06月08日  :relieved:  Chrome远程调试语法文档</a></p></li>
<li><p><a href="https://thephpleague.com/zh-cn/#quality">2019年05月05日  :relieved:  超凡联盟github</a></p></li>
<li><p><a href="https://www.cnblogs.com/vianzhang/p/7922426.html">2019年05月04日  :relieved:  BTree和B+Tree的详解</a></p></li>
<li><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html">2019年05月04日  :relieved:  十大经典排序算法（动态图演示）</a></p></li>
<li><p><a href="https://www.cnblogs.com/lxwphp/p/9505689.html">2019年04月26日  :relieved:  巧用php内置数组函数</a></p></li>
<li><p><a href="https://www.jianshu.com/p/450cd21b36a4">2019年04月22日  :relieved:  git的LF和CRLF解析</a></p></li>
<li><p><a href="https://github.com/coolseven/notes/tree/master/thinkphp-queue">2018年12月26日  :relieved:  thinkphp-queue 使用手册(代替官方说明)</a></p></li>
<li><p><a href="http://product.dangdang.com/20079096.html">2018年12月25日  :relieved:  《大话设计模式》小菜大鸟，幽默设计模式书籍。</a></p></li>
<li><p><a href="https://www.cnblogs.com/linlinismine/p/9214299.html">2018年12月18日  :relieved:  Redis 实现实时订阅推送</a></p></li>
<li><p><a href="https://www.infoq.cn/article/b4VPvP3m8DA-PM7ZqMGZ">2018年12月11日  :relieved:  去哪儿网消息队列设计与实现</a></p></li>
<li><p><a href="https://tech.meituan.com/mysql_index.html">2018年11月28日  :relieved:  MySQL索引原理及慢查询优化 - 美团技术博客</a></p></li>
<li><p><a href="https://blog.fundebug.com/2018/09/13/10-principle-for-programer/">2018年11月28日  :relieved:  写给工程师的十条精进原则</a></p></li>
</ul>

<script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"></script>

<script type="text/javascript">
    $(document).ready(function() {
        $('a[href^="http"]').each(function() {
            $(this).attr('target', '_blank');
        });
    });
</script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 12:32:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 04:32:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-05 10:48:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-05 02:48:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[博客-分享我眼中的世界]]></title>
		<link>https://blog.siammm.cn/archives/196/%e5%8d%9a%e5%ae%a2-%e5%88%86%e4%ba%ab%e6%88%91%e7%9c%bc%e4%b8%ad%e7%9a%84%e4%b8%96%e7%95%8c</link>
		<pubDate>Thu, 17 Oct 2019 01:11:21 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/10/博客-分享我眼中的世界.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2019-10-17 09:11:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-17 01:11:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-17 09:11:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-17 01:11:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%9a%e5%ae%a2-%e5%88%86%e4%ba%ab%e6%88%91%e7%9c%bc%e4%b8%ad%e7%9a%84%e4%b8%96%e7%95%8c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/10/博客-分享我眼中的世界.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/博客-分享我眼中的世界.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:400;s:4:"file";s:43:"2019/10/博客-分享我眼中的世界.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"博客-分享我眼中的世界-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:43:"博客-分享我眼中的世界-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[RU_()TV20[](%2R2_8CP1JL]]></title>
		<link>https://blog.siammm.cn/archives/196/ru_tv202r2_8cp1jl</link>
		<pubDate>Thu, 17 Oct 2019 01:15:21 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/10/RU_TV202R2_8CP1JL.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date><![CDATA[2019-10-17 09:15:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-17 01:15:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-17 09:15:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-17 01:15:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ru_tv202r2_8cp1jl]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>196</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/10/RU_TV202R2_8CP1JL.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/10/RU_TV202R2_8CP1JL.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:320;s:6:"height";i:320;s:4:"file";s:29:"2019/10/RU_TV202R2_8CP1JL.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"RU_TV202R2_8CP1JL-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"RU_TV202R2_8CP1JL-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[5L5_640AZXKQ{8@5`(O21B5]]></title>
		<link>https://blog.siammm.cn/archives/211/5l5_640azxkq85o21b5</link>
		<pubDate>Thu, 21 Nov 2019 00:42:26 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2019/11/5L5_640AZXKQ8@5O21B5.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date><![CDATA[2019-11-21 08:42:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-21 00:42:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-11-21 08:42:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-11-21 00:42:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[5l5_640azxkq85o21b5]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>211</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2019/11/5L5_640AZXKQ8@5O21B5.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2019/11/5L5_640AZXKQ8@5O21B5.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:762;s:6:"height";i:742;s:4:"file";s:32:"2019/11/5L5_640AZXKQ8@5O21B5.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"5L5_640AZXKQ8@5O21B5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:32:"5L5_640AZXKQ8@5O21B5-300x292.png";s:5:"width";i:300;s:6:"height";i:292;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP解析xml的正确方式，PHP解析xml的几种方式对比]]></title>
		<link>https://blog.siammm.cn/?p=217</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>前言</h1>

为什么写这篇文章，因为他娘的宣言又踩坑了。

在对接别人接口时，他们使用的是xml格式交互的。

其中的格式可能如下

<pre data-language=XML><code class="language-markup line-numbers">    &lt;RSP2003&gt;
      &lt;TotalNum&gt;39&lt;/TotalNum&gt;
      &lt;CityList&gt;
        &lt;CityCode&gt;N1127&lt;/CityCode&gt;
        &lt;CityName&gt;三水四会&lt;/CityName&gt;
        &lt;CityTypeCode&gt;3&lt;/CityTypeCode&gt;
        &lt;CityTypeName&gt;内陆城市&lt;/CityTypeName&gt;
        &lt;PinyinJX&gt;SSSH&lt;/PinyinJX&gt;
        &lt;PinyinQP&gt;Sanshuisihui&lt;/PinyinQP&gt;
        &lt;CityOrder&gt;207&lt;/CityOrder&gt;
        &lt;CityOperationType&gt;2&lt;/CityOperationType&gt;
      &lt;/CityList&gt;
      // 这是一个list  如果还有更多元素 就在下面继续
      &lt;CityList&gt;
        &lt;CityCode&gt;N1127&lt;/CityCode&gt;
        &lt;CityName&gt;三水四会&lt;/CityName&gt;
        &lt;CityTypeCode&gt;3&lt;/CityTypeCode&gt;
        &lt;CityTypeName&gt;内陆城市&lt;/CityTypeName&gt;
        &lt;PinyinJX&gt;SSSH&lt;/PinyinJX&gt;
        &lt;PinyinQP&gt;Sanshuisihui&lt;/PinyinQP&gt;
        &lt;CityOrder&gt;207&lt;/CityOrder&gt;
        &lt;CityOperationType&gt;2&lt;/CityOperationType&gt;
      &lt;/CityList&gt;
    &lt;/RSP2003&gt;
</code></pre>

有的情况下，<code>CityList里只有一个元素</code>，一般情况下是<code>多个</code>

一开始写的php程序如下

<pre><code class="language-php line-numbers">&lt;?php
$xml = '伪代码 xml字符串如上';

echo json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA));
</code></pre>

<h2>只有一个元素的时候</h2>

<pre><code class="language-json line-numbers">"RSP2003": {
    "TotalNum": "39",
    "CityList": {
        "CityCode": "N1127",
        "CityName": "\u4e09\u6c34\u56db\u4f1a",
        "CityTypeCode": "3",
        "CityTypeName": "\u5185\u9646\u57ce\u5e02",
        "PinyinJX": "SSSH",
        "PinyinQP": "Sanshuisihui",
        "CityOrder": "207",
        "CityOperationType": "2"
    }
}
</code></pre>

<h2>多个元素的时候</h2>

<pre><code class="language-json line-numbers">"RSP2003": {
    "TotalNum": "39",
    "CityList": [{
        "CityCode": "N1127",
        "CityName": "\u4e09\u6c34\u56db\u4f1a",
        "CityTypeCode": "3",
        "CityTypeName": "\u5185\u9646\u57ce\u5e02",
        "PinyinJX": "SSSH",
        "PinyinQP": "Sanshuisihui",
        "CityOrder": "207",
        "CityOperationType": "2"
    }, {
        "CityCode": "N1128",
        "CityName": "\u5927\u6ca5\u76d0\u6b65",
        "CityTypeCode": "3",
        "CityTypeName": "\u5185\u9646\u57ce\u5e02",
        "PinyinJX": "DLYB",
        "PinyinQP": "daliyanbu",
        "CityOrder": "208",
        "CityOperationType": "2"
    }]
</code></pre>

<h2>问题所在</h2>

对接我php接口的是安卓客户端，json字符串中在一个元素的时候是对象类型，多个元素的时候是数组类型，安卓客户端解析就失败了。

所以引申出这篇文章，详细测试、记录一下]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2019-12-18 14:55:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-18 14:55:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-18 06:55:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[G9V2UMCSZD`{M{{AK1[_3GU]]></title>
		<link>https://blog.siammm.cn/archives/236/g9v2umcszdmak1_3gu</link>
		<pubDate>Tue, 14 Jan 2020 08:57:27 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2020/01/G9V2UMCSZDMAK1_3GU.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 16:57:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 08:57:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 16:57:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 08:57:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[g9v2umcszdmak1_3gu]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>236</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2020/01/G9V2UMCSZDMAK1_3GU.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/01/G9V2UMCSZDMAK1_3GU.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1011;s:6:"height";i:289;s:4:"file";s:30:"2020/01/G9V2UMCSZDMAK1_3GU.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:29:"G9V2UMCSZDMAK1_3GU-300x86.png";s:5:"width";i:300;s:6:"height";i:86;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:30:"G9V2UMCSZDMAK1_3GU-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:30:"G9V2UMCSZDMAK1_3GU-768x220.png";s:5:"width";i:768;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[CS8BZ%PQ_3FRDV~2HC9IHRN]]></title>
		<link>https://blog.siammm.cn/archives/249/cs8bzpq_3frdv2hc9ihrn</link>
		<pubDate>Wed, 18 Mar 2020 09:44:47 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2020/03/CS8BZPQ_3FRDV2HC9IHRN.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2020-03-18 17:44:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-18 09:44:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-18 17:44:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-18 09:44:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cs8bzpq_3frdv2hc9ihrn]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>249</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2020/03/CS8BZPQ_3FRDV2HC9IHRN.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/03/CS8BZPQ_3FRDV2HC9IHRN.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:812;s:6:"height";i:501;s:4:"file";s:33:"2020/03/CS8BZPQ_3FRDV2HC9IHRN.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:33:"CS8BZPQ_3FRDV2HC9IHRN-300x185.png";s:5:"width";i:300;s:6:"height";i:185;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:33:"CS8BZPQ_3FRDV2HC9IHRN-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:33:"CS8BZPQ_3FRDV2HC9IHRN-768x474.png";s:5:"width";i:768;s:6:"height";i:474;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ApiCloudApp开发-Swiper轮播图初始化失败解决]]></title>
		<link>https://blog.siammm.cn/archives/253</link>
		<pubDate>Sun, 22 Mar 2020 09:50:55 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=253</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>待更新</h1>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date><![CDATA[2020-03-22 17:50:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-22 09:50:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-22 17:50:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-22 09:50:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[apicloudapp%e5%bc%80%e5%8f%91-swiper%e8%bd%ae%e6%92%ad%e5%9b%be%e5%88%9d%e5%a7%8b%e5%8c%96%e5%a4%b1%e8%b4%a5%e8%a7%a3%e5%86%b3]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[250]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[项目列表]]></title>
		<link>https://blog.siammm.cn/archives/260</link>
		<pubDate>Wed, 25 Mar 2020 13:16:40 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/archives/260</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date><![CDATA[2020-03-25 21:16:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-25 13:16:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-05 10:49:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-05 02:49:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a1%b9%e7%9b%ae%e5%88%97%e8%a1%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95"><![CDATA[顶部菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[260]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://www.siammm.cn/SiamProjecShow/]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[COCOS 个人踩坑日记]]></title>
		<link>https://blog.siammm.cn/archives/268</link>
		<pubDate>Fri, 22 May 2020 08:31:53 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=268</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>改变子节点的label内容</h1>

<pre><code class="line-numbers">this.turnDuration.getChildByName("number").getComponent(cc.Label).string)
</code></pre>

<h1>动态添加精灵（发牌）</h1>


```


&lt;pre&gt;&lt;code&gt;/**
 * 发牌 个人
 */
showMyCard(){
    let _this = this;
    for (let index = 0; index &lt; 17; index++) {
        let node = new cc.Node(&quot;MyCard_&quot;+index);
        let sprite = node.addComponent(cc.Sprite);
        // 点击事件
        node.on(&quot;mousedown&quot;, function(event){
            _this.choosCard(this);
            event.stopPropagation();
        }, node);

        cc.loader.loadRes(&quot;Img/card&quot;,cc.SpriteFrame,function(err,spriteFrame){
            sprite.spriteFrame = spriteFrame;
        });
        node.parent = this.MyArea;
    }
},
/**
 * 选择/取消选择 卡片
 * @param {*} card 
 */
choosCard(card){
    if (card.isChoose){
        var action = cc.moveTo(0.02, 10, 0);
        card.runAction(action);
        card.isChoose = false;
    }else{
        card.isChoose = true;
        var action = cc.moveTo(0.02, 10, 20);
        card.runAction(action);
    }
},
```
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date><![CDATA[2020-05-22 16:31:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-22 08:31:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-22 17:00:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-22 09:00:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cocos-%e4%b8%aa%e4%ba%ba%e8%b8%a9%e5%9d%91%e6%97%a5%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[中医 四虚诊断，及其食药膳]]></title>
		<link>https://blog.siammm.cn/archives/270</link>
		<pubDate>Tue, 26 May 2020 00:43:51 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>中医 中华文化瑰宝</h1>

<h2>一、先虚而后病</h2>

无论什么病，只要是生病，都是先虚而后病。通俗地说，“虚”说明人体正气不足，“正气存内，邪不可干”，<strong>只有人体正气旺盛，才能卫外固密，</strong>外邪难以入侵，内邪也就难以产生，也就不会发生疾病。否则，“虚”在初级阶段，会导致人疲乏无力、精力不济、情绪低落、头目不清、食欲不振、便秘泄泻、失眠多梦、阳痿早泄、月经不调等，等“虚”发展到高级阶段，各种疾病就来了。

而且，虚证的讨厌之处在于：<strong>它虽不会马上要你的命，却会反复缠绵，变成“顽症”。</strong>

<h2><strong>二、你是哪种虚？</strong></h2>

<figure data-size="normal">![](https://pic1.zhimg.com/v2-96afc8f2135e30436686ea2437f7ebb4_b.jpg)</figure>

中医对虚证进行了总结，将其分为4类：气虚、血虚、阴虚、阳虚。

并且，中医认为“有诸内者，必形诸外”，外表是内在的体现，只有气血调和、阴阳平衡，才能身材健美、肌肤润泽、青春永驻，反之，人不但会生病，还会显老。所以，从这个角度说，<strong>很多女性朋友并不是老了，而是虚了。</strong>

<h3><strong><em>1.</em>气虚——无力</strong></h3>

<strong>气虚好比人体的燃料不足，从而导致动力不足。</strong>

气来自三个方面：先天拥有的精气（肾）、后天吸取的水谷之气（脾胃）、呼吸的空气（肺），因此气虚大致包括三个方面的虚：肾虚、脾虚、肺虚。

主要表征

<strong>气虚的女人最大的特征就是“懒”，</strong>懒得说话，懒得动弹，恨不能整天“葛优躺”。

脾主运化水液，脾气虚了，运化水的能力就会下降，就会脾湿，<strong>所以气虚的女人基本都伴有脾湿的症状，都有齿痕舌。</strong>

此外，气虚则无力固摄大便，就会大便不成形；<strong>气虚会引起血虚血瘀，月经容易推迟，如果气虚症状严重，还会导致闭经；气虚下陷，就会导致带脉失约、冲任虚损，使子宫失于维系，致使子宫脱垂。</strong>至于疲乏、自汗、气喘等，更是气虚的标配。

辨别要点

懒！易疲倦、易感冒、脏腑功能弱。<strong>气虚容易跟阳虚搞混，二者的区别在于有无寒象，气虚是单纯的功能减弱，而阳虚是功能减弱+寒象。</strong>

调理方法

<strong>补气虚食品</strong>：牛肉、鸡肉、猪肉、糯米、大豆、白扁豆、大枣、鲫鱼、鲤鱼、鹌鹑、黄鳝、虾、蘑菇等。可经常交替选服。

<strong>虚忌食物品</strong>：山楂、佛手柑、槟榔、大蒜、苤蓝、萝卜缨、芫荽(香菜)、芜菁(大头菜)、胡椒、荜拨、中指、紫苏叶、薄荷、荷叶

<strong>忌食或少食</strong>：荞麦、柚子、柑、金橘、金橘饼、橙子、荸荠、生萝卜、地骷髅、芥菜、薤白、君达菜、砂仁、菊花、茶叶及烟酒。

<strong>相应膳食</strong>：怀山百合莲子汤；参药煨乳鸽；五香牛肉；花生米大枣烧猪。蹄。

<h3><strong><em>2.</em>血虚——发燥</strong></h3>

<strong>血虚好比人体的营养液不足，从而导致身体枯燥、营养不良。</strong>

<strong>气能生血，因此气虚时间长了，必定会引起血虚；同时，气虚则运行血液无力，必定会引起血瘀。</strong>血虚多与脾胃有关，脾胃负责化生气血，脾胃罢工就会造血不足。

主要表征

面色发黄或发白，口唇颜色淡，头晕目眩，指甲苍白，兼有气虚的症状。

<strong>血虚则冲任气血不足，若同时伴有血瘀的症状，瘀血内停，血不归经，也会伤及冲任，就会导致月经量少，周期延长，甚至闭经。</strong>

辨别要点

<strong>整体外观颜色（如口唇、指甲、舌体）偏淡，</strong>形体瘦弱，月经量少、色淡。

调理方法

<strong>补血虚食品</strong>：乌骨鸡、黑芝麻、胡桃肉、龙眼肉、鸡肉、猪血、猪肝、红糖、赤豆等，可经常交替选用：

<strong>血虚忌食物品：</strong>荸荠、大蒜

<strong>相应膳食：</strong>当归熟地乌骨鸡；怀山牛腩煲；怀菊带鱼；玫瑰怀菊露。

<strong>忌食或少食：</strong>海藻、草豆蔻、荷叶、白酒、薄荷、菊花、槟榔、生萝卜等。

<h3><strong><em>3.</em>阴虚——发热</strong></h3>

<strong>阴虚相当于水和津液不足，所以出现燥热。</strong>

在“四虚”中，女人最痛恨的就是阴虚，因为阴虚致丑！

主要表征

<strong>最典型的特征就在于一个字：燥！</strong>阴虚又称阴虚火旺，体内虚火引起燥热，导致皮肤干燥、长痘、面色偏红（高原红）、口腔溃疡、大便燥结、小便短赤而黄、五心烦热、盗汗等。

辨别要点

<strong>同时满足上火+比一般人怕热，</strong>不能光凭上火就判断是阴虚，如果爱上火，可又比一般人怕冷，叫真寒假热。<strong>阴虚的女人常见地图舌。</strong>

调理方法

<strong>补阴虚食品</strong>：甲鱼、燕窝、百合、鸭肉、黑鱼、海蜇、藕、金针菇、枸杞头、荸荠、生梨等，可经常交替选服。

<strong>阴虚忌食物品</strong>：胡椒、肉桂

<strong>忌食或少食</strong>：狗肉(脑血管患者禁食)、羊肉(肝炎患者禁食)、雀肉、海马、海龙、獐肉、锅巴、炒花生、炒黄豆、炒瓜子、爆米花、荔枝、龙眼肉、佛手柑、杨梅、大蒜、韭菜、芥菜、辣椒、薤白、生姜、砂仁、荜拨、草豆蔻、花椒、白豆蔻、大茴香、小茴香、丁香、薄荷、白酒、香烟、红参、肉苁蓉、锁阳等。

**     相应膳食：**金盆富贵豆腐；怀膳小捆肉；怀菊大枣银耳羹；甲鱼怀牛膝汤；农夫烤鱼；怀膳一品肘；;金盆富贵豆腐；怀山煨土鸡；参药煨乳鸽；何首乌煨猪肝。

<h3><strong><em>4.</em>阳虚——怕冷</strong></h3>

<strong>阳虚相当于阳光不足，所以感到寒冷。</strong>

主要表征

阳虚又称阳虚火衰，是气虚的进一步发展，阳虚之人属于冰冷型，最典型的特征就是：怕冷！

阳气不足，一般以脾肾阳虚为主，尤其肾阳为诸阳之本，而“肾主生殖”、“肾主骨”、“肾主水”，<strong>因此阳虚的女人容易出现性欲减退、腰腿疼痛、下肢肿胀等现象。阳虚的女人普遍都有白带偏多、经量偏少的现象，任由其发展，就会造成宫寒不孕。</strong>

此外，肾藏精、精生血，血养发，<strong>阳气不足的女人，精血虚衰，头发特别容易脱落、变白。</strong>

辨别要点

<strong>最大的特征就是怕冷，或局部容易凉，</strong>喜欢温热饮食，不能耐受寒凉饮食。

调理方法

<strong>补阳虚食品</strong>：黄牛肉、狗肉、羊肉、牛鞭、海参、淡菜、胡桃肉、桂圆、鹌鹑、鳗鱼、虾、韭菜、桂皮、茴香等，可经常交替选服。

<strong>阳虚忌食物品：</strong>鸭肉、兔肉、獭肉(水狗肉)、甜瓜

<strong>忌食或少食：</strong>鸭血、鸭蛋、阿胶、牛奶、酸奶、甲鱼、螃蟹、田螺、螺蛳、蚌肉、蚬肉、柿子、柿饼、柚子、柑、香蕉、无花果、西瓜、青苦瓜、地瓜、菜瓜、生藕、生萝卜、丝瓜、冬瓜、紫菜、地耳、金针菇、草菇、落葵、莼菜、发菜、君达菜、罗汉果、荸荠、菊花脑、薄荷、金银花、菊花、槐花等。

<strong>相应膳食：</strong>海马怀补鸡；三鞭怀补凹腰汤；韭菜怀补虾；爆炒腰花；长生煨老鸭。

<h2><strong>三、几种“虚”都有，怎么办？</strong></h2>

体虚者常出现两虚之体，主要有以下几种：

<strong>阴阳两虚：</strong>既怕冷又怕热，冬天特别怕冷，夏天特别怕热，<strong>进补宜采用阴阳并补、养阴温阳、滋阴壮阳等补法。</strong>

<strong>气血两虚：</strong>一般出现在贫血、白细胞减少症、血小板减少症、大出血后、月经过多者等人群身上，兼顾了气虚和血虚的表征，<strong>进补宜采用益气生血、培补气血、气血并补等补法。</strong>

<strong>气阴两虚：</strong>既有头晕、乏力、腿软等气虚表现，又有升火、咽干、舌红等阴虚表现，<strong>进补宜采用益气养阴之补法，即在进补时应同时考虑补气和补阴。</strong>不过，尽管体虚者常出现两虚之体，但排序往往有轻重，<strong>建议辨明根由，比如自己最初以哪些表征为主，再决定怎么调理。</strong>

<h2><strong>四、为什么虚证会引起衰老？</strong></h2>

<figure data-size="normal">![](https://pic1.zhimg.com/v2-86f663924da61b1d01223b40c219c770_b.jpg)</figure>

《黄帝内经》曰：女子以七为基数，七七任脉虚，太冲脉衰少；男子以八为基数，七八天癸竭，精少，肾脏衰。

这段话告诉我们：<strong>虚证之所以引起衰老，是因为肾精被折腾光了。</strong>我们常说“肾主骨升髓”，很多上了年纪的人为什么乎骨质疏松、腿脚不利索呢？就是因为年纪大了，身体虚了，肾精亏虚，则精不能生髓，髓不能濡养骨骼，再怎么吃钙片也不顶用。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2020-05-26 08:43:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-26 00:43:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-26 08:46:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-26 00:46:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%ad%e5%8c%bb-%e5%9b%9b%e8%99%9a%e8%af%8a%e6%96%ad%ef%bc%8c%e5%8f%8a%e5%85%b6%e9%a3%9f%e8%8d%af%e8%86%b3]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[siamBanner]]></title>
		<link>https://blog.siammm.cn/siambanner</link>
		<pubDate>Fri, 05 Jun 2020 03:41:53 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/wp-content/uploads/2020/06/siamBanner.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2020-06-05 11:41:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-05 03:41:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-05 11:41:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-05 03:41:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[siambanner]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://blog.siammm.cn/wp-content/uploads/2020/06/siamBanner.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020/06/siamBanner.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";i:870;s:6:"height";i:365;s:4:"file";s:22:"2020/06/siamBanner.png";s:5:"sizes";a:3:{s:6:"medium";a:4:{s:4:"file";s:22:"siamBanner-300x126.png";s:5:"width";i:300;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}s:9:"thumbnail";a:4:{s:4:"file";s:22:"siamBanner-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:22:"siamBanner-768x322.png";s:5:"width";i:768;s:6:"height";i:322;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[作者信息]]></title>
		<link>https://blog.siammm.cn/%e4%bd%9c%e8%80%85%e4%bf%a1%e6%81%af</link>
		<pubDate>Fri, 12 Jun 2020 04:39:32 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?page_id=276</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2020-06-12 12:39:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-12 04:39:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-12 12:39:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-12 04:39:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bd%9c%e8%80%85%e4%bf%a1%e6%81%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[page/page-author.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://blog.siammm.cn/archives/278</link>
		<pubDate>Fri, 12 Jun 2020 04:55:33 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/archives/278</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date><![CDATA[2020-06-12 12:55:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-12 04:55:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-12 12:55:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-12 04:55:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[278]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95"><![CDATA[顶部菜单]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[276]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[百度地图 轨道移动，小车]]></title>
		<link>https://blog.siammm.cn/archives/280</link>
		<pubDate>Wed, 24 Jun 2020 05:49:02 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[<pre data-language=HTML><code class="language-markup line-numbers">&lt;!DOCTYPE html&gt;  
&lt;html&gt;  
&lt;head&gt;  
&lt;meta name="viewport" content="initial-scale=1.0, user-scalable=no" /&gt;  
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;  
&lt;title&gt;Track&lt;/title&gt;  
&lt;style type="text/css"&gt;  
    html{height:100%}  
    body{height:100%;margin:0px;padding:0px}  
    #controller{width:100%; border-bottom:3px outset; height:30px; filter:alpha(Opacity=100); -moz-opacity:1; opacity:1; z-index:10000; background-color:lightblue;}  
    #container{height:100%}  
&lt;/style&gt;    
&lt;script type="text/javascript" src="http://api.map.baidu.com/api?v=1.5&amp;ak=D2b4558ebed15e52558c6a766c35ee73"&gt;&lt;/script&gt;  
&lt;script type="text/javascript"&gt;  
//获取所有点的坐标  
var points = [  
    new BMap.Point(114.00100, 22.550000), new BMap.Point(114.00130, 22.550000),  
    new BMap.Point(114.00160, 22.550000), new BMap.Point(114.00200, 22.550000),  
    new BMap.Point(114.00300, 22.550500), new BMap.Point(114.00400, 22.550000),  
    new BMap.Point(114.00500, 22.550000), new BMap.Point(114.00505, 22.549800),  
    new BMap.Point(114.00510, 22.550000), new BMap.Point(114.00515, 22.550000),  
    new BMap.Point(114.00525, 22.550400), new BMap.Point(114.00537, 22.549500)  
];  
var map;   //百度地图对象  
var car;   //汽车图标  
var label; //信息标签  
var centerPoint;  
var timer;     //定时器  
var index = 0; //记录播放到第几个point  
var followChk, playBtn, pauseBtn, resetBtn; //几个控制按钮  
function init() {  
    followChk = document.getElementById("follow");  
    playBtn = document.getElementById("play");  
    pauseBtn = document.getElementById("pause");  
    resetBtn = document.getElementById("reset");  
    //初始化地图,选取第一个点为起始点  
    map = new BMap.Map("container");  
    map.centerAndZoom(points[0], 15);  
    map.enableScrollWheelZoom();  
    map.addControl(new BMap.NavigationControl());  
    map.addControl(new BMap.ScaleControl());  
    map.addControl(new BMap.OverviewMapControl({isOpen: true}));  
    //通过DrivingRoute获取一条路线的point  
    var driving = new BMap.DrivingRoute(map);  
    driving.search(new BMap.Point(114.00100, 22.550000), new BMap.Point(113.95100, 22.550000));  
    driving.setSearchCompleteCallback(function() {  
        //得到路线上的所有point  
        points = driving.getResults().getPlan(0).getRoute(0).getPath();  
        //画面移动到起点和终点的中间  
        centerPoint = new BMap.Point((points[0].lng + points[points.length - 1].lng) / 2, (points[0].lat + points[points.length - 1].lat) / 2);  
        map.panTo(centerPoint);  
        //连接所有点  
        map.addOverlay(new BMap.Polyline(points, {strokeColor: "black", strokeWeight: 5, strokeOpacity: 1}));  
        //显示小车子  
        label = new BMap.Label("", {offset: new BMap.Size(-20, -20)});  
        var myIcon = new BMap.Icon("3.png", new BMap.Size(64, 64));
        car = new BMap.Marker(points[0],{icon: myIcon});  
        car.setLabel(label);  
        map.addOverlay(car);  
        //点亮操作按钮  
        playBtn.disabled = false;  
        resetBtn.disabled = false;  
    });  
}  
function play() {  
    playBtn.disabled = true;  
    pauseBtn.disabled = false;  
    var point = points[index];  
    if(index &gt; 0) {  
        map.addOverlay(new BMap.Polyline([points[index - 1], point], {strokeColor: "#fff", strokeWeight: 1, strokeOpacity: 1}));  
    }  
    label.setContent("经度: " + point.lng + "&lt;br&gt;纬度: " + point.lat);  
    var labelStyle = {
        icon:"3.png"
    };
    car.setPosition(point);  
    index++;  
    if(followChk.checked) {  
        map.panTo(point);  
    }  
    if(index &lt; points.length) {  
        timer = window.setTimeout("play(" + index + ")", 100);  
    } else {  
        playBtn.disabled = true;  
        pauseBtn.disabled = true;  
        map.panTo(point);  
    }  
}  
function pause() {  
    playBtn.disabled = false;  
    pauseBtn.disabled = true;  
    if(timer) {  
        window.clearTimeout(timer);  
    }  
}  
function reset() {  
    followChk.checked = false;  
    playBtn.disabled = false;  
    pauseBtn.disabled = true;  
    if(timer) {  
        window.clearTimeout(timer);  
    }  
    index = 0;  
    car.setPosition(points[0]);  
    map.panTo(centerPoint);  
}  
&lt;/script&gt;  
&lt;/head&gt;    
&lt;body onload="init();"&gt;    
    &lt;div id="controller" align="center"&gt;  
        &lt;input id="follow" type="checkbox"&gt;&lt;span style="font-size:12px;"&gt;画面跟随&lt;/span&gt;&lt;/input&gt;  
        &lt;input id="play" type="button" value="播放" onclick="play();" disabled /&gt;  
        &lt;input id="pause" type="button" value="暂停" onclick="pause();" disabled /&gt;  
        &lt;input id="reset" type="button" value="重置" onclick="reset()" disabled /&gt;  
    &lt;/div&gt;  
    &lt;div id="container"&gt;&lt;/div&gt;  
&lt;/body&gt;    
&lt;/html&gt;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date><![CDATA[2020-06-24 13:49:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-24 05:49:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-24 13:49:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-24 05:49:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%99%be%e5%ba%a6%e5%9c%b0%e5%9b%be-%e8%bd%a8%e9%81%93%e7%a7%bb%e5%8a%a8%ef%bc%8c%e5%b0%8f%e8%bd%a6]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[MYSQL 索引成本计算，为什么MYSQL预判后选择了错误索引？]]></title>
		<link>https://blog.siammm.cn/archives/281</link>
		<pubDate>Wed, 24 Jun 2020 05:57:14 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=281</guid>
		<description></description>
		<content:encoded><![CDATA[SQL 选用索引的执行成本如何计算
就如前文所述，在有多个索引的情况下， 在查询数据前，MySQL 会选择成本最小原则来选择使用对应的索引，这里的成本主要包含两个方面。

<ul>
<li>IO 成本: 即从磁盘把数据加载到内存的成本，默认情况下，读取数据页的 IO 成本是 1，MySQL 是以页的形式读取数据的，即当用到某个数据时，并不会只读取这个数据，而会把这个数据相邻的数据也一起读到内存中，这就是有名的程序局部性原理，所以 MySQL 每次会读取一整页，一页的成本就是 1。所以 IO 的成本主要和页的大小有关</li>
<li>CPU 成本：将数据读入内存后，还要检测数据是否满足条件和排序等 CPU 操作的成本，显然它与行数有关，默认情况下，检测记录的成本是 0.2。
实例说明
为了根据以上两个成本来算出使用索引的最终成本，我们先准备一个表（以下操作基于 MySQL 5.7.18）</li>
</ul>

<pre><code class="language-sql line-numbers">CREATE TABLE `person` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `score` int(11) NOT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `name_score` (`name`(191),`score`),
  KEY `create_time` (`create_time`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
</code></pre>

这个表除了主键索引之外，还有另外两个索引, name_score 及 create_time。然后我们在此表中插入 10 w 行数据，只要写一个存储过程调用即可，如下:

<pre><code class="language-sql line-numbers">CREATE PROCEDURE insert_person()
begin
    declare c_id integer default 1;
    while c_id&lt;=100000 do
    insert into person values(c_id, concat('name',c_id), c_id+100, date_sub(NOW(), interval c_id second));
    set c_id=c_id+1;
    end while;
end
</code></pre>

插入之后我们现在使用 EXPLAIN 来计算下统计总行数到底使用的是哪个索引

<pre><code class="language-sql line-numbers">EXPLAIN SELECT COUNT(*) FROM person
</code></pre>

从结果上看它选择了 create_time 辅助索引，显然 MySQL 认为使用此索引进行查询成本最小，这也是符合我们的预期，使用辅助索引来查询确实是性能最高的！

我们再来看以下 SQL 会使用哪个索引

<pre><code class="language-sql line-numbers">SELECT * FROM person WHERE NAME &gt;'name84059' AND create_time&gt;'2020-05-23 14:39:18'
</code></pre>

用了全表扫描！理论上应该用 name_score 或者 create_time 索引才对，从 WHERE 的查询条件来看确实都能命中索引，那是否是使用 SELECT * 造成的回表代价太大所致呢，我们改成覆盖索引的形式试一下

<pre><code class="language-sql line-numbers">explain SELECT NAME FROM person WHERE NAME &gt; 'name84059'
</code></pre>

结果 MySQL 依然选择了全表扫描！这就比较有意思了，理论上采用了覆盖索引的方式进行查找性能肯定是比全表扫描更好的，为啥 MySQL 选择了全表扫描呢，既然它认为全表扫描比使用覆盖索引的形式性能更好，那我们分别用这两者执行来比较下查询时间吧

-- 全表扫描执行时间: 4.0 ms

<pre><code class="language-sql line-numbers">SELECT create_time FROM person WHERE NAME &gt;'name84059' AND create_time&gt;'2020-05-23 14:39:18' 
</code></pre>

-- 使用覆盖索引执行时间: 2.0 ms

<pre><code class="language-sql line-numbers">SELECT create_time FROM person force index(create_time) WHERE NAME &gt;'name84059' AND create_time&gt;'2020-05-23 14:39:18'
</code></pre>

从实际执行的效果看使用覆盖索引查询比使用全表扫描执行的时间快了一倍！说明 MySQL 在查询前做的成本估算不准！我们先来看看 MySQL 做全表扫描的成本有多少。

前面我们说了成本主要 IO 成本和 CPU 成本有关，对于全表扫描来说也就是分别和聚簇索引占用的页面数和表中的记录数。执行以下命令

<pre><code class="language-sql line-numbers">SHOW TABLE STATUS LIKE 'person'
</code></pre>

可以发现

行数是 100264，我们不是插入了 10 w 行的数据了吗，怎么算出的数据反而多了，其实这里的计算是估算，也有可能这里的行数统计出来比 10 w 少了，估算方式有兴趣大家去网上查找，这里不是本文重点，就不展开了。得知行数，那我们知道 CPU 成本是 100264 * 0.2 = 20052.8。
数据长度是 5783552，InnoDB 每个页面的大小是 16 KB，可以算出页面数量是 353。
也就是说全表扫描的成本是 20052.8 + 353 = 20406。

这个结果对不对呢，我们可以用一个工具验证一下。在 MySQL 5.6 及之后的版本中，我们可以用 optimizer trace 功能来查看优化器生成计划的整个过程 ，它列出了选择每个索引的执行计划成本以及最终的选择结果，我们可以依赖这些信息来进一步优化我们的 SQL。

optimizer_trace 功能使用如下

<pre><code class="language-sql line-numbers">SET optimizer_trace="enabled=on";
SELECT create_time FROM person WHERE NAME &gt;'name84059' AND create_time &gt; '2020-05-23 14:39:18';
SELECT * FROM information_schema.OPTIMIZER_TRACE;
SET optimizer_trace="enabled=off";
</code></pre>

执行之后我们主要观察使用 name_score，create_time 索引及全表扫描的成本。

先来看下使用 name_score 索引执行的的预估执行成本:

<pre><code class="language-json line-numbers">{
    "index": "name_score",
    "ranges": [
      "name84059 &lt;= name"
    ],
    "index_dives_for_eq_ranges": true,
    "rows": 25372,
    "cost": 30447
}
</code></pre>

可以看到执行成本为 30447，高于我们之前算出来的全表扫描成本：20406。所以没选择此索引执行

注意：这里的 30447 是查询二级索引的 IO 成本和 CPU 成本之和，再加上回表查询聚簇索引的 IO 成本和 CPU 成本之和。

再来看下使用 create_time 索引执行的的预估执行成本:

<pre><code class="language-json line-numbers">{
    "index": "create_time",
    "ranges": [
      "0x5ec8c516 &lt; create_time"
    ],
    "index_dives_for_eq_ranges": true,
    "rows": 50132,
    "cost": 60159,
    "cause": "cost"
}
</code></pre>

可以看到成本是 60159,远大于全表扫描成本 20406，自然也没选择此索引。

再来看计算出的全表扫描成本：

<pre><code class="language-json line-numbers">{
    "considered_execution_plans": [
      {
        "plan_prefix": [
        ],
        "table": "`person`",
        "best_access_path": {
          "considered_access_paths": [
            {
              "rows_to_scan": 100264,
              "access_type": "scan",
              "resulting_rows": 100264,
              "cost": 20406,
              "chosen": true
            }
          ]
        },
        "condition_filtering_pct": 100,
        "rows_for_plan": 100264,
        "cost_for_plan": 20406,
        "chosen": true
      }
    ]
}
</code></pre>

注意看 cost：20406，与我们之前算出来的完全一样！这个值在以上三者算出的执行成本中最小，所以最终 MySQL 选择了用全表扫描的方式来执行此 SQL。

实际上 optimizer trace 详细列出了覆盖索引，回表的成本统计情况，有兴趣的可以去研究一下。

从以上分析可以看出， MySQL 选择的执行计划未必是最佳的，原因有挺多，就比如上文说的行数统计信息不准，再比如 MySQL 认为的最优跟我们认为不一样，我们可以认为执行时间短的是最优的，但 MySQL 认为的成本小未必意味着执行时间短。

总结
本文通过一个例子深入剖析了 MySQL 的执行计划是如何选择的，以及为什么它的选择未必是我们认为的最优的，这也提醒我们，在生产中如果有多个索引的情况，使用 WHERE 进行过滤未必会选中你认为的索引，我们可以提前使用EXPLAIN, optimizer trace 来优化我们的查询语句。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date><![CDATA[2020-06-24 13:57:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-24 05:57:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-24 13:57:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-24 05:57:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-%e7%b4%a2%e5%bc%95%e6%88%90%e6%9c%ac%e8%ae%a1%e7%ae%97%ef%bc%8c%e4%b8%ba%e4%bb%80%e4%b9%88mysql%e9%a2%84%e5%88%a4%e5%90%8e%e9%80%89%e6%8b%a9%e4%ba%86%e9%94%99%e8%af%af%e7%b4%a2%e5%bc%95%ef%bc%9f]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[腾讯云杂货摊脚本]]></title>
		<link>https://blog.siammm.cn/archives/302</link>
		<pubDate>Wed, 26 May 2021 02:12:56 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=302</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code class="line-numbers">// ==UserScript==
// @name         腾讯云活动测试
// @namespace    http://blog.siammm.cn
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        https://cloud.tencent.com/developer/video/*
// @icon         https://www.google.com/s2/favicons?domain=tencent.com
// @grant        none
// @require      https://code.jquery.com/jquery-1.12.4.min.js
/* globals jQuery, $, waitForKeyElements */
// ==/UserScript==

(function() {
    'use strict';

    // 先获取url的id
    let url = window.location.href;
    let urlArray = url.split("/")
    let id = urlArray.pop();

    // 今日已处理数量 = 20，则不运行
    if (todayNumberGet() &gt;= 20){
        alert("今日处理已达标，请记录最后id -&gt;" + id);
        todayNumberClear();
        return false;
    }
    let commentContent = "666牛逼啊";
    let csrfCode = 488460237;
    let uin = 100002600007;
    let commentUrl = `https://cloud.tencent.com/developer/services/ajax/creator/creator?action=AddVideoComment&amp;uin=${uin}&amp;csrfCode=${csrfCode}`;


    function runCondition(){
        // 先判断是否点过赞，没有则点赞
        let hasStart = !$(".video-operations.com-operations a.com-opt-link.operation-like").hasClass("dark");
        if (!hasStart){
            clickStart();
            setTimeout(function(){
                comment();
            }, randomNum(1200, 2500));

            // 今日已处理数量++
            todayNumberAdd();

            setTimeout(function(){
                urlArray.push(++id);
                window.location.href = urlArray.join("/");
            }, randomNum(2500, 4500));
        }else{
            console.log(id + " -&gt; 文章已处理过");
            // 延迟1000毫秒跳转下一个链接
            setTimeout(function(){
                urlArray.push(++id);
                window.location.href = urlArray.join("/");
            }, randomNum(1200, 2500));
        }
    }

    function clickStart(){
        $(".video-operations.com-operations a")[0].click();
        console.log(id + " -&gt; 点赞完成");
    }
    function comment()
    {
        $(".edit-textarea").val(commentContent)
        $(".edit-btns .c-btn-disabled").removeClass("c-btn-disabled");
        $.ajax({
            url: commentUrl,
            type: "post",
            contentType: "application/json;charset=utf-8",
            data: JSON.stringify({
                action: "AddVideoComment",
                payload: {
                    videoId: id,
                    parentCommentId: 0,
                    content: commentContent
                }
            }),
            dataType: "json",
            success: function(res) {
                console.log(id + " -&gt; 评论结果");
                console.log(res);
            }
        })
    }

    function todayNumberAdd(){
        let originNumber = localStorage.getItem("siam_number");
        if (!originNumber) originNumber = 0;
        originNumber++;
        localStorage.setItem("siam_number", originNumber);
    }
    function todayNumberClear()
    {
        localStorage.setItem("siam_number", 0);
    }
    function todayNumberGet()
    {
        let originNumber = localStorage.getItem("siam_number");
        if (!originNumber) originNumber = 0;
        return originNumber;
    }
    function randomNum(minNum,maxNum){
        switch(arguments.length){
            case 1:
                return parseInt(Math.random()*minNum+1,10);
                break;
            case 2:
                return parseInt(Math.random()*(maxNum-minNum+1)+minNum,10);
                break;
            default:
                return 0;
                break;
        }
    }


    // 等待2秒 防止还没加载好
    setTimeout(function(){
        runCondition();
    }, 1500 );
})();
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date><![CDATA[2021-05-26 10:12:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-05-26 02:12:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-05-26 10:12:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-05-26 02:12:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%85%be%e8%ae%af%e4%ba%91%e6%9d%82%e8%b4%a7%e6%91%8a%e8%84%9a%e6%9c%ac]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[166]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[对象池、连接池的意义]]></title>
		<link>https://blog.siammm.cn/archives/42</link>
		<pubDate>Wed, 12 Jun 2019 07:40:10 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[这次我们来讲讲对象池、连接池的意义，在此之前我们先了解学习一些其他的基础知识，以便我们结合理解池的意义。

<h4>nginx与php-fpm的进程模型</h4>

nginx采用多进程模型，启动之后的进程将包含<code>一个master</code>和<code>多个worker</code>进程。

<strong>master</strong>是worker的父进程，主要职责是用来管理worker进程的。

<ul>
<li>向worker进程发送信号，如通知退出</li>
<li>监控worker状态，当worker退出后（无论正常异常），可以重新启动新的worker。</li>
</ul>

<blockquote>
  可以实现<code>从容重启</code>：master进程在接收到信号后，会先重新加载配置，然后再启动新进程开始接收新请求，并向所有老进程发送信号告知不再接收新请求并在处理完所有未处理完的请求后自动退出。
</blockquote>

<strong>worker</strong>进程负责处理请求，如果是静态文件则可以直接处理完，如果是php程序还需要调用php来处理，当php处理完成时获取php的返回，并返回给客户端。

采用的是<code>异步非堵塞</code>，当调用php的时候不会堵塞等待，会抽空处理下一个请求，当php处理完成时恢复之前的请求并返回给客户端。

<strong>php-fpm</strong>是php-cgi的管理器，在<code>php &gt;= 5.3.3</code>就已经集成在php中了。

它的出现提供了更好的php管理方式

<ul>
<li>可以平滑停止/启动php进程（重载配置生效）</li>
<li>可以配置监控多个端口和使用不同的配置</li>
</ul>

php脚本的解释器是php-cgi

php-fpm是一个管理器，管理对象是php-cgi

php-fpm实现了fastcgi协议，当php-fpm启动时，会启动多个cgi解释器进程。

web服务器可以发送数据给php-fpm，php-fpm再把数据发给php-cgi处理。（跟nginx发送数据给php-fpm类似）

<h4>常驻内存下程序的对象回收</h4>

<code>常驻内存程序</code>是指把自己装入内存后将控制返回给操作系统，直到运行结束、异常、用户手动退出才会中断运行的程序。

当程序运行时，对象和变量将会一直存在。除非在程序中释放销毁。

<h4>高并发下频繁new对象的资源占用</h4>

当我们new一个对象的时候，需要先经过这几个步骤：类加载检查、分配内存空间、设置类的基本信息、调用初始化构造函数。

<br/>
首先我们看看<code>构造函数</code>这一块，这是在代码中按我们的需求和意愿编写的。
在这一块中我们经常会做一些配置检测、数据初始化、数据库连接（网络io）等。
<br/>
接下来是<code>分配内存空间</code>

OS的内存分配器一般是预先向OS申请一大段内存。然后每次分配时，再将里面的一小段标记为<code>已分配</code>，释放的时候再标记成未分配。

由于是有很多程序在运行，所以分配和释放会交替存在，得到的结果可能是 分配1段-未分配1段-分配2段-未分配2段

一个一个的<code>未分配</code>就是内存碎片，会占用额外的内存，碎片不一定可以马上被重复使用（当分配不出连续内存时，需要向OS申请更多的内存）
<br/>

同时，创建和销毁对象时，OS都需要做一些处理工作，也会产生资源占用。

<h3>new太多对象，然后导致cpu负载上线让全站死机的概念</h3>

若程序未产生IO（网络请求、读写文件等），执行时间等于cpu的占用时间。

频繁地创建销毁对象将会占用更多cpu资源，高并发时容易导致cpu长期处于高负载运行状态。

<h3>什么是对象池</h3>

对象池就是一个在程序启动的时候先创建好若干个可以重复使用的对象。

当程序其他地方需要使用该类型对象时，不再是向系统申请创建，而是向池发出请求。

池将会从池内发配出一个对象提供使用，当程序使用完毕后，需要将对象归还给对象池做管理。

<blockquote>
  对象池服务可以减少从头创建每个对象的系统开销。
</blockquote>

<h3>大并发下多个mysql连接导致mysql繁忙全站崩溃</h3>

<pre><code class="language-php line-numbers">&lt;?php
function db(){
    return mysqli_connect("localhost","root","root"); 
}

for ($i=0; $i &lt; 10000; $i++) { 
    $name  = "db{$i}";
    $$name = db();
}
</code></pre>

这一个demo将会产生报错:<code>Warning: mysqli_connect(): (08004/1040): Too many connections</code>

我们习惯性地在PHP脚本中不会主动关闭mysql连接，而是等到脚本运行完毕之后再由gc自动回收。在这个期间将会继续占用连接资源，而连接资源的数量又是有限制的，所以会更快出现连接不够用的情况。

处理会影响程序的运行，同时还将可能<code>导致全站崩溃</code>。

<ul>
<li>mysql是一个连接创建一个线程处理。</li>
<li>创建销毁mysql线程需要的内存等性能消耗、线程缓存命中率下降</li>
<li>mysql底层几乎在同时需要处理几百个线程提交的查询请求，而cpu一次只能处理一条指令，并且数据库查询需要产生IO，在IO期间cpu将会切换上下文处理其他的请求，当cpu频繁切换上下文，性能抖动，发生性能下降甚至宕机的情况。</li>
</ul>

<h3>连接池 保护mysql不崩溃</h3>

连接池是将已经创建好的连接保存在池中，当有请求来时，直接使用已经创建好的连接对数据库进行访问。

<pre><code class="language-php line-numbers">&lt;?php
class Pool{
    private $pool = [];
    private $min = 5;
    private $max = 100;
    private $now;

    public function __construct()
    {
        // 在池创建的时候就先创建好一些连接
        for ($i = 0 ; $i &lt; $this-&gt;min; $i++){
            $this-&gt;pool[] = mysqli_connect("localhost","root","root");
            $this-&gt;now++;
        }
    }

    public function get()
    {
        // 这里要判断当前池还有没有空闲的
        // 若没有，则判断当前已经提供的服务数量大不大于最大数量   如果还没有达到最大数量  可以向系统再申请一个资源到池中
        // 如果已经达到最大数量，并且池内没有服务了，则进行短暂等等看看有没有

        // 需要销毁避免同一个连接多处使用，会冲突
        $connect = array_shift($this-&gt;pool);

        return $connect;//伪代码
    }

    public function recovery($connect)
    {
        $this-&gt;pool[] = $connect;
    }
}
</code></pre>

<blockquote>
  因为连接池需要长期保持在线，在传统的php脚本中不支持，在<code>swoole</code>中可以常驻内存运行，即可使用连接池
</blockquote>

这样省略了创建连接和销毁连接的过程。这样性能上得到了提高。

然而除了性能上的提高外，还有一个意义也很重要：<code>保护服务稳定运行，不发生全站崩溃。</code>

在上面一点我们已经提到，更多的链接将会导致cpu频繁切换上下文，性能抖动，严重情况时将会全站崩溃。

假设本来我们的服务器配置是可以保证1000个连接同时稳定运行，突然某一时刻有3000个人并发，导致连接不够用，那么是保证原有1000人都正常运行好，还是让这3000人争抢资源最终导致机器响应不了全站崩溃好呢？

<h4>连接池的意义此时才得以体现，我们设置连接池的最大数量为机器能承受并且稳定运行的最大数量。</h4>

当已经有这么多的数量在服务的时候，后面的请求申请连接资源时需要进行短暂的等待，若时间到了还是没有空余连接提供，则需要熔断服务，返回给客户端失败。

这样子可以保证机器长期稳定服务。若是越来越多的客户端申请不到资源，则需要提高机器配置。（因为我们的连接池最大数量已经是机器的瓶颈，只能通过硬件配置来提升能服务的数量）

<h3>nginx - php fpm在大并发下504</h3>

在最开始的时候已经介绍过nginx和php的运行进程模型，php-fpm就是一个池管理器，内部装了若干个php-cgi程序，当nginx申请解析php脚本时，php-fpm则分配一个php-cgi出去处理，处理完则收回管理。

在高并发下，nginx会产生504错误，这就是我们上面介绍到的，客户端进行了短暂的 <code>等待</code> 后，仍然申请不到资源，则只能告诉客户端失败。

（在京东、淘宝的大活动期间很有机会碰到504错误哦！  这种情况下我们一般只需要刷新页面即可。 因为再刷新时大几率已经有连接资源空闲了！）

<ul>
<li>Nginx 504 Gateway Time-out的含义是没有请求到可以执行的PHP-CGI。</li>
</ul>

<h2>总结</h2>

连接池、对象池的意义不仅仅是可以减少频繁创建销毁对象连接的性能开销

更大的意义是可以保证应有服务客户端的稳定运行。

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/b4bba8937eaf4ddf3e8b67767d50259d.png" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2019-06-12 15:40:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-12 07:40:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-06-12 16:32:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-06-12 08:32:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%af%b9%e8%b1%a1%e6%b1%a0%e3%80%81%e8%bf%9e%e6%8e%a5%e6%b1%a0%e7%9a%84%e6%84%8f%e4%b9%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1433]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>676</wp:comment_id>
			<wp:comment_author><![CDATA[janus]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[863113183@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.45.78.113]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-05-23 00:47:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-05-22 16:47:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[来踩踩]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>758</wp:comment_id>
			<wp:comment_author><![CDATA[111]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.45.78.80]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-09-17 13:55:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-09-17 05:55:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[11]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>759</wp:comment_id>
			<wp:comment_author><![CDATA[XueSi]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1592328848@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[61.160.239.112]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-09-23 15:38:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-09-23 07:38:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[来逛逛]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[PHP异常处理函数,Thinkphp调试]]></title>
		<link>https://blog.siammm.cn/archives/51</link>
		<pubDate>Wed, 19 Jun 2019 01:47:36 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[在我们开发过程、已上线的应用中，程序经常会因为异常而崩溃。
比如：<code>数据库执行失败</code>、<code>调用了不存在的类</code>、<code>调用了不存在的函数/方法</code>....

如果是在开发过程中还好，问题肯定是由我们自己发现，可以清楚地看到异常的信息。
那么如果是已经上线的应用，那么出现问题的时候，客户往往是这么说的

<blockquote>
  在xxx的时候 网页没有反应，网页失败了。
</blockquote>

So? How to review it?

以上举例是我们本次要解决的问题，我们再来查看一个案例。

用过thinkphp等任何一个框架的都知道，当我们的程序报错时，显示的都是框架美美的报错异常页面。

之所以能显示出框架自定义的页面，都是因为使用了<code>异常处理函数</code>来实现的。

<h3>异常处理函数</h3>

在默认的php中，产生异常的时候是这样子的：

<hr />

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/a70ed18f9c5c22caff11cc7cb69e65a9.png" alt="" />

<hr />

php提供了<code>set_exception_handler</code>函数，让我们可以自定义异常产生时执行、输出的数据。

<pre><code class="language-php line-numbers">&lt;?php
function exception_handler($exception) {
    echo "有异常产生了 傻逼 :\n";
    var_dump($exception);
}

set_exception_handler('exception_handler');

throw new Exception('Uncaught Exception');
</code></pre>

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/08563355c62699f0a60e1ee8a179e0c4.png" alt="" />

此时我们可以看到我们自定义的内容输出了。

在thinkphp中，除了异常类携带的简单file、code、message、trace等

<code>还会获取</code>当前服务器的配置、脚本的参数(get/post...)、数据库查询语句等

然后组合成一个有排版、数据充足的页面展示给我们，方便了我们排查问题。

<h3>thinkphp 默认的异常处理器</h3>

tp中默认的异常处理器是：<code>\think\exception\Handle</code>这个类，同时在配置文件中也预留了我们自定义的配置空间。

<h3>在thinkphp中实现异常上报模块</h3>

我自定义了一个继承了tp默认异常处理器的新类，并在其中记录了<code>php脚本执行时间</code>、<code>tp能获取到的全部数据</code> 然后上报到数据库(或者其他储存地址)

再自定义了<code>查看异常记录</code>的页面

当点击查看记录的时候，在脚本中开启tp的debug模式，然后复现数据

到这里，哪怕线上的脚本挂了，我们也可以通过此模块查看复现报错的地方。

客户说遇到了问题崩溃了，我们查看此模块分析就可以，

甚至可以每天定期查看该模块，检查程序是否有异常产生，提前解决，提高程序的稳健性

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/f0d042c3cfbabc635b0e0277ddf0274a.png" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2019-06-19 09:47:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-19 01:47:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-06-19 09:48:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-06-19 01:48:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86%e5%87%bd%e6%95%b0thinkphp%e8%b0%83%e8%af%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2027]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://www.siammm.cn/wp-content/uploads/2019/06/f0d042c3cfbabc635b0e0277ddf0274a.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[小柒]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1215@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[119.188.116.16]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-07-10 21:30:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-07-10 13:30:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我真帅]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[lmv10]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[617696638@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[119.188.116.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-03 15:33:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-03 07:33:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[大佬tp的异常上报模块代码能分享下不]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Siam]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[59419979@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[119.188.116.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-11 12:14:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-11 04:14:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[可以QQ联系我]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>8</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[lmv10]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[617696638@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[119.188.116.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-18 14:01:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-18 06:01:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[已联系QQ]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>10</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[HTTP协议中的GET、POST请求方法的区别]]></title>
		<link>https://blog.siammm.cn/archives/54</link>
		<pubDate>Sun, 23 Jun 2019 06:20:31 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[在我们日常打开网页、对接接口时，使用到的一般都是HTTP协议。

HTTP 的工作方式是客户端与服务器之间的请求-响应。

HTTP 请求方法有：HEAD、PUT、DELETE、OPTIONS、CONNECT

两种最常被用到的HTTP方法是：<code>GET</code> 和 <code>POST</code>。

本篇文章讲讲<code>GET</code>和<code>POST</code>两种请求方法的区别。

<h3>在浏览器上表现的区别</h3>

<strong>GET</strong>

<ul>
<li>GET 请求可被缓存</li>
<li>GET 请求保留在浏览器历史记录中</li>
<li>GET 请求可被收藏为书签</li>
<li>GET 请求参数在URL中的是可见的</li>
<li>GET 请求有长度限制</li>
</ul>

<strong>POST</strong>

<ul>
<li>POST 请求不会被缓存</li>
<li>POST 请求不会保留在浏览器历史记录中</li>
<li>POST 不能被收藏为书签</li>
<li>POST 请求参数在URL中的是不可见的</li>
<li>POST 请求对数据长度没有要求</li>
</ul>

在浏览器上的表现是最表面的，所以大部分的人都已经知道。

简单的就不再说了，这里再说说<code>请求参数的可见性</code>和容易让人产生误区的<code>数据长度限制</code>

<h5>请求参数可见性</h5>

在GET请求中，查询字符串是在 GET 请求的 URL 中发送的

<pre><code class="line-numbers">index.php?content=这是get方式里面的一个字段的值
</code></pre>

get方式请求头和请求体

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/9488ac79d8b647b56a1315ba90f5b468.png" alt="get方式请求头和请求体" />

在POST请求中，查询字符串是在 POST 请求的 HTTP 消息主体中发送的

<pre><code class="line-numbers">POST index.php HTTP/1.1
Host: www.siammm.cn

content=这是post方式里面的一个字段的值
</code></pre>

post方式请求头和请求体
<img src="https://www.siammm.cn/wp-content/uploads/2019/06/6a48dd20072a9e92c2751174d59fa58d.png" alt="post方式请求头和请求体" />

<blockquote>
  因为post请求是将参数放在HTTP主体中，所以在常规浏览器地址栏上是看不到参数的，这就是请求参数在URL中的可见性的不同。
</blockquote>

两种请求方法请求头和请求体的对比  可以看到参数存放位置不一样
<img src="https://www.siammm.cn/wp-content/uploads/2019/06/4d8aea9ad35575c5d2fbc4f5bec25b3c.png" alt="两种请求方法请求头和请求体的对比" />

<h5>数据长度限制</h5>

从上面的请求参数可见性我们已经知道

<code>GET</code>请求的所有参数都是在URL中发送的

我们常说的GET请求有数据长度限制，其实那只是<code>浏览器对URL长度的限制</code>

嗯，这里要看清一个点：是浏览器

而不是HTTP协议的规定，同时在web服务器上也有对于长度的限制（这些下面的文章会讲）

<blockquote>
  因为post请求是将参数放在HTTP主体中，所以不会受到此限制
</blockquote>

不同的浏览器对于URL长度的限制是不同的，这个可以自行测试得出

首先：我们找到一篇长文章。（文章可以从短到长进行测试，会从正常搜索然后到达url长度限制）

然后打开<code>https://www.baidu.com/s?wd=文章内容</code>

这个网址，进行百度搜索。

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/1d6821d226b21467b6478a492b153ac0.png" alt="siam博客,get/post的区别" />

看图片上的文字说明

把搜索内容替换成超级长的文章，再怎么按回车或者跳转按钮都没效果，页面还是保留一开始的。

也就是说<code>url的长度已经到达了浏览器的限制</code>，所以<code>浏览器不处理该请求</code>了。

这张截图是在win10自带的Edge测试的，同时在搜狗浏览器也是一样的情况。

但是在谷歌Chrome浏览器就是另一种场景了。浏览器会正常跳转，但是却不能正常响应。（该情况涉及到的知识，在下面会讲）

<strong>先附带一下百度上提供的资料</strong>

各个浏览器对于url长度的限制

<ol>
<li>IE浏览器对URL的长度现限制为2048字节(自己测试最多为2047字节)。</li>
<li>360极速浏览器对URL的长度限制为2118字节。</li>
<li>Firefox(Browser)对URL的长度限制为65536字节。</li>
<li>Safari(Browser)对URL的长度限制为80000字节。</li>
<li>Opera(Browser)对URL的长度限制为190000字节。</li>
<li>Google(chrome)对URL的长度限制为8182字节。</li>
</ol>

<h3>在http协议上的规定</h3>

HTTP 协议没有规定URL的最大长度，也没有规定HTTP请求体的最大长度。

所以在HTTP协议上，对于GET请求和POST请求的数据长度，是<code>没有限制</code>的。

但规定服务器如果不能处理太长的URL，就得返回414状态码（Request-URI Too Long）。

这也是我们上面说到的，在谷歌Chrome浏览器中，会正常跳转，但却无法正常响应的结果。

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/5a6874a59f4f67fec448a2f0b52b0d7b.png" alt="414状态码" />

<blockquote>
  请注意，该结果不是由http协议直接返回，而是规定服务器可以这样子处理（不是强制性 看你web服务器想要处理多长的url），所以该情况是属于web服务器上的限制，在下面知识会继续讲解
</blockquote>

<h3>在web服务器配置限制url长度</h3>

如果请求正常通过了浏览器的限制，则会发送到web服务器上了（如apache  nginx）

在进入web服务器时，也需要进行一次限制的检测。

如果我们的服务器不想服务那么长的url，可以在这里通过修改配置参数，来决定最大接收的长度。

如果超过该长度，则遵循HTTP协议，返回414状态码，返回响应并终止此次请求。

<strong>以nginx为例</strong>

在nginx的配置参数中，有两个配置项可以决定要服务的url长度。

因为url长度是属于http请求头的一部分，所以配置项上的体现是以控制请求头最大长度的。

这两个配置项是

<pre><code class="line-numbers">client_header_buffer_size
large_client_header_buffers
</code></pre>

首先看第一个参数：<code>client_header_buffer_size</code>

当请求进来的时候，web服务器会根据这个参数分配一块内存，用来容纳请求的请求头。

接着是第二个参数：<code>large_client_header_buffers</code>

如果分配的内存无法容纳请求头，则会根据该参数的，再次分配大一点的内存。

如果还是不够容纳，则已经超出了web服务器设置的服务长度，就会返回给客户端414状态码。

<blockquote>
  如果只把<code>client_header_buffer_size</code>设置小了，<code>large_client_header_buffers</code>还是很大的话是没有用的，还会浪费多一次分配内存的操作。
</blockquote>

我这里将两个参数都设置成了1k

<pre><code class="line-numbers">client_header_buffer_size 1k;
large_client_header_buffers 4 1k;
</code></pre>

（改完配置记得重启服务器）

然后进行一个简单的get请求，带上1024个字节的参数(或者更长)，服务器返回<code>414 Request-URI Too Large</code>

到这里，在服务器上限制get传递的数据长度的操作就完成了。

<blockquote>
  如果是apache或者其他的web服务器，也是一样的原理来进行设置。
</blockquote>

<h2>总结</h2>

<ul>
<li>GET 请求会被浏览器缓存，POST 请求不会</li>
<li>GET 请求会被浏览器保留在历史记录中，POST 请求不会</li>
<li>GET 请求可以被浏览器收藏为书签，POST 请求不能</li>
<li>GET 请求参数在URL中可见，POST 请求参数不能</li>
<li>GET 请求对数据长度有要求，POST 请求没有（这里指的是浏览器对url长度的要求）</li>
<li>在HTTP协议中，对于GET、POST的数据长度是没有限制的</li>
<li>在WEB服务器中，可以通过配置参数来决定要服务的URL长度限制（通过是控制最大请求头的长度）POST请求是将参数放在请求体中，所以不受该长度限制</li>
<li>如果WEB服务器不能处理过长的URL，根据HTTP协议需要返回414状态码。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2019-06-23 14:20:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-23 06:20:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-06-23 14:29:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-06-23 06:29:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[http%e5%8d%8f%e8%ae%ae%e4%b8%ad%e7%9a%84get%e3%80%81post%e8%af%b7%e6%b1%82%e6%96%b9%e6%b3%95%e7%9a%84%e5%8c%ba%e5%88%ab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="http"><![CDATA[HTTP]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1373]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[浅谈非堵塞程序的理解]]></title>
		<link>https://blog.siammm.cn/archives/63</link>
		<pubDate>Sat, 29 Jun 2019 14:31:07 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=63</guid>
		<description></description>
		<content:encoded><![CDATA[这篇文章，主要讲讲非堵塞编程带给程序的意义。

在我们谈到今天的主题之前，先来做一点基础知识的补充。

<h2>什么是I/O</h2>

我们的计算机系统架构简易可看成如下，I/O接口连接其他硬件如：网卡、键盘鼠标、磁盘等。

I代表Input，输入数据。
O代表Output，输出数据。

<img src="https://www.siammm.cn/wp-content/uploads/2019/06/3674cd0f72fc6b4f43522b703b9d3767.png" alt="计算机基础架构图" />

当程序需要发送网络请求或者从磁盘中读取文件等IO操作时
CPU发出指令，然后信号经过总线到达网卡或者磁盘
然后拿到数据，再经过总线到达主存中，CPU继续对主存中的数据进行操作。

<blockquote>
  CPU的执行速率：主频 比如3GHz = 一秒钟有30亿个时钟脉冲，执行一条指令一般只需要几个时钟脉冲。也就是一秒可以执行的指令经常是以亿计算的。
</blockquote>

以网络请求为例（磁盘IO也是一样的原理），当CPU发出指令之后，想要得到结果需要经过很长的等待（比如网络延迟经常是几十ms时间，CPU都过了多少千万个时钟脉冲了）

<h2>同步、异步、堵塞、非堵塞的概念</h2>

相信看这篇文章的你也不是第一次看到这种概念，在很多文章中经常会以购物等场景做例子。

这里只做一个简单的介绍：

<code>同步、异步</code>分为一组概念；
<code>堵塞、非堵塞</code>分为一组概念；

（同步、异步）：关注的是：数据的接收方式
（堵塞、非堵塞）：关注的是：是否等待结果返回

这是两个分组（因为它们的关注点不同）
但是往往<code>同步跟堵塞</code>是一起的，<code>异步跟非堵塞</code>是一起的。

如果我们需要同步接收数据，肯定要让当前程序暂停，等待数据返回再做处理。
如果我们选择了异步接收数据，程序还堵塞的话那就没什么意义了，所以非堵塞模式，一般会返回发送调用请求的结果，然后程序继续执行，直到结果准备好了，再通过回调函数等方式触发程序做处理。

<h2>堵塞IO存在的不足</h2>

如果是堵塞IO的话，那么当前的进程会<code>暂停</code>执行，直到拿到数据才会继续执行。

<strong>文件锁堵塞</strong>

以PHP中自带的Session为例的<code>文件锁</code>
Session以生成文件储存的，如果同一个用户同时发起多个请求，先获取文件锁的请求可以执行，后面的拿不到文件锁，所以一直堵塞等待，假设前面的请求过了10s才执行完，后续的请求是要10s后<code>才开始</code>执行。

<strong>socket堵塞</strong>

写过tcp服务器的应该都会遇到这个问题

我们可以监听机器的某个端口，当有请求连接进来的时候，我们可以accept这个连接，然后读取客户端发过来的数据、发送数据回客户端等处理。

<pre><code class="language-php line-numbers">&lt;?php
$socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
if (!$socket) {
  echo "$errstr ($errno)&lt;br /&gt;\n";
} else {
  // 循环接收客户端的连接
  while ($conn = stream_socket_accept($socket)) {
      $data = fread($conn, 8192); // 读取客户端发送过来的数据 读不到就一直堵塞着
      fwrite($conn, "hello world\n"); // 发送hello world
      fclose($conn);
  }
  fclose($socket);
}
</code></pre>

以上代码实现了一个建议的TCP服务器，但是因为没有解决堵塞IO的问题，所以只能处理一个客户端的请求。

<ul>
<li>当A连接进来，accept到，然后开始fread从缓冲区读取数据。 堵塞住了，进程执行暂停，等待数据结果。</li>
<li>此时B连接进来，因为进程已经被堵塞住，所以无法被accept，更无法读取、发送数据。</li>
<li>A客户端发送了数据，进程恢复执行，开始读取，然后输出。</li>
<li>然后才能accept B客户端（哪怕在此之前B已经发了很多数据，也只能从这个时候开始处理）。</li>
</ul>

<h2>非堵塞IO</h2>

为了让我们的网络服务器可以服务多个客户端，我们需要将程序改造为非堵塞的。

我们可以简单实现为：

<ul>
<li>当A连接进来了，accept起来，存到一个列表中。</li>
<li>继续等待监听，B连接进来了，accpet起来，存到一个列表中。</li>
<li>多开一个线程，不断轮询连接列表，判断连接是否有发送数据过来，有的话就执行操作（比如发送数据、关闭连接）</li>
<li>在PHP中默认没有线程操作，并且accept操作是堵塞的，但是可以设置<code>超时时间</code></li>
</ul>

所以我们可以让程序每等待0.1s连接进来，然后就去轮询一次连接列表，读取数据然后操作。

<pre><code class="language-php line-numbers">&lt;?php
$socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
if (!$socket) {
    echo "$errstr ($errno)&lt;br /&gt;\n";
} else {
    $conns = [];// 全局连接
    while (true){
        $conn = @stream_socket_accept($socket, 0.1); // 0.1没有连接进来就不堵塞等待了 先检测有没有客户端发数据
        if($conn!== false){
            $conns[] = $conn;
            stream_set_blocking($conn, false);
        }
        foreach ($conns as $key=&gt;$item) {
            $data = fread($item, 8192);
            if ($data !== ''){
                fwrite($item, "hello");
                fclose($item);
                unset($conns[$key]);
            }
        }
    }
    fclose($socket);
}
</code></pre>

以上的I/O模型是<code>同步非堵塞</code> ，当客户端连接数比较多的时候，以上代码还是有很大的问题。

我们还可以将对客户端的操作逻辑进行异步执行（因为我们的实际业务逻辑肯定不只是输出hello这么简单，还要数据库操作等等）

<blockquote>
  将对客户连接的操作逻辑异步分离的话，但是accept连接还是堵塞同步的，因此可见，程序同步、异步、堵塞、非堵塞是相对的，需要按功能点和模块来分析。
</blockquote>

我们也可以依赖扩展，比如<code>Event</code>等，实现<code>异步非堵塞</code>模型。
当有客户连接、断开、读写数据时，底层扩展会通过我们设置的回调函数触发，而不需要我们在程序代码中accpet、read（堵塞或者轮询）

可以参考简单的demo。

<code>这不是完整的demo，并且需要安装扩展，大家了解一下使用的方式即可 有兴趣可以继续深入学习Event扩展的使用</code>

<pre><code class="language-php line-numbers">class MyListenerConnection {
    private $bev, $base;

    public function __destruct() {
        $this-&gt;bev-&gt;free();
    }
    // 新链接进来 并且监听 这个时候就设置链接的事件回调
    public function __construct($base, $fd) {
        $this-&gt;base = $base;
        $this-&gt;bev = new EventBufferEvent($base, $fd, EventBufferEvent::OPT_CLOSE_ON_FREE);
        // 设置回调事件
        $this-&gt;bev-&gt;setCallbacks(
            array($this, "echoReadCallback"),
            array($this, "writeCallback"),
            array($this, "echoEventCallback"),
            NULL
        );

        if (!$this-&gt;bev-&gt;enable(Event::READ)) {
            echo "Failed to enable READ\n";
            return;
        }
    }
    // 读回调
    public function echoReadCallback($bev, $ctx) {
        // 在这里处理 handleRequest $bev-&gt;input就是客户端发送的数据
        $bev-&gt;output-&gt;addBuffer($bev-&gt;input);
        // $bev-&gt;output设置内容就是会发送给客户端的数据  这里原样返回
    }
    // 写回调  是输出之后才回调的 而不是在输出之前 
    public function writeCallback($bev, $ctx){
        // 释放监听 断开连接
        $bev-&gt;free();
    }

    // 除了读写之外其他事件的回调
    public function echoEventCallback($bev, $events, $ctx) {
        if ($events &amp; EventBufferEvent::ERROR) {
            echo "Error from bufferevent\n";
        }

        if ($events &amp; (EventBufferEvent::EOF | EventBufferEvent::ERROR)) {
            $this-&gt;__destruct();
        }
    }
}
</code></pre>

通过这种方式，我们写一个网络服务器就很简单了，只需要给事件设置回调事件，由底层维护客户端连接的可读写状态，  这种模型是I/O复用里的<code>epoll</code>模型。

<h2>总结</h2>

通过上面文件锁、几种TCP服务器的写法，我们可以理解到堵塞和非堵塞程序之间的区别了。

再做一下小小的总结。

<ul>
<li>同步和异步是指<code>决定结果返回的接收方式</code></li>
<li>堵塞和非堵塞是指<code>是否需要等待结果返回</code></li>
<li>如果发生磁盘IO等操作，因为CPU执行速率和总线信号传递、磁盘速率的不对等，CPU如果堵塞等待读取结果，就不能最大化地利用机器资源。</li>
<li>非堵塞程序，可以提高机器的利用率，可以提高并发支持。</li>
<li>常见的I/O模型有：阻塞式I/O；非阻塞式I/O；I/O复用（select和poll）；异步I/O；</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[堵塞IO操作对于程序的效率影响很大，如果要提高程序的效率，有必要了解非堵塞的编程思想，并运用到程序中，写出高效稳定的程序。]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2019-06-29 22:31:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-29 14:31:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-01 09:27:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-01 01:27:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b5%85%e8%b0%88%e9%9d%9e%e5%a0%b5%e5%a1%9e%e7%a8%8b%e5%ba%8f%e7%9a%84%e7%90%86%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1061]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Layui模块化,改造传统jquery扩展为layui模块]]></title>
		<link>https://blog.siammm.cn/archives/73</link>
		<pubDate>Thu, 04 Jul 2019 14:26:21 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>此篇文章比较偏向笔记类型</h2>

在我使用jquery扩展，拖拽组件的时候，因为使用的布局模板有些冲突，导致无法使用扩展，所以才会解决之后写下这篇文章。

<strong>Layui中内置了jquery</strong>

只有你所使用的模块有依赖到它，它才会加载，并且如果你的页面已经script引入了jquery，它并不会重复加载。内置的jquery模块去除了全局的$和jQuery。

这是layui文档中的描述，它内置了jq，但是去除了全局的$和jQuery对象，也就是在window的全局对外接口被删除了。

<strong>拖拽组件的实现</strong>
假设siam.js是一个扩展，里面提供了一个类似这样的方法

<pre data-language=HTML><code class="language-markup line-numbers">&lt;div id='test'&gt;原始内容&lt;/div&gt;

&lt;script src="https://cdn.bootcss.com/jquery/3.4.0/jquery.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
$.fn.siam = function(params){
    var dom = this;
    dom.html(params);
};


setTimeout(function(){
    $("#test").siam('这是新内容');
},800);
&lt;/script&gt;
// 延迟执行完之后会把div内容变为 &gt; 这是新内容
</code></pre>

这就是一些传统jq扩展的实现原理，对于你调用的dom，它会继续处理操作，如本文开始说的，我使用的是拖拽组件，扩展会通过这样子的<code>对外接口</code> 将dom处理为可以拖拽的，并且带有其他事件的元素。

<h2>问题冲突</h2>

以上两点是问题的基础补充，在layui中，去除了全局的$和Jquery对象，默认扩展中有以下代码

<pre><code class="language-javascript line-numbers">;(function($, window, document, undefined){
    .....扩展内容
})(window.jQuery || window.Zepto, window, document);
</code></pre>

在最后面，它依赖加载<code>window.Jquery对象,window对象,document对象</code>

传递到上面的闭包中 
对应<code>$, window, document, undefined</code>（因为没有传递 所以也一样）

所以导致闭包中使用的$是没有值的，一加载这个扩展就报错

<pre><code class="line-numbers">$ is not defined
或者
Typeerror Cannot Read Property fn of undefined
</code></pre>

测试过单独引入jq文件也解决不了问题，（我使用的模板加载顺序的原因，先加载了layui内置的jq）

<h2>layui自定义模块</h2>

这是官网的介绍

<pre><code class="language-javascript line-numbers">layui.code
/**
  扩展一个test模块
**/

layui.define(function(exports){ //提示：模块也可以依赖其它模块，如：layui.define('layer', callback);
  var obj = {
    hello: function(str){
      alert('Hello '+ (str||'mymod'));
    }
  };

  //输出test接口
  exports('mymod', obj);
});
</code></pre>

我们可以使用layui自定义模块的方法，将layui的其他模块传递进来，使扩展能操作layui中的jq对象

<pre><code class="language-javascript line-numbers">layui.define(["jquery"], function (exports) {
    var $ = layui.jquery;
    // 把第一行的 ;(function($, window, document, undefined){ 换成以上
    ...扩展内容

    // 把最后一行的换成以下
    var obj = {
    };
    exports("自定义模块名", obj);
});
</code></pre>

<h2>使用</h2>

<pre><code class="language-javascript line-numbers"> layui.use(['form','jquery','自定义模块名'], function (admin, form) {
     var $ = layui.jquery;
     var obj = layui.自定义模块名;

     // 正常使用 即可  比如我的
     $("#test").desta('open');
});
</code></pre>

<blockquote>
  注意，此篇文章并不是通用方法，只是简单阐述了我解决这个问题的思路和方案，可以参考学习，如果有其他类型的相似问题欢迎留言一起交流
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date><![CDATA[2019-07-04 22:26:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-04 14:26:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-04 22:28:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-04 14:28:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[layui%e6%a8%a1%e5%9d%97%e5%8c%96%e8%87%aa%e5%ae%9a%e4%b9%89%e6%a8%a1%e5%9d%97%e6%94%b9%e9%80%a0%e4%bc%a0%e7%bb%9fjquery%e6%89%a9%e5%b1%95%e4%b8%balayui%e6%a8%a1%e5%9d%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="jquery"><![CDATA[Jquery]]></category>
		<category domain="post_tag" nicename="layui"><![CDATA[Layui]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1503]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>723</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-26 00:47:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-25 16:47:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://fcialisj.com" rel="nofollow ugc">non prescription cialis online pharmacy[/url]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>738</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-07 19:53:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-07 11:53:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://clomidset.com/" / rel="nofollow ugc">where can i buy clomid from india</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[swoole如何对ip限制访问频率]]></title>
		<link>https://blog.siammm.cn/archives/76</link>
		<pubDate>Wed, 10 Jul 2019 01:13:20 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>swoole如何对ip限制访问频率</h1>

在我们开发api的过程中，有的时候我们还需要考虑单个用户(ip)访问频率控制，避免被恶意调用。

归根到底也就只有两个步骤：

<ul>
<li>用户访问要统计次数</li>
<li>执行操作逻辑之前要判断次数频率是否过高，过高则不执行</li>
</ul>

<h2>easyswoole中实现Ip访问频率限制</h2>

本文章举例的是在easyswoole框架中实现的代码，在swoole原生中实现方式是一样的。

只要在对应的回调事件做判断拦截处理即可。

<ul>
<li>使用swoole\Table，储存用户访问情况（也可以使用其他组件、方式储存）</li>
<li>使用定时器，将前一周期的访问情况清空，统计下一周期</li>
</ul>

如以下IpList类，实现了初始化Table、统计IP访问次数、获取一个周期内次数超过一定值的记录

<pre><code class="language-php line-numbers">&lt;?php
/**
 * Ip访问次数统计
 * User: Siam
 * Date: 2019/7/8 0008
 * Time: 下午 9:53
 */

namespace App;


use EasySwoole\Component\Singleton;
use EasySwoole\Component\TableManager;
use Swoole\Table;

class IpList
{
    use Singleton;

    /** @var Table */
    protected $table;

    public  function __construct()
    {
        TableManager::getInstance()-&gt;add('ipList', [
            'ip' =&gt; [
                'type' =&gt; Table::TYPE_STRING,
                'size' =&gt; 16
            ],
            'count' =&gt; [
                'type' =&gt; Table::TYPE_INT,
                'size' =&gt; 8
            ],
            'lastAccessTime' =&gt; [
                'type' =&gt; Table::TYPE_INT,
                'size' =&gt; 8
            ]
        ], 1024*128);
        $this-&gt;table = TableManager::getInstance()-&gt;get('ipList');
    }

    function access(string $ip):int
    {
        $key  = substr(md5($ip), 8,16);
        $info = $this-&gt;table-&gt;get($key);

        if ($info) {
            $this-&gt;table-&gt;set($key, [
                'lastAccessTime' =&gt; time(),
                'count'          =&gt; $info['count'] + 1,
            ]);
            return $info['count'] + 1;
        }else{
            $this-&gt;table-&gt;set($key, [
                'ip'             =&gt; $ip,
                'lastAccessTime' =&gt; time(),
                'count'          =&gt; $info['count'] + 1,
            ]);
            return 1;
        }
    }

    function clear()
    {
        foreach ($this-&gt;table as $key =&gt; $item){
            $this-&gt;table-&gt;del($key);
        }
    }

    function accessList($count = 10):array
    {
        $ret = [];
        foreach ($this-&gt;table as $key =&gt; $item){
            if ($item['count'] &gt;= $count){
                $ret[] = $item;
            }
        }
        return $ret;
    }

}
</code></pre>

封装完IP统计的操作之后

我们可以在<code>EasySwooleEvent.php</code>的mainServerCreate回调事件中初始化IpList和定时器

<pre><code class="language-php line-numbers">&lt;?php

public static function mainServerCreate(EventRegister $register)
{
    // 开启IP限流
    IpList::getInstance();
    $class = new class('IpAccessCount') extends AbstractProcess{
        protected function run($arg)
        {
            $this-&gt;addTick(5*1000, function (){
                /**
                 * 正常用户不会有一秒超过6次的api请求
                 * 做列表记录并清空
                 */
                $list = IpList::getInstance()-&gt;accessList(30);
                // var_dump($list);
                IpList::getInstance()-&gt;clear();
            });
        }
    };
}
</code></pre>

接着我们在OnRequest回调中，判断和统计Ip的访问

<pre><code class="language-php line-numbers">&lt;?php

public static function onRequest(Request $request, Response $response): bool
{
    $fd = $request-&gt;getSwooleRequest()-&gt;fd;
    $ip = ServerManager::getInstance()-&gt;getSwooleServer()-&gt;getClientInfo($fd)['remote_ip'];

    // 如果当前周期的访问频率已经超过设置的值，则拦截
    // 测试的时候可以将30改小，比如3
    if (IpList::getInstance()-&gt;access($ip) &gt; 30) {
        /**
         * 直接强制关闭连接
         */
        ServerManager::getInstance()-&gt;getSwooleServer()-&gt;close($fd);
        // 调试输出 可以做逻辑处理
        echo '被拦截'.PHP_EOL;
        return false;
    }
    // 调试输出 可以做逻辑处理
    echo '正常访问'.PHP_EOL;
}
</code></pre>

以上就实现了对同一IP访问频率的限制操作。

具体还可以根据自身需求进行扩展，如对具体的某个接口再进行限流。

<blockquote>
  Easyswoole提供了一个基于Atomic计数器的限流器组件。可以直接使用，使用教程请移步查看限流器文档。
</blockquote>

<a href="http://https://www.easyswoole.com/Cn/Components/atomicLimit.html" title="easyswoole框架文档">easyswoole框架文档</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[easyswoole|easyswoole教程|easyswoole学习笔记|swoole笔记|IP限流]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2019-07-10 09:13:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-10 01:13:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-10 21:52:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-10 13:52:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[swoole%e5%a6%82%e4%bd%95%e5%af%b9ip%e9%99%90%e5%88%b6%e8%ae%bf%e9%97%ae%e9%a2%91%e7%8e%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://www.siammm.cn/wp-content/uploads/2019/07/UQSI1ENWRH6125WQ939B.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1502]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Thinkphp中模型的正确使用方式,ORM的思想概念]]></title>
		<link>https://blog.siammm.cn/archives/80</link>
		<pubDate>Sat, 13 Jul 2019 12:02:58 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[在Thinkphp的文档中关于框架特性的描述，有这么一句话

<blockquote>
  ORM：重构的数据库、模型及关联，MongoDb支持；
</blockquote>

从这句话可以得知，Thinkphp中的数据库、模型，基于的ORM概念来完成。

<h2>ORM是什么？</h2>

对象-关系映射（OBJECT-RELATIONAL MAPPING，简称ORM）

这是在<code>面向对象</code>编程发展过程中演变出来的一种思想、行为概念。

主要用途是：<code>把对象模型表示的对象映射到基于sql的关系模型数据库结构中去。</code>

当改变这个对象自身的属性或者调用该对象的方法时，相对应的是执行某些sql语句。

这样子编写代码的人员就可以更好地编写业务逻辑，而非重复地编写增删改查sql语句。

<h2>thinkphp中的运用示例</h2>

TP框架中关于数据库操作有两个模块：

<ul>
<li>数据库</li>
<li>模型</li>
</ul>

<h3>tp中的数据库模块</h3>

引用一句文档的特性描述

<blockquote>
  拆分为Connection（连接器）/Query（查询器）/Builder（SQL生成器）
</blockquote>

<ul>
<li>Connection连接器主要是用来连接数据库的，可以使用不同的驱动连接不同类型的数据库。</li>
<li>Query查询器则是用来运行sql语句，处理结果，映射到<code>数据集</code>中。</li>
<li>Builder生成器则是用来把我们传递进去的条件、排序等转换成sql语句。</li>
</ul>

在这3个步骤中，我们可以知道，如果有运用到ORM思想抽象映射的，那就只可能是Query查询器模块，但是我们可以细查<code>TP文档中关于数据集的描述</code>。

它更多的是封装提供对于数据的处理方法，比如：

(以下是从文档复制过来的  一小部分)

<pre><code class="line-numbers">toArray     将数据集的数据转为数组
merge   合并其它数据
diff    比较数组，返回差集
flip    交换数据中的键和值
intersect   比较数组，返回交集
keys    返回数据中的所有键名
pop 删除数据中的最后一个元素
shift   删除数据中的第一个元素
unshift 在数据开头插入一个元素
reduce  通过使用用户自定义函数，以字符串返回数组
</code></pre>

但是却没有提供反向映射的关系操作，比如我们操作数据集，自动更新数据库中的数据。

所以在我的理解中，<code>数据库模块</code>中的ORM思想并不多，重点还是要了解和运用<code>模型</code>

<h3>tp中的模型</h3>

<h5><strong>定义模型文件</strong></h5>

<pre><code class="language-php line-numbers">namespace app\index\model;

use think\Model;

// 设置类名 需要遵循转换规则，蛇形转为大驼峰
class User extends Model
{
    // 设置主键字段名
    protected $pk = 'u_id';

    // 开启自动维护时间戳字段 (什么时间插入 什么时间更新)
    protected $autoWriteTimestamp = true;

    // 软删除 开启之后 删除数据只是用一个字段来标识为删除状态 方便查询、备份等
    use SoftDelete;
    protected $deleteTime = 'delete_time';

}
</code></pre>

以上代码比文档中第一章节<code>模型初始化</code>要多了一些内容，这是为了突出 <code>模型可以完成很多功能</code>

这也是ORM出现的原因：将sql的执行，抽象映射为面向对象编程中的对象。

我们可以理解为：表中的一行数据，代表我们代码中new一个对象，改变对象，则自动更新表中对应的行。

<h5><strong>使用模型</strong></h5>

演示的代码是比较简单的，实际是可以很灵活的

比如查询用非主键的条件来查询、查询多行记录等等

<pre><code class="language-php line-numbers">&lt;?php
// *******快速查询、更新*******
// 查询主键=1的数据
$user = User::get(1);
// 然后更改它的name字段为新的值
$user-&gt;name = 'thinkphp';
// 保存，自己去数据库给我更新吧~
$user-&gt;save();

// *******插入新的一行数据*******
// 新建一个对象(相对应的操作就是新创建一行)
$user = new User;
// 设置字段的值  有多个字段就多个设置
$user-&gt;name= 'thinkphp';
// 保存，自己去插入吧~
$user-&gt;save();
</code></pre>

<h5><strong>误区</strong></h5>

看了使用之后，很多初学者就开始写代码了，然而却使用了不太正确的方式。

① model只当为Db类用

虽然model可以看成db类的超集，但是如果只是把它当成简单的DB类使用，而不是<code>使用ORM思想去编写</code>。那么就没什么必要使用它了。。

如果使用不对，不仅不能提高效率，反而会影响自己。（比如代码规范不统一、新增表还要新增对应的模型文件等等）

代码演示：

<pre><code class="language-php line-numbers">&lt;?php
$userModel = new User(); // 这里就相当于初始化Db类
$userOneInfo = $userModel-&gt;where(['u_id' =&gt; 1])-&gt;find();

$userTwoInfo = $userModel-&gt;where(['u_id' =&gt; 2])-&gt;find();
// ... 执行其他逻辑 比如判断上下级 操作权限等等

// 业务需求不只是读取用户的数据这么简单
// 还要扣除余额(就是更新数据库)
$userOneRes = $userModel-&gt;where(['u_id' =&gt; 1])-&gt;update(['u_balance' =&gt; 'xxxx']);

// ... 执行其他逻辑 
</code></pre>

看到这里，先停下来思考一下。。你的代码有出现过这样子的吗？

我相信还是有些人会这样子用的吧！因为我以前也是这样子用的。

那么我们看看正确的使用方法(我认为的，如果觉得不对或者有更好的，欢迎评论交流)

<pre><code class="language-php line-numbers">&lt;?php

$userOneInfo = User::get(1);

// 这里演示使用非主键条件查询的情况！！
// 查询一个1用户的下级出来
$userTwoInfo = User::get(function($query){
    $query-&gt;where(['p_uid' =&gt; 1]);
});

// ... 执行其他逻辑 比如判断上下级 操作权限等等

// 业务需求不只是读取用户的数据这么简单
// 还要扣除余额(就是更新数据库)
$userOneInfo-&gt;u_balance = 0;
$userOneRes = $userOneInfo-&gt;save();

$userTwoInfo-&gt;u_balance = 0;
$userTwoRes =  $userTwoInfo-&gt;save();

// ... 执行其他逻辑
</code></pre>

因为<code>一个对象映射一条数据</code>，所以我们在操作同样where条件的数据，直接操作对象就可以了，
就不用反复编写where u_id =1更新， u_id = 1 要删除

使用模型，还有很多用处，（得益于开源团队的奉献，为我们封装了大量的功能）

比如：
- 用户表新增一条数据，另一个附属表也要用该用户id初始化一行。
- 自动转换数据格式（储存时间戳，查询出来为2019-7-13 19:53:04格式）。
- 自动校验数据，自动完成数据（操作的时候默认取操作人ip 权限等储存）。
- 关联查询（TP中非常强大的功能，在模型中定义好与另一个模型的关系，比如店铺表中的u_id 可以用来查询出店铺所属用户的信息  相当于店铺模型和用户模型的关联  自动join数据 合并 返回给我们使用）
- 等等

<h2>总结</h2>

<ul>
<li>ORM是一种思想，概念，代表 对象-关系映射（数据库-对象 映射）</li>
<li>ORM使得对数据的操作抽象为对对象的操作。</li>
<li>要学会思想的改变，利用好框架提供的特性，编写更好地代码。</li>
<li>TP中的模型非常强大，封装了大量的逻辑。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[面向对象编程,面向对象思想,Thinkphp框架,Thinkphp面向对象,ORM,ThinkphpOrm,Thinkphp的模型和数据库有什么区别,Thinkphp中模型的使用方法,php笔记,php教程,php踩坑记录]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2019-07-13 20:02:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-13 12:02:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-13 20:09:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-13 12:09:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[thinkphp%e4%b8%ad%e6%a8%a1%e5%9e%8b%e7%9a%84%e6%ad%a3%e7%a1%ae%e4%bd%bf%e7%94%a8%e6%96%b9%e5%bc%8form%e7%9a%84%e6%80%9d%e6%83%b3%e6%a6%82%e5%bf%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1606]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[SMTP邮件服务器原理解析,php发送邮件,swoole发送邮件]]></title>
		<link>https://blog.siammm.cn/archives/88</link>
		<pubDate>Thu, 18 Jul 2019 07:51:47 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

电子邮件是啥就不用介绍了吧，利用程序发送邮件，可以实现：客户财务报表推送、服务异常预警、自动订阅文章等等功能。

php来发送邮件的类库网上也有。比如：PHPMailer 等

但是由于类库年代久远，或者自己使用过程中出现了一些异常错误，导致一系列苦恼。

所以写下这篇文章，来讲明SMTP邮件服务器的原理，让你在调试对接的过程中，有思路可循。

<h1>基础知识储备</h1>

<h3>TCP：<code>TCP</code>是一种面向连接的、可靠的、基于字节流的传输层通信协议。</h3>

先去看看TCP协议的基础概念：比如连接握手三次、断开、收发包等等流程。

比如我们访问一个网站，使用的是HTTP协议，<code>HTTP协议是基于TCP协议</code>的。

我们本次要讲的<code>SMTP也是基于TCP协议</code>的。

<h3>SSL：加密传输</h3>

比如我们的http网站和https网站，在传输过程中加密，会比较安全。

大部分的SMTP服务器也会要求加密传输内容。

<h1>SMTP协议的定义</h1>

简单邮件传输协议 (Simple Mail Transfer Protocol  简称 SMTP)

是一个<code>相对简单</code>的基于<code>文本</code>的协议。

在发送方（客户端）和接收方（服务器）间<code>创建TCP连接</code>之后

那么接下来就是一个合法的SMTP会话了。（SMTP会话的本质只是一个普通TCP，只是会话的消息按照规范组装发送）

在下面的对话中，所有客户端发送的都以<code>C:</code>作为前缀，所有服务器发送的都以<code>S:</code>作为前缀。

<pre><code class="line-numbers">S: 220 smtp.qq.com ESMTP Postfix
C: HELO smtp.other.com
S: 250 Hello smtp.other.com
C: MAIL FROM: &lt;59419979@qq.com&gt;
S: 250 Ok
C: RCPT TO: &lt;123456@qq.com&gt;
S: 250 Ok
C: DATA
S: 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
C: Subject: 邮件名
C: From: Siam&lt;59419979@qq.com&gt;
C: To: 超级牛逼的QQ号&lt;123456@qq.com&gt;
C:
C: Hello,
C: 这是一个测试邮件.
C: Goodbye~
C: .
S: 250 Ok: queued as 12345
C: quit
S: 221 Bye
</code></pre>

这就是发送邮件的一个简单的会话过程，其实基本上是一问一答：
① 服务端：连接上了 由服务器推送给客户端  220状态码 连接成功 这里是QQ的邮件服务器
② 客户端：你好 我是网易的邮件服务器（或者其他...）
③ 服务端：哦好的 网易邮件服务器
④ 客户端：我是59419979账号，我要发送给123456
⑤ 服务端：好的、
⑥ 客户端：我要写内容了。
⑦ 服务端：好的，最后以 . 换行  结束哦！
⑧ 客户端：写写写写
⑨ 客户端：我写完了
⑩ 服务端：好的 接收到记录了
...然后就是退出逻辑了

当然，这其中还可以有其他逻辑和报错提示等

比如要授权登陆（QQ号不能随便让别人操作吧？）
比如要求会话是SSL加密传输的，明文传输我不接受，断开连接了哦。（下文演示会出现这个情况）

<h1>实战本地连接SMTP</h1>

下载一个简单的TCP测试软件，打开，创建连接。

QQ的SMTP服务器地址为：<code>smtp.qq.com</code> 端口为 465  或者 587

然后点击连接
<img src="https://www.siammm.cn/wp-content/uploads/2019/07/smtp01.jpg" alt="" />
<img src="https://www.siammm.cn/wp-content/uploads/2019/07/smtp02.jpg" alt="" />
<img src="https://www.siammm.cn/wp-content/uploads/2019/07/smtp03.jpg" alt="" />

因为到这里，本地测试的工具不支持加密传输，所以运行不了了。

接着是使用swoole提供的tcp客户端来链接操作。

以下演示代码仅提供核心部分。

<pre><code class="language-php line-numbers">$this-&gt;client = new Client( SWOOLE_TCP | SWOOLE_SSL);
$this-&gt;client-&gt;set([
    'open_eof_check' =&gt; true,
    'package_eof' =&gt; "\r\n",
    'package_max_length' =&gt; 1024 * 1024 * 2,
]);
</code></pre>

<pre><code class="language-php line-numbers">if ($this-&gt;client-&gt;connect('smtp.qq.com', 465,$this-&gt;timeout) === false) {
     throw new Exception("connect fail");
 }
$str = $this-&gt;recvCodeCheck('220');
$ehloHost = explode(' ',$str)[1];
$this-&gt;client-&gt;send("ehlo {$ehloHost}\r\n");
//先看是否得到250应答,并清除多余应答
$this-&gt;recvCodeCheck('250');
while (1){
    $peek = $this-&gt;client-&gt;recv($this-&gt;timeout);
    if(empty($peek)){
        throw new Exception('waiting 250 code error');
    }else{
        if(substr($peek,3,1) != '-'){
            break;
        }
    }
}
// 验证身份 登陆 不是所有的邮箱都一样的流程
$this-&gt;client-&gt;send("auth login\r\n");
$this-&gt;recvCodeCheck('334');
$this-&gt;client-&gt;send(base64_encode('59419979')."\r\n");
$this-&gt;recvCodeCheck('334');
$this-&gt;client-&gt;send(base64_encode('这里是授权码 在QQ邮箱后台拿到')."\r\n");
$this-&gt;recvCodeCheck('235');
//start send data
$this-&gt;client-&gt;send("mail from:&lt;59419979@qq.com&gt;\r\n");
$this-&gt;recvCodeCheck('250');
$this-&gt;client-&gt;send("rcpt to:&lt;123456@qq.com&gt;\r\n");
$this-&gt;recvCodeCheck('250');
$this-&gt;client-&gt;send("data\r\n");
$this-&gt;recvCodeCheck('354');
//build body
$mail = "";
$mail.= "From: Siam&lt;59419979@qq.com&gt;\r\n";
$mail.= "To: 不认识&lt;123456@qq.com&gt;\r\n";
$mail.= "Subject: Test\r\n";
//构造body
$mail.= "正文\r\n";
$this-&gt;client-&gt;send($mail);
$this-&gt;client-&gt;send(".\r\n");
$this-&gt;recvCodeCheck('250');
$this-&gt;client-&gt;send("quit\r\n");
$this-&gt;recvCodeCheck('221');
</code></pre>

在easyswoole框架中，会提供smtp类库，以上代码就是部分的实现

使用类库可以直接使用]]></content:encoded>
		<excerpt:encoded><![CDATA[swoole扩展,swoole发送邮件,php发送邮件,smtp邮件,easyswoole扩展,easyswoole发送邮件]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 15:51:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 07:51:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-18 15:54:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-18 07:54:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[smtp%e9%82%ae%e4%bb%b6%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%8e%9f%e7%90%86%e8%a7%a3%e6%9e%90php%e5%8f%91%e9%80%81%e9%82%ae%e4%bb%b6swoole%e5%8f%91%e9%80%81%e9%82%ae%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1501]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Mysql中varchar字符串的比较,swoole预处理参数绑定]]></title>
		<link>https://blog.siammm.cn/archives/95</link>
		<pubDate>Thu, 18 Jul 2019 15:17:26 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

事情起因：

使用了一个varchar类型的字段储存数字值。

在根据该字段进行大小筛选的时候，出现该问题。

类似<code>select * from sheets where s_status &gt; 3</code>

<h1>分析</h1>

php调用时条件传的是数字类型

组件生成的SQL语句直接执行正常

<h1>排查</h1>

打开了mysql的运行日志，分析到最终运行的sql语句大概如下

<pre><code class="line-numbers">where s_status &gt; '3'
</code></pre>

使用的是php swoole，预处理。

解决有两条路

<ul>
<li>mysql的字段类型改为数字</li>
<li>研究swoole的参数预处理问题，可以测试普通PHP的预处理是否也有问题</li>
</ul>

能学习的点

<ul>
<li>字符串类型字段的比较规则</li>
</ul>

<h3>mysql中字符串类型字段的比较规则</h3>

找了一圈资料，相关文章比较少，终于在比较不起眼的角落里找到资料。

<blockquote>
  字符串比较 是根据ascii码比较  只有当第一个字符相同才对比第二个字符。以此类推。
  
  在线转换ascii码工具 https://www.iamwawa.cn/ascii.html
</blockquote>

假设我们现在表中有2条字段

<table>
<thead>
<tr>
  <th>id</th>
  <th>s_status</th>
  <th>s_name</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>4</td>
  <td>测试1</td>
</tr>
<tr>
  <td>2</td>
  <td>258710588</td>
  <td>测试2</td>
</tr>
</tbody>
</table>

如果按正常的sql执行  我筛选>3应该是2条结果都有，但是程序运行只能得到1条结果： id = 1的数据

那么我们上面说到 字符串的比较规则，从第一个字符开始比较，只有第一个字符相等 才会比较第二个字符...

'4' > '3' 通过

<pre><code class="line-numbers">字符 4 对应的ASCII码为 52
字符 3 对应的ASCII码为 51
</code></pre>

'258710588' > '3' 不通过

<pre><code class="line-numbers">字符 2 对应的ASCII码为 50
字符 3 对应的ASCII码为 51
此时已经有结果 不需要对比第二个字符
</code></pre>

如果是'31' > '3' 也会通过

<pre><code class="line-numbers">第一个字符相同，则对比第二个字符，而3没有第二个字符了 所以是小于。
</code></pre>

<h3>研究：php预处理时，参数绑定</h3>

<pre><code class="language-php line-numbers">// 省去连接等等
// 预处理及绑定
$stmt = $conn-&gt;prepare("SELECT * FROM `siam_test_bug` WHERE `s_wechat_cross_status` &gt; ? ");

$condition = 3;
$stmt-&gt;bind_param("i", $condition); // 生成语句 &gt; 3
$stmt-&gt;bind_param("s", $condition); // 生成语句 &gt; '3'  就变成了字符串比较 不正常 

$res    = $stmt-&gt;execute();
$result = $stmt-&gt;get_result();

while ($myrow = $result-&gt;fetch_assoc()) {
    var_dump($myrow);
    echo "&lt;br/&gt;";
}
</code></pre>

<h3>确定swoole</h3>

经过开发组内各位大哥的协助确定，是swoole的参数绑定，不支持决定类型，所以会出现这个坑。

已经提交swoole rfc  待解决]]></content:encoded>
		<excerpt:encoded><![CDATA[swoole rfc,swoole的坑,swoole参数绑定,swoole mysql查询,数据库字符串大小比较,varchar类型的字段储存数字值出现问题]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 23:17:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 15:17:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-19 23:35:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-19 15:35:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e4%b8%advarchar%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e6%af%94%e8%be%83%e6%95%b0%e5%ad%97%e5%86%85%e5%ae%b9%e6%af%94%e8%be%83%e5%a4%a7%e5%b0%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1074]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[83]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Mysql合理建立索引,索引优化]]></title>
		<link>https://blog.siammm.cn/archives/100</link>
		<pubDate>Thu, 18 Jul 2019 15:34:24 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在我们日常使用数据库的时候，肯定避免不了对数据库的优化。那么对数据库的优化又少了不<code>索引</code>的知识。

是的，建立<code>索引</code>能极大地提高查询的效率。那么你知道吗，如果合理建立索引，可以更大地榨出数据库的性能——也就等同于进一步提高查询效率。

写下这篇文章就是为了记录一下对索引的优化，合理建立索引。

<h1>什么是索引</h1>

MySQL官方对索引的定义为：索引(Index)是帮助MySQL高效获取数据的数据结构。

我们可以简单理解为：快速查找排好序的一种数据结构。Mysql索引主要有两种结构：B+Tree索引和Hash索引。

索引就相当于字典前的目录，如果这个目录划分规划更好，那么我们找到想要的数据就会更方便，也就提高了查询的效率。

索引的类型有：

<ul>
<li>normal：表示普通索引</li>
<li>unique：表示唯一的，不允许有重复值的索引</li>
<li>full textl: 表示全文搜索的索引，用于搜索很长一篇文章的时候，效果最好。</li>
</ul>

<h1>建立索引的场景</h1>

索引不是越多越好，因为每次更新、插入数据，就需要对索引文件进行变动，会减低该类型操作的执行效率。

如果建立索引的字段太多，影响就会很大。

所以我们<code>只在合理的字段上建立索引</code>。

<ul>
<li>在经常用来当查询条件<code>(where,on,group by,order by)</code>的字段上建立索引。</li>
<li>在数据的维度比较大的字段上建立索引。</li>
<li>对数据较小的列使用索引，可以使索引文件更小，同时内存中也可以装载更多的索引键。</li>
<li>为较长的字符串使用前缀索引。<code>比如数据的长度大部分是150个字节，我们只建立前100个字节的索引。</code></li>
</ul>

常见的可以用于建立索引的字段场景：

① 用户id
在订单表中的用户id字段上建立索引，根据用户id筛选订单，则会很快查询出用户的订单。
用户一般是在自己的后台查看订单，所以表中的其他用户数据与他无关，如果没有建立索引，每次查询都是全表扫描，则会很慢。（我们每个人在淘宝平台上占的订单比例都不到0.0001）

② 商品名
同上，如果不建立索引，我们在淘宝输入框搜索<code>键盘</code>，怎么快速查询出键盘商品？

③ 日期
常用的活跃数据，一般都是是最近产生的，很少人没事去翻半年前的订单数据吧？

合适的还有很多很多场景，需要各位小伙伴自己好好思量。

<h1>索引不生效的场景</h1>

并不是建立了索引就在查询语句中生效。

<ul>
<li>当语句中带有or的时候，索引会失效</li>
<li>当索引的字段使用like查询，并且使用了<code>前通配</code>比如<code>%Siam</code>，索引失效。后通配会生效<code>Siam%</code></li>
<li>当索引的字段是字符类型，但是储存的值是数字，比如 user_name:'123456'，在查询语句中要 user_name = '123456'而<code>不能</code>  user_name = 123456  否则发生类型转换，索引失效，其他类型的字段 比如日期等 也同理</li>
<li>当使用的条件语句，预计结果数量超过全表数据的一定比例时，会转为全表扫描（mysql一般是30%左右）这就是为什么在建立索引的时候要选择维度（区别度）比较高的列，性别这种字段不适合建立索引。</li>
<li>语句中出现列数据运算才判断的，比如where age - 10 > 0   每一行都要运算之后才知道是否大于0  所以就是全表扫描，如果age > 10 则可使用索引。使用函数转换列数据也一样原理。</li>
<li>组合索引时使用的条件语句。</li>
</ul>

<blockquote>
  上面举例的一些场景都是比较容易理解的。组合索引还没涉及，往下继续介绍。
</blockquote>

<h2>mysql中，多个索引同时使用？</h2>

先来看一条语句

<pre><code class="language-sql line-numbers">select * from test where user_name = 'siam_007' and create_time = 1563280050
</code></pre>

假设在这个表中，user_name字段和create_time都是建立了索引的。也没有发生数据类型转换等情况。

<blockquote>
  问题：该语句有几个索引生效？
</blockquote>

是2个吗？并不是这样子的。

虽然两个字段的索引都没有问题，如果单独使用也都能生效。

但是：<code>MySQL会从可用的索引中猜测出效率最高的一个索引并使用它</code>

怎么证明？使用<code>explain</code>语句（详解可以在网上其他资料找到）

只要在sql语句最前面加上该语法，则会显示查询类型相关的信息。

<pre><code class="language-sql line-numbers">Explain select * from mysql_index_test where user_name = 'siam_007' and create_time = 1563280050
</code></pre>

<img src="https://www.siammm.cn/wp-content/uploads/2019/07/41e60766824cbab658d4b5f45334be3b.png" alt="" />

我建立了两个索引，都能用，都是本次查询只能使用一个。

<blockquote>
  基于这个情况，会引申出<code>两个知识点</code>
</blockquote>

<ul>
<li>组合索引</li>
<li>多个单字段索引冲突</li>
</ul>

<h2>组合索引</h2>

先来说说组合索引吧，我们在新建索引的时候（可视化软件），是这样子的页面

<img src="https://www.siammm.cn/wp-content/uploads/2019/07/5ca5a6b5b08ff87b5d44efcfb1712d17.png" alt="" />

当我们勾选上2个或者2个以上 就能把它叫为<code>组合索引</code>了

可以看到还有调整顺序的功能

在组合索引中，<code>字段顺序</code>也是极为重要的。

假设我们有这样一个索引：new : a,b,c 字段

在查询时使用<code>where a = 1 and b = 2 and c= 3</code>。那么这个语句肯定是生效的。

如果我们使用<code>where b = 2 and c =3</code>没有a条件 而a又是在组合索引中最左侧的，那么索引就不会生效。

还是要扫描全部行

<code>where a,c  where a,b where b,a,c</code> 这样子使用都是可以生效的。

组合索引要注意字段顺序，是指在创建索引时候的排序，而不是sql语句中where的顺序，我们使用<code>where b = 2 and a = 1 and c = 3</code>也是 可以生效的

那么组合索引的字段顺序要如何排比较好?

后面会有新的一篇文章会讲这个

<h2>多个单字段索引冲突</h2>

如果我们在表中，拥有两个索引，比如<code>user_name 用户名, user_phone 用户手机号</code>

现在有这样子的数据量：
100W条数据 user_name='我是用户名'
100条数据 user_phone='110'
5条数据  user_name='我是用户名' and user_phone='110'

假设有这样子一条语句：

<pre><code class="language-sql line-numbers">select * from test where user_name = '我是用户名' and user_phone='110'
</code></pre>

有两个字段都有索引可用，mysql会选择一个使用。这是属于mysql的内部处理判断

正常情况下，如果用user_phone索引生效的话，会很快得到结果（先筛选出100条 再筛选）

如果user_name生效，则要先筛选100W条数据，再筛选user_phone

mysql的内部判断可能使得user_name索引生效，此时效率就会很低了，我们可以<code>强制使用某个索引</code>

phone是索引名 是新建的时候填的

<pre><code class="language-sql line-numbers">select * from test index(phone) where user_name = '我是用户名' and user_phone='110'
</code></pre>

<blockquote>
  此种情况出现的概率比较小，毕竟mysql的解释器很复杂，也做了足够多的优化。只有排查慢日志并且分析确定索引冲突的情况才需要强制使用索引。
</blockquote>

<h1>优化 （总结）</h1>

<ul>
<li>只在经常使用的字段上建立索引，否则会拖慢数据更新和插入的速度。</li>
<li>只在维度高的字段上建立索引，否则会使得数据比例过大，转为全表扫描。</li>
<li>优先对数据量比较小的字段建立索引，可以使索引文件更小，同时内存中也可以装载更多的索引键。</li>
<li>规范sql语句的生成，禁止发生<code>列运算</code>、<code>类型转换</code>的发生。</li>
<li>长字符串可以使用前缀索引，只对字符串的前面一定字符长度建立索引。</li>
<li>组合索引的顺序合理优化（会有新文章介绍）</li>
<li>当多个单字段索引发生冲突时，强制使用某个索引。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 23:34:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 15:34:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-23 23:20:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-23 15:20:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e7%b4%a2%e5%bc%95%e4%bc%98%e5%8c%96%ef%bc%8c%e5%90%88%e7%90%86%e5%bb%ba%e7%ab%8b%e7%b4%a2%e5%bc%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a39995c26d224a03c9d127de7c68e29d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6fc158a8aa85125293df17cf8b55252e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_88bbbde58d9e73f3abab7f5c48db4c6a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1978]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90%e6%9c%aa%e5%ae%8c%e6%88%90%e3%80%91mysql%e7%b4%a2%e5%bc%95%e4%bc%98%e5%8c%96%ef%bc%8c%e5%90%88%e7%90%86%e5%bb%ba%e7%ab%8b%e7%b4%a2%e5%bc%95]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[慕白]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[2351023707@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[119.188.116.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-09 15:43:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-09 07:43:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[我真帅]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Mysql索引降维 优化查询 提高效率]]></title>
		<link>https://blog.siammm.cn/archives/103</link>
		<pubDate>Thu, 18 Jul 2019 15:45:25 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在前一篇文章中，我们已经介绍了索引、索引的优化规则等等

原文链接：<a href="https://www.siammm.cn/archives/100" title="Siam博客 mysql索引优化">Siam博客 mysql索引优化</a>

在其中我们有引申出<code>组合索引</code>,<code>多个单字段索引冲突</code>两个知识点。

本文章主要是与后者有关联。

在原文中，我们使用了下面的例子

<pre><code class="line-numbers">现在有这样子的数据量：
100W条数据 user_name=’我是用户名’
100条数据 user_phone=’110′
5条数据 user_name=’我是用户名’ and user_phone=’110′

假设有这样子一条语句：

select * from test where user_name = '我是用户名' and user_phone='110'

有两个字段都有索引可用，mysql会选择一个使用。这是属于mysql的内部处理判断

正常情况下，如果用user_phone索引生效的话，会很快得到结果（先筛选出100条 再筛选）

如果user_name生效，则要先筛选100W条数据，再筛选user_phone

mysql内部的错误判断可能使得user_name索引生效，此时效率就会很低了，我们可以强制使用某个索引
</code></pre>

<h1>指定使用索引的意义</h1>

从以上例子中，我们可以思考并归纳。能提升效率的核心是：<code>在一开始就尽可能地筛选出准确的数据</code>。

所以当我们发现mysql可能处理出错的情况时，可以手动指定使用更优的索引来提高查询效率。

这个可以称为<code>索引降维</code>。

<h1>降维</h1>

数据的选择度越大，则维度越大。

降维，按我个人的理解是：在大量的数据中，一层一层地筛选过滤，维度也会逐渐减低。

点线面中，共有黑红两种颜色。

目标：筛选出所有红色的点

步骤：选出所有带有红色点的面 --> 选出所有带有红色点的线 --> 在线上选出所有红色点

<h1>索引降维</h1>

在老旧的mysql版本中，where的条件顺序还会很大影响执行结果。
比如在上面的举例中，用条件语句来举例，而不是索引

<pre><code class="line-numbers">select * from test where user_name = '我是用户名' and user_phone='110'
</code></pre>

<pre><code class="line-numbers">select * from test where user_phone='110' and user_name = '我是用户名'
</code></pre>

这两个语句会出现上面索引冲突时 mysql没有使用更优索引的情况一样，第一条语句会先筛选出100W条数据，再筛选user_phone=110

<blockquote>
  然而在后续的mysql发展中，sql构造器优化器会自动帮我们排序执行，这种问题已不太需要人工去调整。
</blockquote>

但是当我们建立组合索引的时候，则会根据我们的选择顺序来构建了。

比如有这么一个索引

<pre><code class="line-numbers">index user_info (user_name, user_phone)
</code></pre>

我们可以用大小分类的情况举例看一下

<pre><code class="line-numbers">└名字一
└──user_phone 110
└──user_phone 120
└──user_phone 119
└名字二
└──user_phone 110
└──user_phone 120
└──user_phone 119
└名字三
└──user_phone 110
└──user_phone 120
└──user_phone 119
</code></pre>

而如果我们把顺序调整成<code>(user_phone, user_name)</code>

那么就可以把组合索引看成

<pre><code class="line-numbers">└─110
└──user_name 名字一
└──user_name 名字二
└──user_name 名字三
└─120
└──user_name 名字一
└──user_name 名字二
└──user_name 名字三
└─119
└──user_name 名字一
└──user_name 名字二
└──user_name 名字三
</code></pre>

两种情况，都会在某些场景下有自己的优势，所以我们就需要<code>结合自己的业务数据</code>来进行选择啦。

用我们的老例子来说：
以名字来区分，第一次筛选出现100W条数据，然后再筛选手机号。
以手机号来区分，第一次筛选出现100条数据，然后再筛选用户名。

同样的情况还出现在<code>分表</code>中，用什么条件来分表也是极其重要的。

分表中，如果我们以订单的年份作为分表条件，想要搜索ID=3的会员在2019年某个月份日期的订单，那么我们需要先搜索2019年的表（一年的订单假设有100W条记录），然后再筛选用户ID和其他月份等条件。

如果我们以订单的年份+月份作为分表条件（只是举例，有很多分表条件可以决定），那么初步筛选的数据就会少了很多了，后续的筛选步骤也会更快完成。

<h1>总结</h1>

在分表、组合索引等等场景下，我们可以结合业务数据，进行降维的顺序思考，尽可能地<code>在一开始就筛选出比较准确的数据</code>，在后续的筛选中则只需要遍历检查很少的一部分数据，已达到提高查询效率的效果。]]></content:encoded>
		<excerpt:encoded><![CDATA[mysql优化速度,慢查询,索引优化,索引降维度,降维]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date><![CDATA[2019-07-18 23:45:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-18 15:45:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-01 14:48:08]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-01 06:48:08]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%9c%aa%e5%ae%8c%e6%88%90%e3%80%91mysql%e7%b4%a2%e5%bc%95%e9%99%8d%e7%bb%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1265]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[【源码解读】TP框架参数注入，参数绑定]]></title>
		<link>https://blog.siammm.cn/archives/107</link>
		<pubDate>Tue, 23 Jul 2019 13:00:58 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

用过TP框架的应该都知道有这样一种操作：

我们可以把传参绑定在方法的参数中，还可以绑定一些系统类 比如Request类等等

<pre><code class="language-php line-numbers">&lt;?php
namespace app\index\Controller;

class Blog
{
    public function read($id)
    {
        return 'id='.$id;
    }

    public function archive($year, $month='01')
    {
        return 'year='.$year.'&amp;month='.$month;
    }
}
</code></pre>

当我们的url这样子访问的时候，参数就会自动注入到方法参数中

<pre><code class="line-numbers">http://serverName/index.php/index/blog/read/id/5
http://serverName/index.php/index/blog/archive/year/2016/month/06
</code></pre>

依赖注入Request

<pre><code class="language-php line-numbers">namespace app\index\controller;

use think\Request;

class Index
{
    public function index(Request $request)
    {
        // 获取name请求变量
        return $request-&gt;name;
    }
}
</code></pre>

<h1>为什么要这样子用</h1>

1.api与类之间的兼容。

比如我们有一个这样子的功能：根据用户id返回用户信息

<pre><code class="language-php line-numbers">function getInfo($uId){
    return [];
}
</code></pre>

可以直接由api访问，得到json，或者由其他类调用，返回信息提供给其他地方的代码调用

如果没有使用参数绑定，则方法名是<code>getInfo()</code>，外部无法传参使用。

2.便捷，我们可以直接在代码中使用变量操作传参，而不再需要使用input()等函数来获取再操作。

<h1>源码解析</h1>

在源码中，有这样子一段代码

<pre><code class="language-php line-numbers">    /**
     * 调用反射执行类的方法 支持参数绑定
     * @access public
     * @param  mixed   $method 方法
     * @param  array   $vars   参数
     * @return mixed
     */
    public function invokeMethod($method, $vars = [])
    {
        try {
            if (is_array($method)) {
                $class   = is_object($method[0]) ? $method[0] : $this-&gt;invokeClass($method[0]);
                $reflect = new ReflectionMethod($class, $method[1]);
            } else {
                // 静态方法
                $reflect = new ReflectionMethod($method);
            }
            // siam标注：重点
            $args = $this-&gt;bindParams($reflect, $vars);

            return $reflect-&gt;invokeArgs(isset($class) ? $class : null, $args);
        } catch (ReflectionException $e) {
            if (is_array($method) &amp;&amp; is_object($method[0])) {
                $method[0] = get_class($method[0]);
            }

            throw new Exception('method not exists: ' . (is_array($method) ? $method[0] . '::' . $method[1] : $method) . '()');
        }
    }
</code></pre>

bindParams就是此操作的重点，该方法的内容如下

<pre><code class="language-php line-numbers">    protected function bindParams($reflect, $vars = [])
    {
        if ($reflect-&gt;getNumberOfParameters() == 0) {
            return [];
        }

        // 判断数组类型 数字数组时按顺序绑定参数
        reset($vars);
        $type   = key($vars) === 0 ? 1 : 0;
        $params = $reflect-&gt;getParameters();

        foreach ($params as $param) {
            $name      = $param-&gt;getName();
            $lowerName = Loader::parseName($name);
            $class     = $param-&gt;getClass();

            if ($class) {
                $args[] = $this-&gt;getObjectParam($class-&gt;getName(), $vars);
            } elseif (1 == $type &amp;&amp; !empty($vars)) {
                $args[] = array_shift($vars);
            } elseif (0 == $type &amp;&amp; isset($vars[$name])) {
                $args[] = $vars[$name];
            } elseif (0 == $type &amp;&amp; isset($vars[$lowerName])) {
                $args[] = $vars[$lowerName];
            } elseif ($param-&gt;isDefaultValueAvailable()) {
                $args[] = $param-&gt;getDefaultValue();
            } else {
                throw new InvalidArgumentException('method param miss:' . $name);
            }
        }

        return $args;
    }
</code></pre>

<blockquote>
  其主要作用：根据反射类，拿到该方法需要的传参、顺序、数组类型，然后按照优先级寻找符合的参数，储存再$args中。
</blockquote>

然后在外部使用<code>$reflect-&gt;invokeArgs(isset($class) ? $class : null, $args);</code> 带参数执行，就可以按照正确的顺序传参

<h1>原理（总结）</h1>

核心是：使用反射类，拿到需要执行的类、方法属性，然后分析传参的属性，在post、get、类属性等等参数中，按不同优先级搜寻符合注入条件的参数。

最终使用执行，并且提供组装正确的参数数组。

php的反射类，可以分析目标类的各种属性
方法列表、参数、私有共有属性、方法的类型等等

以下提供一个简单的列表

<pre><code class="line-numbers">ReflectionMethod
    __construct
    export
    getClosure
    getDeclaringClass
    getModifiers
    getPrototype
    invoke
    invokeArgs
    isAbstract
    isConstructor
    isDestructor
    isFinal
    isPrivate
    isProtected
    isPublic
    isStatic
    setAccessible
    __toString
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[php依赖注入,tp框架的request原理,框架解析,踩坑,学习笔记,php进阶,反射的实现]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date><![CDATA[2019-07-23 21:00:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-23 13:00:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 11:59:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 03:59:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%ba%90%e7%a0%81%e8%a7%a3%e8%af%bb%e3%80%91%e4%b8%ba%e4%bb%80%e4%b9%88tp5%e4%b8%ad%e5%8f%af%e4%bb%a5%e6%b3%a8%e5%85%a5%e5%8f%82%e6%95%b0request%e4%b9%9f%e5%8f%af%e4%bb%a5%e4%b8%8d%e4%bc%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1348]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ee8a3f3a0e8b4dd50c4489821626099c]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>729</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-05 06:54:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-04 22:54:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://priligyset.com/" / rel="nofollow ugc">dapoxetine 60mg</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>753</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-17 06:02:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-16 22:02:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vsamoxilv.com/" / rel="nofollow ugc"></a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[负载均衡方式的对比选择]]></title>
		<link>https://blog.siammm.cn/archives/108</link>
		<pubDate>Tue, 30 Jul 2019 14:27:21 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

负载均衡，并不是人人平等。而是每个人都尽其所能，得其所需。

每个服务器的配置会有差异，可能某个服务器还需要兼顾其他应用服务。所以它也许不能像同集群里的其他机器一样完成一样大小的任务。

<blockquote>
  通过某种负载分担技术，将外部发送来的请求均匀分配到对称结构中的某一台服务器上，而接收到请求的服务器独立地回应客户的请求。均衡负载能够分配客户请求到服务器列阵，借此提供快速获取重要数据，解决大量并发访问服务问题。
</blockquote>

<h1>负载均衡主要解决的问题</h1>

<ul>
<li>处理高并发等服务，单机并发量不足以支撑，利用负载均衡分摊到多台服务器。</li>
<li>提高用户响应，如果单机一直保持高负载运行，假设最多处理1K个并发，第1K个也需要排队等候处理。分摊到多台机器，增加处理者，平均响应速度也就提升了。</li>
</ul>

<h1>负载均衡的几种实现方式</h1>

<ul>
<li>硬件实现</li>
<li>DNS负载均衡</li>
<li>Linux Virtual Server(LVS)负载均衡</li>
<li>反向代理负载均衡</li>
</ul>

<h2>硬件实现</h2>

从网上的资料找到的主要是F5这一方面的介绍，具体也可以在这篇百度百科中看看方案：

<a href="https://baike.baidu.com/item/F5%E6%96%B9%E6%A1%88/1121377?fr=aladdin" title="F5方案，百度百科">F5方案，百度百科</a>

我主要讲讲其中我理解的一个比较贴合本篇主题的点：

<strong>链接聚合</strong>

每个人访问网站都会建立一个TCP连接，这个TCP连接是不断建立又关闭的，当快速建立又关闭的时候，对服务器的压力很大。而且服务器能够维持的并发连接是有限的，比如IIS服务器，它的标准并发连接是2048个，阿帕奇服务器是1024个，如果一个网站有几万个并发连接，单个服务器就崩溃了。但是把这些短连接汇聚到一起，集中F5的设备上，通过F5与服务器建立平滑的长连接，就解决了不断增大的并发连接。比如说前台有15万个并发连接，经过F5的优化，在服务器上只有不到5000个并发连接，而且在此过程中，每个人的请求是不会被丢掉的。

F5方案中还有其他几个点可以加速应用，有兴趣的小伙伴可以去看看了解一下。

<h2>DNS负载均衡</h2>

首先简单讲一下我们访问网站的过程（不一定准确 大概流程如此）

1.浏览器输入网址回车,浏览器判断自己是否有缓存该域名指向哪台服务器Ip
2.若没有浏览器缓存，则查询系统hosts配置
3.系统配置则提交网卡,发送到路由器,路由器也可能缓存
4.路由器也没有,发送到网络运营商的dns服务器查询
5.运营商也没有缓存,再向域名解析服务器发送请求查询
6.查询到指向ip,原路返回,发送http请求

如果我们在域名解析服务器上配置dns负载均衡，则可以实现不同用户的请求打到不同的服务器上，从而出现请求分摊处理。

策略：轮询、距离就近、权重设置等等

<h2>LVS负载均衡</h2>

LVS的全称是Linux Virtual Server，主要有三种策略方案

<ul>
<li>LVS-NAT</li>
<li>LVS-DR</li>
<li>LVS-TUN</li>
</ul>

举例一下LVS-DR 在这种方案中，域名解析是指向一台中转服务器。

1.用户请求到中转服务器
2.中转服务器不做任何解析和判断，只修改数据包的目标IP地址为同一局域网的其他网卡IP(关于此处，可以查看网络OSI模型的百度百科，网络请求的传递等等。)，然后发给路由器中转
3.假设上一步骤的目标网卡IP是同一条宽带(内网)A机器，则A机器收到用户请求数据，解析执行，然后返回数据给路由器（目标ip是客户端的ip），路由器再发给外网返回客户。

<h2>反向代理负载均衡</h2>

经常听到的是nginx负载均衡，nginx的反向代理也是一个很重要的模块，也自带了负载均衡的配置支持

用户请求到nginx中转服务器，然后根据配置的不同策略分配到集群内其他机器。

客户端与中转服务器比较常见是建立长链接。
中转服务器与集群内其他处理服务器一般是建立短链接。

1.用户请求到中转服务器
2.中转服务器做一些记录和分配判断等，然后通过TCP链接转发到集群其他机器，
3.集群的机器都是完整的应用，可以提供完整的服务，此时相当于有一个客户端直接请求过来(该客户端是nginx中转服务器这台电脑)，处理 输出结果
4.中转服务器拿到结果，再进行一些记录和处理，返回给用户。

<h1>总结</h1>

负载均衡有几种不同思路的方案。

需要根据自己的用户体系、业务逻辑做选择合适方案。

反向代理负载均衡适用集群内，如果外网机器反向代理，则需要巨大的网络IO开销，多此一举，比单机并发量还低，得不偿失。]]></content:encoded>
		<excerpt:encoded><![CDATA[nginx负载均衡原理,网络负载,php高并发处理,服务器集群优化,]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2019-07-30 22:27:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-30 14:27:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-07-30 23:04:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-07-30 15:04:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e6%96%b9%e5%bc%8f%e7%9a%84%e5%af%b9%e6%af%94%e9%80%89%e6%8b%a9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1181]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>728</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-05 03:26:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-04 19:26:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vslevitrav.com/" / rel="nofollow ugc">levitra wholesale no prescription</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>752</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-17 02:33:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-16 18:33:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://sscialisvv.com/" / rel="nofollow ugc">buying cialis online</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Redis笔记一，数据类型]]></title>
		<link>https://blog.siammm.cn/archives/111</link>
		<pubDate>Thu, 01 Aug 2019 15:13:42 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[<table>
<thead>
<tr>
  <th>类型</th>
  <th>简介</th>
  <th>特性</th>
  <th>场景</th>
</tr>
</thead>
<tbody>
<tr>
  <td>String(字符串)</td>
  <td>二进制安全</td>
  <td>可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td>
  <td>---</td>
</tr>
<tr>
  <td>Hash(字典)</td>
  <td>键值对集合,即编程语言中的Map类型</td>
  <td>适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td>
  <td>存储、读取、修改用户属性</td>
</tr>
<tr>
  <td>List(列表)</td>
  <td>链表(双向链表)</td>
  <td>增删快,提供了操作某一段元素的API</td>
  <td>1,最新消息排行等功能(比如朋友圈的时间线) <br/>2,消息队列</td>
</tr>
<tr>
  <td>Set(集合)</td>
  <td>哈希表实现,元素不重复</td>
  <td>1、添加、删除,查找的复杂度都是O(1) <br/>2、为集合提供了求交集、并集、差集等操作</td>
  <td>1、共同好友 <br/>2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td>
</tr>
<tr>
  <td>Sorted Set(有序集合)</td>
  <td>将Set中的元素增加一个权重参数score,元素按score有序排列</td>
  <td>数据插入集合时,已经进行天然排序</td>
  <td>1、排行榜 <br/>2、带权重的消息队列</td>
</tr>
</tbody>
</table>

Thinkphp框架中自带的消息队列，有几种类型 如：mysql、redis等

其中redis便是基于Sorted Set实现。用时间戳当分数，每次取出当前时间可执行的数据。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date><![CDATA[2019-08-01 23:13:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-01 15:13:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-01 23:20:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-01 15:20:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redis%e7%ac%94%e8%ae%b0%e4%b8%80%ef%bc%8c%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="redis"><![CDATA[Redis]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[895]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP类，魔术方法]]></title>
		<link>https://blog.siammm.cn/archives/112</link>
		<pubDate>Sun, 04 Aug 2019 13:09:24 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[以下方法在 PHP 中被称为魔术方法（Magic methods）

<pre><code class="language-php line-numbers">__construct()
__destruct()
__call()
__callStatic()
__get()
__set()
__isset()
__unset()
__sleep()
__wakeup()
__toString()
__invoke()
__set_state()
__clone()
__debugInfo()
</code></pre>

在命名自己的类方法时不能使用这些方法名，除非是想使用其魔术功能。

下面介绍每个方法的作用

<h1>__construct</h1>

构造函数，在实例化类的时候会隐式调用该方法，<code>可以接收传参</code>。如：

<pre><code class="language-php line-numbers">class A{
    public function __construct($size) {
        $this-&gt;maxSize = $size; // 做一些初始化设置等等
        echo $this-&gt;maxSize;
    }
}

new A(3);
</code></pre>

如果有一个类B继承了上面的类A ，如

<pre><code class="language-php line-numbers">class B extends A{
    public function __construct($size) {
        echo "hello";
    }
}

new B(3);
</code></pre>

在此例子中，不会设置和输出maxSize属性，只会输出hello。

<blockquote>
  因为在子类重写构造方法时，需要<code>显式</code>调用父类构造函数  <code>parent::__construct()</code>
</blockquote>

注意

<blockquote>
  如果在A类的构造函数，不是写为<code>public</code>，而是private，则无法被子类继承使用。
</blockquote>

<h1>__destruct</h1>

析构函数，当类被手动销毁，或者脚本结束时，gc回收触发。可以执行一些后置操作，比如删除临时目录下的文件。

<blockquote>
  注意
</blockquote>

<ul>
<li>哪怕脚本调用exit(),die()  类的析构函数也会被执行</li>
<li>如果在析构函数中调用exit()  则该函数内部的逻辑后续不再执行</li>
</ul>

<pre><code class="language-php line-numbers">public __destruct()
{
    echo 1;
    exit();
    echo 2;// 不会输出
}
</code></pre>

<ul>
<li>与构造函数相同，子类继承后需要显式调用父类的析构函数</li>
<li>试图在析构函数（在脚本终止时被调用）中抛出一个异常会导致致命错误。</li>
</ul>

<h1>__call</h1>

当调用一个对象中的不能用的方法的时候就会执行这个函数。有两个参数：

<pre><code class="language-php line-numbers">function __call($function_name, $args)
</code></pre>

测试

<pre><code class="language-php line-numbers">class A{
    public function __call($funcname, $args){
        var_dump($funcname);
        var_dump($args);
    }
}

$a = new A();
$a-&gt;one();
$a-&gt;tow('一个参数');

// 以下是输出

/*
string(3) "one"
array(0) {
}
string(3) "tow"
array(1) {
  [0]=&gt;
  string(12) "一个参数"
}
string(5) "three"
array(2) {
  [0]=&gt;
  string(12) "一个参数"
  [1]=&gt;
  string(12) "两个参数"
}
*/
</code></pre>

<h1>__callStatic</h1>

跟__call一样，但是该函数触发的是调用的静态方法。

<pre><code class="line-numbers">A::test();
</code></pre>

<h1>__get</h1>

读取不可访问属性的值时，__get() 会被调用。

猜想：在thinkphp框架的ORM中，关联模型

先在Orders模型中设置大概如下的方法

<pre><code class="line-numbers">// 本模型的user ，代表要关联Users模型的一个数据，本模型的u_id = Users模型的id
public function user()
{
    return $this-&gt;belongTo('Users', 'u_id', 'id');
}
</code></pre>

当在程序中调用，因为本身的Orders模型没有该属性，所以会尝试是否有设置该关系的方法，有则调用，然后返回Users的信息。

<pre><code class="line-numbers">$orders = Orders::get(1);
var_dump(orders-&gt;user);
</code></pre>

<h1>__set</h1>

在给不可访问属性赋值时，__set() 会被调用。

<h1>__isset</h1>

当对不可访问属性调用 isset() 或 empty() 时，__isset() 会被调用。

<h1>__unset</h1>

当对不可访问属性调用 unset() 时，__unset() 会被调用。

<h1>__sleep</h1>

<h1>__wakeup</h1>

这两个魔术方法是 <code>类的序列化</code> 使用的，后续会有一篇专门的文章讲解。

<h1>__toString</h1>

<code>__toString()</code> 方法用于一个类被当成字符串时应怎样回应。

比如，在我们接入微信支付的时候，经常需要把参数排序、拼接成url格式

我们完全可以定义一个类，然后在toString魔术方法中，写明排序、转换为url格式的操作。

<pre><code class="language-php line-numbers">// 伪代码

$params = new SiamWechatParams();
$params-&gt;appid = '1';
$params-&gt;total_fee = 200;

// http请求
Curl::send(self::url, $params-&gt;__toString());

// 其他地方直接输出，不手动显式调用
echo $params;
</code></pre>

<h1>__invoke</h1>

当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。

<pre><code class="language-php line-numbers">class A
{
    function __invoke($params) {
        var_dump($params);
    }
}
$obj = new A();
$obj(5);
var_dump(is_callable($obj));
</code></pre>

<h1>__set_state</h1>

自 PHP 5.1.0 起当调用 var_export() 导出类时，此静态 方法会被调用。

<h1>__clone</h1>

当对象复制完成时调用

<h1>__debugInfo</h1>

当调用var_dump函数时候，定义需要显示的属性列表

如果没有在对象上定义该方法，那么将显示所有公共、受保护和私有属性。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2019-08-04 21:09:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-04 13:09:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-14 20:25:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-14 12:25:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e7%b1%bb%ef%bc%8c%e9%ad%94%e6%9c%af%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1160]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[北溟有鱼QAQ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1769360227@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[119.188.116.3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-09 11:19:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-09 03:19:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[全能大佬牛B]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[php中的进制和编码]]></title>
		<link>https://blog.siammm.cn/archives/115</link>
		<pubDate>Tue, 06 Aug 2019 15:12:18 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>进制和编码的关系</h1>

<blockquote>
  进制是数字上的关系
</blockquote>

<ul>
<li>我们日常使用的是10进制，因为我们有10个手指，这是习惯和发展使然。</li>
<li>计算机的基础是2进制，因为电路只有通电、不通电两种状态，用0、1表示。一个数字成为一个<code>位</code></li>
</ul>

随着计算机的发展，需要表示的符号越来越多，从一开始的2位代表一字节，到后面的8位代表一字节至今。

<ul>
<li>其他的还有8进制、16进制等等。
进制之间的转换  <a href="https://tool.lu/hexconvert?_blank" title="工具">工具</a></li>
</ul>

<blockquote>
  编码是符号的映射表示关系
</blockquote>

字符串在线转2进制  <a href="http://www.5ixuexiwang.com/str/binary.php?_blank" title="工具">工具</a>

由于计算机是MG发明的，一开始的映射表是ASSIC码，用一个字节（8位）表示一个符号或者字母

比如小写字母a对应的是97  相应的2进制为<code>01100001</code>

8个位的2进制最大值是<code>11111111</code> 所以当它不够用之后，就出现了<code>双字节字符集</code>，比如GBK,Unicode等

再之后为了优化传输 出现了UTF-8,UTF-16等规范标准。

见这张我自己画的小图吧~

<img src="https://note.youdao.com/yws/api/personal/file/314F4408CF434BA78503F93FFBF0FC4E?method=getImage&amp;version=6793&amp;cstk=fE-i6TSJ" alt="siam制作 进制和编码的关系" title="siam制作 进制和编码的关系" />

<h1>php中的进制转换</h1>

在php中 内置了挺多的进制转换函数

<ul>
<li>bindec() — 二进制转换为十进制</li>
<li>decbin() — 十进制转换为二进制</li>
<li>dechex() — 十进制转换为十六进制</li>
<li>decoct() — 十进制转换为八进制</li>
<li>hexdec() — 十六进制转换为十进制</li>
<li>octdec() — 八进制转换为十进制</li>
<li>base_convert()– 在任意进制之间转换数字</li>
</ul>

<h1>php中的2进制输出</h1>

在我们日常写程序的时候，我们面向的是<code>编码</code>，而不是进制。

代码会经过编译器或者解释器变成机器指令，再转换为2进制。

常见的文件编码格式现在有：<code>GBK</code>、<code>UTF-8</code>

在机器传输过程中只能2进制，不管是GBK编码还是UTF-8编码，都可能是这样子的数据<code>01010001111010101001111</code>，至于怎么解析，就看机器通信之间的规定了

从关系图中可以得知：<code>UTF-8是Unicdoe的实现，Unicode又兼容了assic码的定义。</code>

所以当我们在UTF-8文件的php程序输出小写字母<code>a</code>的时候，经过解析会转换得到97这个10进制的数。

如果要输出16进制或者2进制的数据，其实我们可以先转换为<code>10进制的数字</code>，然后使用chr()函数，转换得到assic码，输出。

<blockquote>
  assic码在传输过程会变成2进制，与我们一开始设定的16进制或者2进制数据其实是一样的，进制是可以互相转换的。
</blockquote>

<h1>简单代码</h1>

连接tcp服务器 并且发送不同进制的数据，从服务器测观察拿到的结果

<pre><code class="line-numbers">&lt;?php
//使用 stream_socket_client 打开 tcp 连接
$fp = stream_socket_client("tcp://127.0.0.1:6000");

//向句柄中写入数据 延迟一下 本地tcp服务器 可能监听慢
sleep(1);

// 发送16进制数据  16进制转10进制str  然后chr 转assic码 传输
// $hexStr = "A3 B5 C1";
// $hexStr = str_replace(' ', '', $hexStr);

// $send = '';
// for ($i=0; $i &lt; strlen($hexStr); $i = $i+2) { 
//     $decStr = base_convert($hexStr[$i].$hexStr[$i+1], 16, 10);
//     $send  .= chr($decStr);
// }

// 第二种方式  chr可以直接传数字（10进制）  0x （16进制） 还有八进制
// fwrite($fp, chr(0xA3).chr(0xb5).chr(0xC1));
// sleep(5);

// 发送2进制数据  2进制转10进制str  然后chr 转assic码 传输
// $binStr = '00011111';
// $decStr = base_convert($binStr, 2,10);
// $send   = chr($decStr);

// fwrite($fp, $send);
// sleep(5);

$ret = "";
// //循环遍历获取句柄中的数据，其中 feof() 判断文件指针是否指到文件末尾
// while (!feof($fp)){
//     stream_set_timeout($fp, 2);
//     $ret .= fgets($fp, 128);
// }
//关闭句柄
fclose($fp);
echo $ret;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[php的进制转换,编码和进制的关系,utf-8乱码,unicode和utf的关系,php发送tcp数据,tcp操作2进制数据]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2019-08-06 23:12:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-06 15:12:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-20 23:53:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-20 15:53:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e4%b8%ad%e7%9a%84%e8%bf%9b%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[880]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d9334109b1832eff120922babac801ed]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[132]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[git,程序配置文件管理,忽略本地更改]]></title>
		<link>https://blog.siammm.cn/archives/116</link>
		<pubDate>Wed, 07 Aug 2019 01:28:01 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在我们开发过程中，经常会出现数据库配置文件、redis环境配置文件等。

在不同的开发环境（同事与同事之间  开发与测试与生产环境）大概率是不同的。

如果每个人都按普通的流程，Pull然后修改成自己本地的，没有忽略监听更改。

那么当他提交代码时，经常会把配置文件也上传到git仓库中。

会影响其他人的开发。

所以我们应该这样子做：<code>git仓库提供一份配置文件的基础模板，每个人都拉取到本地修改但是要忽略本地更改监听。</code>

<h1>操作步骤</h1>

<ul>
<li>1.建立git仓库</li>
<li>2.创建基本配置文件模板</li>
<li>3.提交并推送到仓库</li>
<li>4.本地忽略监听</li>
<li>5.服务器部署，拉取仓库</li>
<li>6.忽略监听</li>
<li>7.更改配置文件</li>
</ul>

<h1>协助资料</h1>

忽略某个文件或者目录

<pre><code class="line-numbers">git update-index --assume-unchanged [file_path]
git update-index --assume-unchanged -f [dir_path]
</code></pre>

查询已经被忽略的文件列表

<pre><code class="line-numbers">git ls-files -v | grep '^h\ '
</code></pre>

提取文件路径

<pre><code class="line-numbers">git ls-files -v | grep '^h\ ' | awk '{print $2}'
</code></pre>

查询已经被忽略的文件列表并取消忽略

<pre><code class="line-numbers">git ls-files -v | grep '^h' | awk '{print $2}' |xargs git update-index --no-assume-unchanged  
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date><![CDATA[2019-08-07 09:28:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-07 01:28:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-14 20:25:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-14 12:25:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[git%e7%a8%8b%e5%ba%8f%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e7%ae%a1%e7%90%86%e5%bf%bd%e7%95%a5%e6%9c%ac%e5%9c%b0%e6%9b%b4%e6%94%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="git"><![CDATA[GIT]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[117]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[837]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Layui数据表格templet的数据无法合计]]></title>
		<link>https://blog.siammm.cn/archives/119</link>
		<pubDate>Fri, 09 Aug 2019 15:00:02 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在使用layui数据表格的时候，有一个列是使用templet，依据其他两个列数据计算得到。

在该列开启合计行，一直显示是0 。其他两列数据合计正常。

在社区和百度上寻找过答案，并没有相关介绍。

在解决了该问题后，写下这篇小记录。

<h1>parseData</h1>

配置中提供了parseData方法，可以在请求了接口之后，进一步处理数据格式。

以下是官网的示例

<pre><code class="language-javascript line-numbers">table.render({
  elem: '#demp'
  ,url: ''
  ,parseData: function(res){ //res 即为原始返回的数据
    return {
      "code": res.status, //解析接口状态
      "msg": res.message, //解析提示文本
      "count": res.total, //解析数据长度
      "data": res.data.item //解析数据列表
    };
  }
  //,…… //其他参数
});
</code></pre>

以上的场景，应该在parseData里计算出新的列，然后再渲染到表格里

<pre><code class="language-javascript line-numbers">let data = [];
$.each(obj.data, function (index, item) {
    let tem = {
        game_diffcoins: item.game_hardcoins - item.game_coin,
        game_diffjifen: item.game_hardjifen - item.game_jifen,
    };
    data.push($.extend(tem, item))
});
obj.data = data;
</code></pre>

<h1>个人理解</h1>

templet 应该用来实现样式的调整，比如根据值的不同显示不同颜色

而数据的计算 得出，应该在parseData 或者直接就在接口里计算好返回。]]></content:encoded>
		<excerpt:encoded><![CDATA[Layui,前端,表格,Table,parseData,templet,合计行为0]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2019-08-09 23:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-09 15:00:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-09 23:25:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-09 15:25:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[layui%e6%95%b0%e6%8d%ae%e8%a1%a8%e6%a0%bctemplet%e7%9a%84%e6%95%b0%e6%8d%ae%e6%97%a0%e6%b3%95%e5%90%88%e8%ae%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="layui"><![CDATA[Layui]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1714]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[122]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Chrome缓存锁，php非堵塞文件锁无效的问题详解追查]]></title>
		<link>https://blog.siammm.cn/archives/123</link>
		<pubDate>Fri, 09 Aug 2019 16:03:43 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

为什么写下这篇文章

在编写PHP文件锁的时候，非堵塞模式 <code>LOCK_NB</code> 加了却没有效果

预期反应：当前面有请求在执行了，后续的请求马上返回客户端：拿不到锁，执行失败。

现实状况：假设业务逻辑需要执行5s，第一个请求发送后，马上有第二个请求发送，第二个请求会等待第一个请求结束，然后再执行自己本次请求，总共耗时10s

<h1>简单说说php写下的锁</h1>

为了后面更好地讲解和理解，简单带上php文件锁的几行代码

<pre><code class="language-php line-numbers">&lt;?php
$p_file = "index.lock";
$o_file = fopen($p_file, 'w+');

// 非堵塞模型 拿不到锁马上返回false
$lock = flock($o_file, LOCK_EX | LOCK_NB);
if (!$lock) {
  var_dump('被锁了');
}else {
  sleep(5);
  echo "完成";
}
</code></pre>

<h1>追寻之路</h1>

<h2>最直观地搜索</h2>

百度<code>PHP LOCK_NB 无效</code> 找文章  找到一篇文章如下：

<hr />

<img src="https://www.siammm.cn/wp-content/uploads/2019/08/d222dccd2db7bba01db692e354dfb6a9.png" alt="" />

<hr />

引用

<blockquote>
  如果你是在本机测试，你要分两个不同的浏览器测试。
  例如一个chrome，一个firefox，
  chrome先执行，firefox再执行，就可以看到效果了，如果你用同一个浏览器会等待的。
</blockquote>

确实，我们可以<code>使用两个浏览器</code>来执行，就可以达到预期想要的非堵塞效果。但是原因呢，几乎没有文章讲解。

<code>宣言不会死心</code>，想要坚持找到合适的答案。

<h2>猜测有什么会影响</h2>

根据不够成熟的经验，简单猜测

<ul>
<li>服务端导致：可能由于系统等等特殊场景，会导致非堵塞失效。</li>
<li>前端导致：可能由于浏览器处理问题，导致请求堵塞。</li>
</ul>

这两个排查顺序，首先我检查了PHP手册和其他站点的文章，<code>确保函数和参数的使用正确</code>，也没有在文档中发现比较特别的注意事项。

在Windows和Linux系统上都出现过此问题。所以也排除windows系统不支持的可能。

接下来就只能进行前端的排查，通过开发者面板——>网络请求——>尝试分析<code>请求头/响应头</code>等信息

一开始的猜想是：要么是客户端请求头，要么是服务端响应头，会有一个标识在等待或者转发等等

分析看到大概如下的情况 （请求里的请求头信息很少，很正常，所以看到外面的状态）

<img src="https://www.siammm.cn/wp-content/uploads/2019/08/267b075db82deb9cc048dcc76b071def.png" alt="" />

此时显示的是Pending  在等待状态。

<h2>浏览器Pending状态</h2>

想要知道该状态会在什么情况下产生，搜索这方面的文章。。

看到的可能如下：

<ul>
<li>建议你把浏览器先卸载,用360安全卫士清理系统后重装一下。</li>
<li>#现象Chrome打开任何网页都显示“喔唷崩溃啦”。#尝试关于页无法进入，没法升级浏览器；设置页无法进入，没法清除浏览数据或重置浏览器；</li>
</ul>

等等垃圾答复（机器人或者刷积分的）

<h4>但是，也有精品的文章</h4>

该文章属于FEX百度团队

《关于请求被挂起页面加载缓慢问题的追查》  在大概2014年的时候，百度团队追查前端<code>偶发</code>的缓慢请求(可能一两分钟)的一篇技术文章

<blockquote>
  涉及面非常专业，排查思路非常值得学习！赞！！
</blockquote>

也是从中得到本篇文章想要的知识点

下面会陆续引用文章中的一小段内容

<h2>神秘的CACHE LOCK</h2>

稳重提到，在Stackoverflow上找到一个<a href="https://stackoverflow.com/questions/27513994/chrome-stalls-when-making-multiple-requests-to-same-resource" title="问题">问题</a>，跟FEX面临的问题有些类似点：

<ul>
<li>偶发，并不是必然出现的。这里我们的问题也是偶发，很难复现，需要反复刷。</li>
<li>也是请求被Pending了很久，从请求的时间线来看，体现在Stalled上。</li>
</ul>

在问题中，有提供以下报错   ERR_CACHE_LOCK_TIMEOUT   20秒

<pre><code class="line-numbers">t=33627 [st= 5] HTTP_CACHE_ADD_TO_ENTRY [dt=20001] –&gt; net_error = -409 (ERR_CACHE_LOCK_TIMEOUT)
</code></pre>

同时还有一段这样子的描述

<blockquote>
  The error message refers to a patch added to Chrome six months ago (https://codereview.chromium.org/345643003), which implements a 20-second timeout when the same resource is requested multiple times. In fact, one of the bugs the patch tries to fix (bug number 46104) refers to a similar situation, and the patch is meant to reduce the time spent waiting.
</blockquote>

核心句子：
这是Chormeium发布的一个补丁：它在多次请求同一资源时实现20秒的超时。

也从中得知了<code>浏览器有缓存锁</code>的知识。

<blockquote>
  浏览器对一个资源发起请求前，会先检查本地缓存，此时这个请求对该资源对应的缓存的读写是独占的。此时后续的请求，在请求这个资源的时候，就需要等待拿锁。（在上面这个补丁发布之前，会无限等待，补丁是让等待最多20秒）
</blockquote>

那么如何让浏览器不使用缓存锁呢

<ul>
<li>对请求加个时间戳或者参数等让请求变得唯一</li>
<li>或者服务器响应头设置为无缓存</li>
</ul>

嗯，先简单尝试一下，在Chrome中，打开文章一开始的php脚本，但是此时有一个请求带上参数

<code>index.php?t=1</code>
<code>index.php</code>

顺利实现预期效果：一个执行5秒，一个马上返回拿锁失败的消息。

<h2>测试CACHE LOCK的超时时间</h2>

再简单修改sleep的时间为30，目的是测试上文补丁中说的，最长等待时间是20s。

第二个请求出现以下状况，完全符合。20秒后，拿不到该资源的本地缓存锁，则发送请求执行。

<img src="https://www.siammm.cn/wp-content/uploads/2019/08/62cd6392c6874d3bd5672f0112f1de8f.png" alt="" />

<h1>总结</h1>

<ul>
<li>Chrome浏览器有缓存锁概念（其他浏览器还未测试）</li>
<li>PHP LOCK_NB没有失效，表面现象是因为前端特性导致的</li>
<li>Chrome的缓存锁超时时间是20s</li>
<li>可以通过不同参数或者由服务端响应头来控制浏览器不缓存文件,也就不会去检查拿本地缓存锁。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[Chrome缓存锁,PHP LOCK_NB,非堵塞模型,文件锁,高并发锁,同时执行]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date><![CDATA[2019-08-10 00:03:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-09 16:03:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 11:59:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 03:59:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[chrome%e7%bc%93%e5%ad%98%e9%94%81%ef%bc%8cphp%e9%9d%9e%e5%a0%b5%e5%a1%9e%e6%96%87%e4%bb%b6%e9%94%81%e6%97%a0%e6%95%88%e7%9a%84%e9%97%ae%e9%a2%98%e8%af%a6%e8%a7%a3%e8%bf%bd%e6%9f%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1556]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP解析json、xml错误]]></title>
		<link>https://blog.siammm.cn/archives/125</link>
		<pubDate>Sun, 11 Aug 2019 15:19:37 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>解析json</h1>

php内置函数json_decode() 可以解析json字符串

但是有的时候看起来正确的json，解析却一直返回null。

你知道吗，json是可能解析失败的，此时PHP不会产生提示。

我们需要手动通过<code>json_last_error()</code>函数获取

<pre><code class="language-php line-numbers">function json_decode_siam($string, $mark = false){
    $data = json_decode($string, $mark);

    switch (json_last_error()) {
        case JSON_ERROR_NONE:
            return $data;
            break;
        case JSON_ERROR_DEPTH:
            echo ' - 已超出最大堆栈深度';
            break;
        case JSON_ERROR_STATE_MISMATCH:
            echo ' - JSON无效或格式错误  状态不匹配';
            break;
        case JSON_ERROR_CTRL_CHAR:
            echo ' - 发现意外的控制字符 可能编码错误';
            break;
        case JSON_ERROR_SYNTAX:
            echo ' - 错误符号，json格式错误';
            break;
        case JSON_ERROR_UTF8:
            echo ' - 格式错误的UTF-8字符，可能是错误编码的';
            break;
        default:
            echo ' - Unknown error';
            break;
    }
}
</code></pre>

<h1>解析xml</h1>

php中，解析xml有好几种方式，主要是依赖不同的扩展环境。

这里就说说我自己常使用的这种方式吧

<pre><code class="line-numbers">simplexml_load_string();
simplexml_load_file();
</code></pre>

可以通过字符串或者文件，加载然后解析，返回Simplexml对象

在该方式中，如果xml格式错误，则会直接产生报错

<pre><code class="line-numbers">$str = "不是xml字符串";
$data = simplexml_load_string($str);
var_dump($data);
</code></pre>

得到

<pre><code class="line-numbers">bool(false)


PHP Warning:  simplexml_load_string(): Entity: line 1: parser error : Start tag expected, '&lt;' not found in /usercode/file.php on line 4
PHP Warning:  simplexml_load_string(): 不是xml字符串 in /usercode/file.php on line 4
PHP Warning:  simplexml_load_string(): ^ in /usercode/file.php on line 4

</code></pre>

这是PHP错误，而非异常，所以也不能使用try{}catch(){) 处理

以后可能会完善这部分的知识（主要是前辈们的文章写过好多了）]]></content:encoded>
		<excerpt:encoded><![CDATA[PHP解析json,解析xml,解析错误]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date><![CDATA[2019-08-11 23:19:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-11 15:19:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-14 20:24:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-14 12:24:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e8%a7%a3%e6%9e%90json%e3%80%81xml%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1060]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP中对象的序列化和反序列化]]></title>
		<link>https://blog.siammm.cn/archives/126</link>
		<pubDate>Mon, 12 Aug 2019 01:15:17 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>php的serialize函数和unserialize函数</h1>

serialize() 返回字符串，可以存储于任何地方。

serialize() 可处理除了 resource 之外的任何类型。甚至可以 serialize() 那些包含了指向其自身引用的数组。

这有利于存储或传递 PHP 的值，同时<code>不丢失其类型和结构</code>。

在需要恢复的地方使用unserialize()函数即可

<h1>php类魔术方法中的__sleep和__wakeup</h1>

在众多的php类魔术方法中(另一篇文章有简单介绍 <a href="https://www.siammm.cn/archives/112" title="PHP类，魔术方法">PHP类，魔术方法</a>)，有两个是跟序列化有关的。

<code>__sleep()</code> 在对象被调用serialize时隐式唤起，可以返回需要参与序列化的属性数组
<code>__wakeup()</code> 当调用unserialize恢复对象的时候，会被隐式唤起，可以做一些初始化工作

<h1>简单实战</h1>

假设，我们在cli模式的php程序，会根据调用命令解析到不同的类执行。

该类拥有以下3个属性，其中isDev,isCli应该根据运行入口、配置文件等状态而决定。

所以当我们在序列化该类的对象时，不应该包含这两个属性，而应该在wakeup的时候，动态取配置文件的值然后设置进去。

<pre><code class="language-php line-numbers">class Command{
    public $name;  // 命令名
    public $isDev; // 是否为开发环境
    public $isCli; // 是否为命令行运行

    public function run()
    {
        if ($this-&gt;isDev){
            echo "debug\n";
        }
        if (!$this-&gt;cli){
            echo "only cli\n";
        }
    }

    // 设置规定参与序列化的属性
    public function __sleep()
    {
        return ['name'];    
    }

    public function __wakeup()
    {
        // 从配置文件读取
        $config = file_get_content("siam.conf");
        $this-&gt;isDev = $config['dev'] ?? true;
        // 运行环境判断
        $this-&gt;isCli = true;
    }
}
</code></pre>

实例化对象 并序列化

<pre><code class="language-php line-numbers"><br />$class = new Command();
$class-&gt;isDev = true;
$class-&gt;isCli = true;
$str =  serialize($class);

var_dump(unserialize($str));
// 得到以下对象，isDev不会序列化原始的对象属性，而是通过wakeup重新定义
// object(Command)#3 (3) { ["name"]=&gt; NULL ["isDev"]=&gt; bool(false) ["isCli"]=&gt; bool(true) }
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[php的序列化反序列化,魔术方法wakeup,sleep,序列化之后属性还在,序列化隐藏属性]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2019-08-12 09:15:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-12 01:15:17]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-14 20:24:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-14 12:24:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e4%b8%ad%e5%af%b9%e8%b1%a1%e7%9a%84%e5%ba%8f%e5%88%97%e5%8c%96%e5%92%8c%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1060]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Chrome浏览器开发工具之scheme入口]]></title>
		<link>https://blog.siammm.cn/archives/128</link>
		<pubDate>Wed, 14 Aug 2019 01:20:05 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

没啥 ，就是自己玩着玩着发现还有这么多没见过，记录一下

<h3>实验室</h3>

chrome://flags/

一些实验性的功能，可能在未来保留成正式或者被移除，同时也可能会产生不可预期的影响，开发者鼓捣记得备份数据！

<blockquote>
  http://blog.sina.com.cn/s/blog_1806ff8820102xr22.html
</blockquote>

知乎文章

<blockquote>
  https://www.zhihu.com/question/27380104
</blockquote>

<h3>网络调试</h3>

chrome://net-internals/#events

net-internals是一套工具集合，用于帮助诊断网络请求与访问方面的问题，它通过监听和搜集 DNS，Sockets，SPDY，Caches等事件与数据来向开发者反馈各种网络请求的过程、状态以及可能产生影响的因素。

<blockquote>
  https://jingyan.baidu.com/article/2c8c281d8d2f8f0008252a27.html
</blockquote>

<h3>书签管理</h3>

chrome://bookmarks

<h3>显示浏览器所使用磁盘空间配额的情况</h3>

chrome://quota-internals

<h3>历史记录</h3>

chrome://history   跟ctrl+h一样

<h3>扩展管理</h3>

chrome://extensions/shortcuts

<h3>设置管理</h3>

chrome://settings

<h3>显示同步状态</h3>

chrome://sync-internals

查看所有命令（因为会更新的嘛）

chrome://about/]]></content:encoded>
		<excerpt:encoded><![CDATA[谷歌浏览器,Chrome隐藏功能,chrome://,扩展功能]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2019-08-14 09:20:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-14 01:20:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-14 20:17:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-14 12:17:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[chrome%e6%b5%8f%e8%a7%88%e5%99%a8%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7%e4%b9%8bscheme%e5%85%a5%e5%8f%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c8e20e9672e848a545cd040b0c2cac26]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4caf0386370090708199e775dafe9e1b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_59f12fee8660b09082b3731a0cf7493d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[132]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[980]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[JSON序列化接口,JsonSerializable]]></title>
		<link>https://blog.siammm.cn/archives/131</link>
		<pubDate>Wed, 21 Aug 2019 14:05:35 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

php中操作json的函数有<code>json_encode()</code>,<code>json_decode()</code>

在该文档中，encode的传入值可以是<code>除了resource 类型之外的任何数据类型。</code>

<h1>简单序列化一个类</h1>

<pre><code class="language-php line-numbers">class Siam{
    public $name = 'siam';
    protected $age = 21;
    private $sex = "男";
    public static $lover = "undefined";

    public function test()
    {
        return "??";
    }
}

echo json_encode(new Siam());

// 得到  {"name":"siam"}
</code></pre>

<blockquote>
  默认的json_encode，只能序列化类中的public属性。
</blockquote>

<h1>自定义类的序列化接口</h1>

php还提供了一个自定义类序列化的接口，JsonSerializable

实现 JsonSerializable 的类可以 在 json_encode() 时定制他们的 JSON 表示法。

<pre><code class="language-php line-numbers">JsonSerializable {
    /* 方法 */
    abstract public jsonSerialize ( void ) : mixed
}
</code></pre>

需要实现的方法jsonSerialize()，它的返回值：

返回能被 json_encode() 序列化的数据， 这个值可以是除了 resource 外的任意类型。

<h1>简单测试</h1>

<pre><code class="language-php line-numbers">class Siam implements  JsonSerializable
{
    public $name = 'siam';
    protected $age = 21;
    private $sex = "男";
    public static $lover = "undefined";

    public function test()
    {
        return "??";
    }

    public function jsonSerialize()
    {
        return [
            'name' =&gt; $this-&gt;name,
            'age'  =&gt; $this-&gt;age,
            'lover'=&gt; self::$lover
        ];
    }
}

echo json_encode(new Siam());

// 得到 {"name":"siam","age":21,"lover":"undefined"}
</code></pre>

当我们定义一些类的时候，它们经常参与json序列化和传输，同时默认的public属性序列化不能满足，我们就可以自定义序列化接口，提供我们想要的数据。

<h1>总结</h1>

<ul>
<li>json不能序列化资源</li>
<li>json序列化类的时候默认只序列化public属性</li>
<li>php提供了JsonSerializable自定义序列化接口</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[php json_encode,json序列化,自定义,踩坑,学习笔记]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date><![CDATA[2019-08-21 22:05:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-21 14:05:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-21 22:05:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-21 14:05:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[json%e5%ba%8f%e5%88%97%e5%8c%96%e6%8e%a5%e5%8f%a3jsonserializable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[907]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[mysql聚合统计数据查询缓慢优化方案]]></title>
		<link>https://blog.siammm.cn/archives/134</link>
		<pubDate>Fri, 23 Aug 2019 09:57:19 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在我们日常操作数据库的时候，比如订单表、访问记录表、商品表的时候。

经常会处理<code>计算数据列总和、数据行数</code>等统计问题。

随着业务发展，这些表会越来越大，如果处理不当，查询统计的速度也会越来越慢，直到业务无法再容忍。

所以，我们需要先了解、思考这些场景知识点，在设计之初，便预留一些优化空间支撑业务发展。

<h1>sql聚合函数</h1>

在mysql等数据中，都会支持聚合函数，方便我们计算数据。

常见的有以下方法

<pre><code class="line-numbers">取平均值 AVG()
求和 SUM() 
最大值 MAX()
最小值 MIN()
行数 COUNT() 
</code></pre>

演示几个简单使用的sql语句：

查询u_id为100的订单总数

<pre><code class="language-sql line-numbers">select count(id) from orders where u_id = 100;
</code></pre>

查询u_id为100的订单消费总和

<pre><code class="language-sql line-numbers">select sum(order_amount) from orders where u_id = 100;
</code></pre>

查询销量最高的商品

<pre><code class="language-sql line-numbers">select max(sell_num) from goods
</code></pre>

统计7月份的订单数量、金额总和

<pre><code class="language-sql line-numbers">select count(id) as count, sum(order_amount) as total_amount from orders where order_date between 20190701 and 20190731 and is_pay = 1
</code></pre>

如果此时，订单表的总数是1亿条。并且此条sql运行很慢，我们应该如何排查优化？

有的同学会说了：行数多，在日期字段上加<code>索引</code>，这样子筛选就很快了。

总数1亿条，假设7月份的订单有1000万条，加了索引的时候，筛选速度自然会提升不少。但是此时我们的问题真的解决了吗？

在这种聚合函数中，结果需要<code>遍历每一条</code>数据来计算，比如我们统计订单总和，就需要每一行都读取订单金额，然后加起来。

也就是说在这条统计sql中，需要先从1亿数据中筛选1000万条数据，然后再遍历这些数据来计算。 此时就会非常慢了。

<blockquote>
  增加索引并不能解决聚合函数统计慢的问题
</blockquote>

<h1>优化聚合统计的方案</h1>

<h2>提前预算</h2>

建立<code>统计数据表</code>，以日期区分，如：20190801一天，销售了多少订单、金额等等数据。

当订单产生（支付完成后 可统计数据）时，便在统计数据表中对应的日期增加金额、数量。

<blockquote>
  需要注意的是，如果有退款等场景会影响减少数据，记得也相应地做操作处理
</blockquote>

当我们需要统计8月份的数据时候，则只需要遍历计算这一个月的三十来行数据。

<h2>定时落地</h2>

我们可以使用easyswoole、计划任务等。来定时（比如每20分钟一次）计算总和，然后更新到<code>统计数据表</code>中。

优点：做的处理比较少，也无需改动退款操作等api，只需要依赖<code>原订单表</code>的数据，定时统计、刷新统计数据。

<blockquote>
  需要注意的是，根据不同的订单热度，来设置不同的落地频率，比如 一周内的数据变化几率比较大，可能20分钟落地。而一年前的数据则变化几率很小，可以选择某天同步一次，甚至确保不会变动时，则不再刷新。
</blockquote>

<h1>总结</h1>

<ul>
<li>索引并不能解决统计聚合数据慢的sql语句问题</li>
<li>聚合函数谨慎用 最好不用，因为我们无法预算以后的数据量需要扫描多少行数据来计算</li>
<li>优化方案离不开统计表，都需要按一定的周期储存运算好的统计数据</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[php统计mysql,mysql查询缓慢,聚合函数,优化方案]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date><![CDATA[2019-08-23 17:57:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-23 09:57:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-23 17:58:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-23 09:58:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e8%81%9a%e5%90%88%e7%bb%9f%e8%ae%a1%e6%95%b0%e6%8d%ae%e6%9f%a5%e8%af%a2%e7%bc%93%e6%85%a2%e4%bc%98%e5%8c%96%e6%96%b9%e6%a1%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2067]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP path_info,Thinkphp controller not exists index\php]]></title>
		<link>https://blog.siammm.cn/archives/136</link>
		<pubDate>Sat, 24 Aug 2019 13:25:32 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

为什么写下这篇文章，嗯，因为又踩坑了。

问题背景：

<ul>
<li>php7.2</li>
<li>nginx</li>
<li>thinkphp5</li>
</ul>

问题体现：

url如果<code>以/为结尾</code>   比如<code>index.php/admin/</code>，不会自动访问默认控制器、方法<code>index</code>，而是报错

<pre><code class="line-numbers">controller not exists:app\admin\controller\index\Php
</code></pre>

<h1>求知之路</h1>

研究过thinkphp框架源码的，或者深入了解过mvc的，都应该知道thinkphp框架的路由，是根据path_info值来解析的，甚至传参也可以带在path_info中

<h3>排查path_info的值</h3>

一路追踪源码，在<code>thinkphp\library\think\Request.php</code> 路径中，找到以下代码

<pre><code class="language-php line-numbers">    /**
     * 673行左右
     *
     *
     * 获取当前请求URL的pathinfo信息（含URL后缀）
     * @access public
     * @return string
     */
    public function pathinfo()
    {
        if (is_null($this-&gt;pathinfo)) {
            if (isset($_GET[$this-&gt;config['var_pathinfo']])) {
                // 判断URL里面是否有兼容模式参数
                $pathinfo = $_GET[$this-&gt;config['var_pathinfo']];
                unset($_GET[$this-&gt;config['var_pathinfo']]);
                unset($this-&gt;get[$this-&gt;config['var_pathinfo']]);
            } elseif ($this-&gt;isCli()) {
                // CLI模式下 index.php module/controller/action/params/...
                $pathinfo = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : '';
            } elseif ('cli-server' == PHP_SAPI) {
                $pathinfo = strpos($this-&gt;server('REQUEST_URI'), '?') ? strstr($this-&gt;server('REQUEST_URI'), '?', true) : $this-&gt;server('REQUEST_URI');
            } elseif ($this-&gt;server('PATH_INFO')) {
                $pathinfo = $this-&gt;server('PATH_INFO');
            }

            // 分析PATHINFO信息
            if (!isset($pathinfo)) {
                foreach ($this-&gt;config['pathinfo_fetch'] as $type) {
                    if ($this-&gt;server($type)) {
                        $pathinfo = (0 === strpos($this-&gt;server($type), $this-&gt;server('SCRIPT_NAME'))) ?
                        substr($this-&gt;server($type), strlen($this-&gt;server('SCRIPT_NAME'))) : $this-&gt;server($type);
                        break;
                    }
                }
            }

            if (!empty($pathinfo)) {
                unset($this-&gt;get[$pathinfo], $this-&gt;request[$pathinfo]);
            }

            $this-&gt;pathinfo = empty($pathinfo) || '/' == $pathinfo ? '' : ltrim($pathinfo, '/');
        }

        return $this-&gt;pathinfo;
    }
</code></pre>

我尝试在这个方法里（目前来看，这里是分析path_info的第一门关）打印<code>$_SERVER['PATH_INFO']</code>

打印出来的值大概为<code>admin/index.php</code>

然后在后续解析中，又会把.替换成/  也就是<code>admin/index/php</code>

对应我们报错的<code>app\admin\controller\index\Php</code>类

<h3>分析path_info来源</h3>

我们知道，<code>$_SERVER</code>超全局变量是在php中自动维护的，所以它的来源肯定来自以下两个方面之一

<ul>
<li>php底层</li>
<li>web服务器</li>
</ul>

经过找一些资料，我得知了该变量的值是来自<code>web服务器</code>，也就是我使用的nginx

宝塔安装的nginx，会自动维护很多常用配置，比如不同版本的php配置、path_info配置等等（有些自己编译安装的php没有path_info 需要自己添加）

在<code>/www/server/nginx/conf</code> 下有多个php版本的配置文件，在其中有一个配置项

<pre><code class="line-numbers">fastcgi_index index.php;
</code></pre>

fastcgi是什么意思大家可以先自行补充 ^ _ ^

也就是该配置项影响了我们的运行

它的定义可以简单理解为：

<pre><code class="line-numbers">默认值：none
使用字段：http, server, location
如果URI以斜线结尾，文件名将追加到URI后面，这个值将存储在变量$fastcgi_script_name中
</code></pre>

测试：

把index.php改为index2.php

访问程序，报错变为：<code>controller not exists:app\admin\controller\index2\Php</code>

可以证实是该配置影响结果

<h1>总结处理</h1>

Web服务器该配置影响了程序运行，那么我们如何解决该问题

<ul>
<li>① 修改thinkphp底层，把path_info最后的index.php替换掉</li>
<li>② 修改web服务器该配置为none  去除</li>
<li>③ 修改程序，遵循规范</li>
</ul>

基于业务迁移、兼容不同环境考虑，我选择第三种方案。也就是修改程序，不允许跳转或者访问带/结尾。]]></content:encoded>
		<excerpt:encoded><![CDATA[thinkphp报错,学习笔记,index\php控制器不存在,php踩坑,php框架源码,mvc框架的坑]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2019-08-24 21:25:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-24 13:25:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-24 21:29:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-24 13:29:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-path_infothinkphp-controller-not-exists-indexphp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1322]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>746</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-11 04:12:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-10 20:12:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vslasixv.com/" / rel="nofollow ugc">lasix shop</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[PHP自动加载与composer自动加载]]></title>
		<link>https://blog.siammm.cn/archives/137</link>
		<pubDate>Fri, 30 Aug 2019 02:12:35 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[当我们编写面向对象的程序时，通常是将类分别放在<code>不同的文件中</code>。但这样一来，当我们调用其他类的时候，则需要先手动引入该文件（否则会因为当前程序中没有该类名的类而报错）

久而久之加载的列表就会<code>很混乱复杂</code>，不方便管理。

<pre><code class="language-php line-numbers">文件A.php
&lt;?php
class A{
    public function run(){
        echo "这是在A类中的方法";
    }
}
?&gt;

文件B.php
&lt;?php
require "A.php"; // 在这里需要先加载A.php文件
class B{
    public function run(){
        echo "这是在B类中的方法";
        $A = new A();
        $A-&gt;run();
    }
}
</code></pre>

<blockquote>
  所幸，在PHP中我们可以定义<code>自动加载器</code>，自动加载需要使用的文件。
</blockquote>

在讲自动加载器之前，我们先简单说说php中加载文件的几个函数的区别 以及 自动加载所需要的一些知识。

<h3>include和require</h3>

这两个都是php用来包含其他文件的，它们大部分的功能特性都一样，但也有一小部分的区别。

** include有的特性require都有 **

<ul>
<li>加载成功会返回<code>1</code>，可以在被包含文件中通过return改变</li>
<li>当一个文件被包含时，其中所包含的代码继承了 使用包含语句所在行的变量范围，比如在函数中包含其他文件，则被包含文件中定义的变量也是函数内的作用域</li>
<li>包含是语法结构，而不是函数。不需要使用()包裹文件名</li>
</ul>

** include和require的不同 **

它们只有处理失败的方式不同。

require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止。（在框架或者其他业务逻辑中，建议使用require，这样子可以提高脚本的完整性和稳定性）

而 include 只产生警告 E_WARNING ，脚本会继续运行。

<blockquote>
  网上有的古老文章说require是无条件加载  即 if (false) require "test.php"; 也会正常执行加载，测试5.6,7.2都是不会加载的，从一小篇文章找到说是php4的情况
</blockquote>

还有另外的<code>include_once</code>和<code>require_once</code>，这两个方法的区别跟它的普通方法一样，只是会检测加载的文件是否已经被加载过，如果是则不会再次加载（多了一个判断过程，稍微损耗一点性能）

<h4>命名空间</h4>

在面向对象的程序中，大部分的情况都是需要使用命名空间的。我们先了解命名空间的知识，在后续也会结合命名空间实现自动加载

在我们使用计算机的过程，如果想在同一个路径目录下新建两个同名的文件，将会得到错误提示，当前目录下已经存在该文件名的文件。

在php程序中也是如此，我们没办法在同一个空间下声明两个一样类名的文件，否则会得到报错提示

<code>Cannot declare class A, because the name is already in use</code>

<pre><code class="language-php line-numbers">&lt;?php
class A{
    function __construct(){
        echo "第一个";
    }
}

class A{
    function __construct(){
        echo "第二个";
    }
}
</code></pre>

在不同的目录中新建两个一样文件名的操作是被允许的，在程序中我们也可以通过命名空间来给代码划分<code>目录</code>

将不同的代码划分到不同的空间中，两个空间的代码将相对独立开来

新建两个文件 A1.php 和 A2.php

<pre><code class="line-numbers">A1.php
&lt;?php
namespace Siam;  // 声明命名空间使用该语法
class A{
    function __construct()
    {
        echo "这是在Siam空间下的A类";
    }
}
</code></pre>

<pre><code class="line-numbers">A2.php
&lt;?php
// 没有声明命名空间，则是在根空间下
class A{
    function __construct()
    {
        echo "这是在根空间下的A类";
    }
}

// 此时我们可以通过普通的require引入A1.php
require "A1.php";
$A1 = new A();
</code></pre>

运行A2，但是却得到结果：

<code>这是在根空间下的A类</code>

<blockquote>
  此时没有报错相同类名，所以可以看到使用了命名空间，将代码放到不同空间内，可以定义相同类名的类
</blockquote>

那是因为，虽然我们已经引入了Siam\A 但是在使用的时候<code>没有说明</code>我们使用的是Siam空间下的A

当我们在某个命名空间下(如Siam)声明类的时候，该类的完整类名将是<code>命名空间+类名</code>如(Siam\A)

所以默认调用根的A类，我们将代码改成

<pre><code class="line-numbers">require "A1.php";
$A1 = new Siam\A();
</code></pre>

得到结果：<code>这是在Siam空间下的A类</code>

除了这种在调用的时候写名完整类名的方式，我们还可以提前声明，出现的所有名字为A的类，都是使用某个命名空间下的。

** 先有定义命名空间，其他地方才能use **

这个声明使用<code>use</code> 关键字，通常写在文件的开头，use需要写明完整类名。

新建一个文件

<pre><code class="line-numbers">&lt;?php
require "A1.php"; // 引入Siam空间下的A类文件
require "A1.php"; // 引入根空间下的A类文件

use Siam\A;  // 已经声明程序中使用的是Siam空间下的A类

$A1 = new A(); 
// 输出   这是在Siam空间下的A类

$A2 = new \A(); // 通过完整的类名，来调用根空间下的类
// 输出   这是在根空间下的A类
</code></pre>

在使用use的时候还可以给类设置别名，防止当前脚本也有其他同名的类而导致的冲突

调用的时候值需要调用设置的别名即可

<pre><code class="line-numbers">&lt;?php
require "A1.php"; // 引入Siam空间下的A类文件
require "A1.php"; // 引入根空间下的A类文件

use Siam\A AS S_A;  // 已经声明程序中使用的是Siam空间下的A类，并且升值一个别名

$A1 = new S_A(); 
// 输出   这是在Siam空间下的A类

new A();  // 当前运行脚本没有声明namespace  所以是根空间  写的类名也不是完整类名，所以调用当前空间下的类  
// 输出   这是在根空间下的A类

$A2 = new \A(); // 通过完整的类名，来调用根空间下的类
// 输出   这是在根空间下的A类
</code></pre>

<h3>自动加载的原理</h3>

<pre><code class="line-numbers">index.php
&lt;?php
new A();
</code></pre>

当我们使用当前程序未定义的类时，会产生一个报错 <code>Class 'A' not found</code>。

在调用类的过程中，php会先检查当前程序内是否有该类，若没有则通过调用 <code>__autoload</code>函数引入该类的文件。

<code>__autoload ( string $class ) : void</code>

<blockquote>
  该方法在 php >= 7.2就被废弃了，如果使用的是>=7.2的版本可以继续看下面部分的内容
</blockquote>

<pre><code class="line-numbers">index.php
&lt;?php
function __autoload($className){
    echo "正在尝试autoload方法\n";
    if (file_exists("$className.php")){
        require "$className.php";
    }
}

new A();
</code></pre>

可以得到结果：

正在尝试autoload方法 
Fatal error: Uncaught Error: Class 'A' not found in

** 那是因为我们现在还没有写A文件，我们创建一个A.php文件，里面声明A类 **

<pre><code class="language-php line-numbers">A.php
&lt;?php
class A
{
    function __construct()
    {
        echo "A被实例化了\n";
    }
}
</code></pre>

此时可以得到结果：

<code>正在尝试autoload方法</code>
<code>A被实例化了</code>

至此就完成了一个简单的自动加载器的声明。我们实际的应用往往不会这么简单，这就需要我们对自动加载器的功能进一步完善才能灵活使用。

常见的加载器可以设计为：
* 定义类名与文件地址的映射
* 根据命名空间与目录层级的稳定关系追寻文件

** 第一种加载器 定义类名与文件地址的映射 **

<pre><code class="language-php line-numbers">&lt;?php
function __autoload($className){
    // 定义一个映射关系数组 如果是有使用命名空间，则要填写完整类名
    $map = [
        'A' =&gt; 'Lib/A.php',
    ];

    if ( !empty($map[$className]) ){
        require $map[$className];
    }
}

new A();
</code></pre>

** 第二种加载器 根据命名空间与目录层级的稳定关系追寻文件 **

<pre><code class="line-numbers">&lt;?php
function __autoload($className){
    var_dump($className);
}

new Siam\A();
</code></pre>

运行可以得到结果<code>string(6) "Siam\A"</code>

我们依旧可以像第一种自动加载器一样定义map映射，同时我们可以根据命名空间的层级创建<code>对应</code>的目录，这样子就可以根据命名空间找到最终储存的目录路径了

<pre><code class="line-numbers">&lt;?php
function __autoload($className){
    if (file_exists("$className.php")){
        require "$className.php";
    }
}

new Siam\A();  // 此时要把Siam\A的类放到  Siam目录下的A文件中
</code></pre>

可以正常运行得到结果：<code>这是在Siam空间下的A类</code>

<blockquote>
  在不同操作系统中，目录分隔符会不同，以上代码可能不能正常运行，需要根据命名空间的\  替换成系统的目录分隔符
</blockquote>

这种要求<code>类文件根据命名空间存放在对应的目录层级中</code>的约束，叫做PSR规范。（目前是第四个版本，更详细的资料可以通过其他方式了解）

PSR-4规范不要求改变代码的实现方式，只建议如何使用文件系统目录结构和PHP命名空间组织代码，PSR-4规范以来PHP命名空间和文件系统目录结构查找并加载PHP类、接口和Traits。

<h3>php新版的自动加载器 spl_autoload ※※※ 推荐使用的方式</h3>

我们上面介绍了<code>__autoload</code>方法，随着语言的发展，该方式并不能很好的为我们提供服务了。

我们有的时候会使用别人封装的类，或者将类文件放在不同的根目录中。如果此时我们使用该方法来加载，则是这样子的运行流程：

<pre><code class="line-numbers">if ( 类文件是否存在A目录 ){
    加载A目录下的该类文件
} else if ( 类文件是否存在B目录) {
    加载B目录下的该类文件
}...
</code></pre>

会随着系统的扩展而越来越臃肿，所以出现了一种新的注册自动加载器的方式<code>spl_autoload_register</code>

该方式可以支持我们注册多个自动加载器，会按照注册的顺序寻找加载类，如果中途找到则加载并停止，否则将找到结束。

该函数需要传参，可以为<code>callback，类与方法名，函数名等</code>
如

<pre><code class="line-numbers">class Foo {
    static public function test($name) {
        print '[['. $name .']]';
    }
}
spl_autoload_register('\Foo::test'); // 自 PHP 5.3.0 起 将类的一个方法作为加载器的入口



function my_autoloader($class) {
    include 'classes/' . $class . '.class.php';
}

spl_autoload_register('my_autoloader');  // 将一个函数作为加载器的入口



// 或者，自 PHP 5.3.0 起可以使用一个匿名函数
spl_autoload_register(function ($class) {
    include 'classes/' . $class . '.class.php';
});
</code></pre>

使用方式跟<code>__autoload</code>其实基本一样。只是可以更加灵活地扩展。

<h3>composer的自动加载</h3>

在我们<code>另一篇文章</code>中已经很详细地介绍了composer：<a href="http://www.yancoo.cn/index/article/show/id/65.html" title="原文地址">原文地址</a>

除了管理依赖包的功能之外，自动加载也是composer的很重要的一个功能，

我们在使用依赖包的时候，并不需要每一个文件都去加载，而是引入composer的入口文件即可调用所有依赖类。

这就是composer已经为我们实现了自动加载的功能。

我们打开一个使用了composer的目录

<a href="#" title="composer目录结构"><img src="http://yancoo.cn/uploads/images/201905/17_01_composer.png" alt="composer目录结构" title="composer目录结构" /></a>

在composer的核心中，存在着几个以autoload开头的文件，都是用来提供自动加载的功能的。

<ul>
<li>autoload_classmap.php   存放类与文件路径的映射</li>
<li>autoload_namespaces.php 存放命名空间与目录路径的映射</li>
<li>autoload_psr4.php       存放符合psr4规范的映射关系</li>
</ul>

还有其他几个是加载的逻辑的处理等等，这里就先不详细讲，主要处理是从上面几个映射关系中寻找类文件并加载。

<blockquote>
  当我们更新依赖包，新增依赖包，删除依赖包的时候。composer都会更新它维护的那几个映射文件。
</blockquote>

composer也提供了我们<code>自己定义映射</code>的功能，我们在composer.json中可以设置配置项。

<h4>当前提供PSR-0， PSR-4, classmap，files 四种加载方式的配置</h4>

<blockquote>
  注意注意注意！！！ 更新了配置文件都需要执行一下命令才能生效 <code>composer dumpautoload</code>
</blockquote>

** files **
如果你想要明确的指定，在每次请求时都要载入某些文件，那么你可以使用'files' autoloading。通常作为函数库的载入方式（而非类库）

<pre><code class="line-numbers">{
    "autoload": {
        "files": ["src/common/functions.php"]
    }
}
</code></pre>

** classmap **
当我们在使用一些不符合psr规范的类库时，比如老版的phpqrcode，它并没有使用命名空间。

这个时候我们将这类型的类文件放在一个目录中，并使用classmap方法设置在加载类文件的时候搜索这些目录。

<pre><code class="line-numbers">{
    "autoload": {
        "classmap": ["src/", "lib/"]
    }
}
</code></pre>

** psr4映射设置 **

PSR-4和PSR-0最大的<code>区别</code>是对<code>下划线</code>的定义不同。PSR-4中，在类名中使用下划线没有任何特殊含义。而PSR-0则规定类名中的下划线会被转化成目录分隔符。

现在一般都是使用PSR-4规范。

<pre><code class="line-numbers">在composer.json中添加以下模块
"autoload": {
    "psr-4": {
        "Siam\\": "Lib/Siam",
        "Monolog\\": ["src/", "lib/"],  // 如果需要尝试在多个目录下寻找某个命名空间 则使用数组
    }
},

</code></pre>

上面代表了Siam命名空间是对应Lib/Siam目录，以Siam为命名空间的类，会尝试从该路径中加载。
Monolog命名空间下的类可能在src目录下也可能在lib目录下，会尝试从这些路径中加载。

<blockquote>
  设置的命名空间必须以&#92;结束
</blockquote>

本文的讲解就到这里。]]></content:encoded>
		<excerpt:encoded><![CDATA[php自动加载,composer的使用,php类库大全,实用技巧]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:12:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:12:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:12:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:12:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bd%e4%b8%8ecomposer%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[916]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[HTTP跨域详解和解决方式]]></title>
		<link>https://blog.siammm.cn/archives/138</link>
		<pubDate>Fri, 30 Aug 2019 02:13:49 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>HTTP跨域</h2>

<blockquote>
  Access to XMLHttpRequest at 'xx' from origin 'xx' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
</blockquote>

前端的这个报错相信很多人都有遇到过，也知道这是跨域请求的问题。

那么究竟什么是<code>跨域</code>，跨域又是怎么产生的，以及跨域请求的问题需要怎么解决。我们一起来了解一下这些知识。
<br><br><br>

<h2>什么叫跨域</h2>

<code>域</code> ： 域既是 Windows 网络操作系统的逻辑组织单元，也是Internet的逻辑组织单元，它是<code>安全边界</code>。
只有域的所有者才能访问管理域内部的资源，若其他的域要访问或者管理，则需要该域赋予其他域相关权限。

从小角度来讲，在php中的<code>变量作用域</code>，就可以体现出安全边界的概念。在以下例子中，调用test函数并不会输出任何内容。

<pre><code class="language-php line-numbers">&lt;?php
$a = 123;

function test(){
    echo $a;
}
test();
</code></pre>

因为函数内调用的是<code>局部作用域</code>的变量，而在局部作用域内并没有声明 $a 变量。

除非我们使用<code>global $a;</code>从全局作用域引用该变量。

<br>

在PHP脚本中的变量作用域不算复杂，而将一个网站看做一个域，当它要引用其他域的资源时，就需要目标域对原始域进行授权信任。

这种从其他域获取资源的操作就叫做 <code>跨域</code>。<br><br>

<h2>浏览器的同源策略</h2>

<code>同源策略</code>是Web的一种安全约定，浏览器的同源策略只是对其的一种实现。

浏览器同源策略将认为任何站点装载的内容都是不安全的。所以会对<code>跨域的操作或者请求</code>进行限制，从而让用户安全的上网。

<br/>

<code>同源</code> 指的是 <code>域名、协议、端口</code> 相同。
若有其中一个不同，浏览器将会认为非同源，也就是跨域。

<br/>

浏览器的同源策略主要有两种

<ul>
<li>DOM 同源策略 ： 禁止对不同源页面的 Dom 元素进行操作，主要是在 iframe 标签加载跨域页面出现。</li>
<li>XMLHttpRequest 同源策略 ： 禁止使用 XHR 对象对不同源地址发起请求。</li>
<li>存储在浏览器中的数据，如localStroage、Cooke和IndexedDB不能通过脚本跨域访问</li>
</ul>

<h4>Dom 同源策略</h4>

如果没有 DOM 同源策略，也就是说不同域的 iframe 之间可以相互访问操作。

那么将会出现这种攻击操作：我们 iframe 包含某个网站的登录页，并且监听目标网站的登录按钮，当用户触发按钮的时候，我们拿到目标网站 input 的dom元素，并且取值，保存到自己的服务器上。

但是因为有 Dom 同源策略的存在，禁止操作不同源页面的dom元素，甚至我们还可以将自己的网站设置 <code>禁止在非同源网站上 iframe</code> ，我们来看看下面的例子

<pre data-language=HTML><code class="language-markup line-numbers">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Siam - Dom同源策略&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;iframe src="http://www.alipay.com"&gt;
    &lt;/body&gt;

&lt;/html&gt;
</code></pre>

运行以上代码，我们会看到支付宝的网站是禁止在了非同源网站上ifarme。

<img src="http://yancoo.cn/uploads/images/201904/20_01.png" alt="dom运行结果" />

我们可以看到报错

<blockquote>
  v.asp:1 Refused to display 'https://www.alipay.com/' in a frame because it set 'X-Frame-Options' to 'sameorigin'.
</blockquote>

<code>X-Frame-Options</code> 是一个HTTP标头（header），用来告诉浏览器这个网页是否可以放在iFrame内。

用法

<pre><code class="line-numbers">X-Frame-Options: DENY     // 不允许iframe
X-Frame-Options: SAMEORIGIN   // 只允许同源的网站iframe
X-Frame-Options: ALLOW-FROM http://yancoo.cn/  // 只允许指定网站iframe
</code></pre>

<br/><br/>

<h4>XMLHttpRequest 同源策略</h4>

如果没有 XHR 同源策略，以及不允许跨域获取cookies等的限制，那么攻击者将可以发起 <code>CSRF (跨站请求伪造)</code> 攻击

场景可以如下：

<ol>
<li>你登录了某个银行网站，www.siambank.com，银行网站返回你的登录状态并且保存在cookies中。</li>
<li>你没有安全退出清空cookies，又刚好不小心浏览到了恶意网站 www.ggg.com</li>
<li>一进入 www.ggg.com ，它将会向 <code>银行网站</code> 发起XHR请求。（发送请求将会带上目标网站设置的cookies）</li>
<li>银行拿到cookies，验证通过，返回数据。
<br/><br/></li>
</ol>

<h2>跨域的解决方法</h2>

前面我们已经说了，如果想要跨域请求访问或者管理资源，需要目标域赋予权限，到目前为止我们只说了浏览器同源策略的限制，下面我们就再说说赋予权限进行跨域访问相关的知识。
<br/><br/>

<h4>CORS 跨域资源共享</h4>

<code>CORS</code> 是一个 <code>W3C标准</code>,该标准定义了在访问跨域资源时，服务端和客户端需要如何沟通，如何授权信任。

CORS的原理是：使用 <code>http自定义头部</code> ，请求头附带客户端信息，服务端验证，并且返回响应头告诉客户端是否允许访问。

所以该标准需要客户端和服务端同时配合支持，当前所有的浏览器都支持该标准。

CORS 对于用户来说是无感知的，由<code>浏览器自动完成</code> 。

因为当前所有浏览器都支持该标准，并且由浏览器自动完成检测，所以当我们需要使用CORS的时候，只需要由<code>服务端改动，前端不需要改动</code>。

CORS将http请求分为<code>简单请求</code>和<code>非简单请求</code>。

浏览器对于两种类型的请求的处理步骤有一些不同：
<br/>

<strong>简单请求</strong>
<code>简单请求</code>：从名字来理解，就是发送请求的类型或者数据不复杂。

必须<code>同时满足</code>以下两个条件的请求，才是简单请求

<br/>

<ul>
<li>请求方法只能是在以下三种之中。

<ul>
<li>GET</li>
<li>POST</li>
<li>HEAD</li>
</ul></li>
<li>HTTP头部信息不自定义，也就是只能设置默认字段的信息

<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type 只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>
</ul></li>
</ul>

<br/>
处理步骤：

<ol>
<li>浏览器在Http头部带上原始域的标识 <code>Origin</code></li>
<li>服务端根据该标识来判断是否需要信任授权，如果信任就在响应头部返回相同的标识。</li>
<li>浏览器判断响应头是否匹配，做相应结果处理    默认情况下 请求和响应都不带cookies</li>
</ol>

如果需要附带cookies信息

ajax的 <code>withCredentials</code> 设置为 true
服务端 响应头需要增加 <code>Access-Control-Allow-Credentials: true</code>

<strong>非简单请求</strong>

处理步骤：

<ol>
<li>在发送真正请求之前，会先发送一次<code>预检</code>请求，来判断服务端是否支持非简单请求的类方法。<code>预检</code> 请求包含<code>跟简单请求一样的Origin</code>、<code>Access-Control-Request-Method 真实请求的方法 如PUT</code>、<code>Access-Control-Request-Headers自定义复杂头部（可选）</code></li>
<li>预检通过之后，浏览器会再次使用<code>真实请求方法</code>发起请求</li>
</ol>

<strong>实践</strong>

我们先配置两个网站<code>www.siam.com</code> <code>www.siam2.com</code>

<blockquote>
  因为域名不同，所以是非同源请求，会产生跨域。
</blockquote>

在siam网站写下index.html文件，让它使用ajax去请求<code>siam2</code>网站的内容。

<pre data-language=HTML><code class="language-markup line-numbers">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
    &lt;title&gt;首页1&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
        &lt;h1&gt;这是原始页面的内容&lt;/h1&gt;
    &lt;script src="https://cdn.bootcss.com/jquery/3.4.0/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    $(function(){
        $.ajax({
            url : "http://www.siam2.com/index2.php",
            success:function(res){
                $('body').html(res);
            }
        })
    })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<br/><br/>
siam2的index.php

<pre><code class="language-php line-numbers">&lt;?php
echo "来自index2.php的内容";
</code></pre>

访问index.html。会看到浏览器已经发送了请求，但是产生了报错

<blockquote>
  (index):1 Access to XMLHttpRequest at 'http://www.siam2.com/index2.php' from origin 'http://siam.com' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
</blockquote>

<img src="http://yancoo.cn/uploads/images/201904/20_2.png" alt="dom运行结果" />

因为我们还没有在服务端中信任<code>www.siam.com</code>，所以浏览器拿不到信任站点信息，跨域请求失败。

但我们可以看到  http的请求码是200，代表请求成功，在preview中也可以看到php脚本的正常返回，所以 <code>跨域请求失败，php脚本也会正常运行结束</code>。

接下来我们在服务端添加信任siam网站，是需要在响应头中增加字段，来添加信任站点的域名。

<pre><code class="language-php line-numbers">&lt;?php
header('Access-Control-Allow-Origin:http://www.siam.com');
echo "来自index2.php的内容";
</code></pre>

<br/>
<img src="http://yancoo.cn/uploads/images/201904/20_3.png" alt="ajax运行结果" />
<br/>
到这里就跨域请求成功了。但这仅仅是简单请求的场景下，我们还要来测试一下非简单请求的情况。
<br/>

因为简单请求必须是HEAD，GET，POST其一，所以我们这里直接使用<code>PUT</code>方法来测试就可以出现非简单请求的场景了。当然你也可以自定义HTTP头部来实现非简单请求。

我们把index.html的ajax方法改为put 然后请求

<pre><code class="line-numbers">$.ajax({
    url : "http://www.siam2.com/index2.php",
    type: "PUT",
    success:function(res){
        $('body').html(res);
    }
})
</code></pre>

<br/>

<img src="http://yancoo.cn/uploads/images/201904/20_4.png" alt="ajax运行结果" />

<br/>

可以看到在请求中，我们填的是<code>PUT</code>，但是这里产生的却是<code>OPTIONS</code>，前面我们也说了，非简单请求会先产生一次<code>预检</code>请求，带上origin和真实的方法 <code>在这里是PUT</code> ，服务端验证通过了origin和方法之后，浏览器才会使用真实的方法<code>PUT</code>发送一次请求。

我们还没有在服务端返回头部告诉浏览器说我们支持PUT方法，所以浏览器这里拿不到权限，报错了。

我们在服务端的代码添加头部

<pre><code class="language-php line-numbers">&lt;?php
header('Access-Control-Allow-Origin:http://www.siam.com');
header('Access-Control-Allow-Methods:PUT,DELETE'); // 需要同意两种类型，就用逗号隔开

echo "来自index2.php的内容";
</code></pre>

到这里就可以正常的请求了，但是可以在浏览器中看到，产生了两次请求，也就是说php脚本执行了两次。

我们例子中只是简单输出一个字符，如果是查询数据库等操作呢？ 是不是就多出了一次无用的请求。

所以我们可以在服务端拦截预检请求，直接返回同意访问的头部，后面的脚本就不需要执行了。

还有前面的简单请求，哪怕是还没有添加信任，跨域请求失败，脚本也一样会运行。

<blockquote>
  这是因为<code>http协议</code>并没有跨域的概念，请求发送了就会执行，而到达了浏览器的时候，才由浏览器解析响应头，查看是否有相应的字段来决定要不要继续执行。
</blockquote>

我们可以将脚本优化一下

<pre><code class="language-php line-numbers">&lt;?php
// 如果不是同意的来源 就不用运行了
if (strpos($_SERVER['HTTP_ORIGIN'], 'http://www.siam.com') === false){
    die;
}
header('Access-Control-Allow-Origin:http://www.siam.com');
// 如果是预检请求，则通知信任即可，不需要执行脚本。
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS'){
    header('Access-Control-Allow-Methods:PUT,DELETE');
    die;
}

echo "来自index2.php的内容";
</code></pre>

同时我们可以看一下，是否每一个<code>非简单请求</code>都需要先发送预检请求。我们在一个页面连续请求两次

<pre><code class="line-numbers">$.ajax({
    url : "http://www.siam2.com/index2.php",
    type: "PUT",
    success:function(res){
        $('body').html(res);
        $.ajax({
            url : "http://www.siam2.com/index2.php",
            type: "PUT",
            success:function(res){
                $('body').html(res);
            }
        })
    }
})
</code></pre>

发现浏览器只有请求了3次：1次OPTIONS，2次PUT。

<img src="http://yancoo.cn/uploads/images/201904/20_5.png" alt="ajax运行结果" />

<blockquote>
  在一个页面中，预检操作只需要进行一次。
</blockquote>

到这里CORS的基本就弄懂了。

优点
* CORS 通信与同源的 AJAX 通信没有差别，代码完全一样，容易维护。
* 支持所有类型的 HTTP 请求。
缺点
* 第一次发送非简单请求时会多一次请求，增加服务器压力。

<h4>JSONP 跨域解决</h4>

在浏览器中，我们可以使用<code>script</code>标签来加载js脚本，如果使用过cdn的童鞋应该知道，我们可以直接填写不同源的地址，因为浏览器允许<code>script</code>加载跨域资源。我们可以通过该标签来加载动态脚本，但是<code>需要服务端调整数据结构</code>。

相当于让服务端输出<code>调用js函数</code>的语句

首先我们在html中写下以下代码，创建一个script，调用动态脚本

<pre data-language=HTML><code class="language-markup line-numbers">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;
    &lt;title&gt;Siam - script 同源解决&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;这是原始页面的内容&lt;/h1&gt;
    &lt;script src="https://cdn.bootcss.com/jquery/3.4.0/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    // 这里需要先写好相应的回调处理函数，然后服务端的脚本调用 传参
    function test(text){
        $('body').append(text);
    }

    $(function(){
        $("body").append("&lt;script src='http://www.siam2.com/script.php'&gt;&lt;\/script&gt;");
    })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

服务端脚本

<pre><code class="language-php line-numbers">&lt;?php
echo "test('这是返回内容')";
</code></pre>

这样子也可以正常的运行返回

优点
* 兼容性好，现在主流的跨域解决方案之一
缺点
* 只支持get
* 要确定 JSONP 请求是否失败并不容易。虽然 HTML5 给 script 标签新增了一个 onerror 事件处理程序，但是存在兼容性问题

<h4>服务器代理</h4>

除了使用以上的两种方案，我们还可以在nginx配置反向代理，在www.siam.com下某个路径代理到www.siam2.com即可

我们打开nginx.conf

<pre><code class="line-numbers">server {
    listen       80;
    server_name  www.siam.com;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location / {
        root   html;
        index  index.html index.htm;
    }

    location ^~ /apis {
        proxy_pass http://www.siam2.com;
    }
}
</code></pre>

通过反向代理，我们就可以通过 www.siam.com/apis/index2.php 这个路径来访问原来部署在www.siam2.com下的内容。

这样子就是同源请求了。]]></content:encoded>
		<excerpt:encoded><![CDATA[php跨域,跨域解决,前端,jqeury,vue,同源请求]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:13:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:13:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 11:59:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 03:59:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[http%e8%b7%a8%e5%9f%9f%e8%af%a6%e8%a7%a3%e5%92%8c%e8%a7%a3%e5%86%b3%e6%96%b9%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="post_tag" nicename="http"><![CDATA[HTTP]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[132]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1212]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>732</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-05 20:12:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-05 12:12:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://ponlinecialisk.com/" / rel="nofollow ugc">where to buy cialis</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>756</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-17 22:54:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-17 14:54:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://clomidset.com/" / rel="nofollow ugc">buy clomid online south africa</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[PHP设置Redis储存Session，自定义session驱动]]></title>
		<link>https://blog.siammm.cn/archives/139</link>
		<pubDate>Fri, 30 Aug 2019 02:15:07 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>思</h3>

我们在之前的文章已经讲到了session是将数据储存在本地文件中，并且将session_id返回给客户端（浏览器会储存在cookies里）。

那么当我们在负载均衡集群环境的时候，<code>负载调度部分负责把客户端的请求按照不同的策略分配给后端服务节点</code>。所以会出现我们在A机器设置了session，后面请求在B机器判断session依旧为空的情况。

<h3>常用的负载均衡环境处理session的策略</h3>

PHP也可以配置将session保存在redis或者memcache中，在几种用来存储会话数据的方式。显然是Redis在效率上要更快些，而与memcached相比，因为有持久化，也更安全一些。
所以也是常用的负载均衡环境处理session的策略。
但因为是将信息储存在内存中，可能会出现内存不足、利用率不高等问题。

优点：效率高
缺点：信息储存在内存中，会产生大小不一的内存块，内存无法完全利用，并且可能出现内存不足。

<h3>设置session处理</h3>

php中除了可以通过简单修改配置项来设定使用其他的session处理方式，同时也提供了对应的接口以便于我们自定义session的处理逻辑。

接下来我们来通过自定义redis处理session的逻辑来了解接口。

<h3>session_set_save_handler函数</h3>

<code>session_set_save_handler()</code>该函数定义用户session逻辑，如写入、取出、关闭等。
该函数的传参如下：

<blockquote>
  该函数有两种用法
</blockquote>

<h5>在PHP5.4以前的用法</h5>

<blockquote>
  bool session_set_save_hanler(callback open,callback close,callback read,callback write,callback destory,callback gc)
</blockquote>

可见该函数的几个参数接收都是以callback回调函数的形式的。

<table>
<thead>
<tr>
  <th>参数</th>
  <th>描述</th>
</tr>
</thead>
<tbody>
<tr>
  <td>open</td>
  <td>session打开时的回调函数。接收两个参数，第一个参数是保持session的路径，第二个参数是session的名字</td>
</tr>
<tr>
  <td>close</td>
  <td>当session操作完成时调用此函数。不接收参数。</td>
</tr>
<tr>
  <td>read</td>
  <td>以session_id作为参数。通过以session_id作为参数从数据存储方中取得数据，并返回此数据。如果数据为空，可以返回一个空字符串。此函数在调用session_start 前被触发</td>
</tr>
<tr>
  <td>write</td>
  <td>当数据存储时调用。接收两个参数，一个是session_id，另外一个是session的数据</td>
</tr>
<tr>
  <td>destory</td>
  <td>当调用session_destroy 函数时触发destroy函数。只有一个参数 session_id</td>
</tr>
<tr>
  <td>gc</td>
  <td>当php执行session垃圾回收机制时触发</td>
</tr>
</tbody>
</table>

调用方式：

<pre><code class="language-php line-numbers">&lt;?php 

// 需要先引入自定义的SiamSession类（该类的实现逻辑于下面PHP5.4以后的实现相同），然后再设置到save_handler中去
// 也可以直接在参数处传递闭包

$siamSession = new SiamSession();
session_set_save_handler(
  [$siamSession,"open"],
  [$siamSession,"close"],
  [$siamSession,"read"],
  [$siamSession,"write"],
  [$siamSession,"destroy"],
  [$siamSession,"gc"]
);

// 开启
session_start();
</code></pre>

<h2>※※※</h2>

<h5>在PHP5.4以后的用法  也是推荐的用法</h5>

<blockquote>
  session_set_save_handler ( object $sessionhandler [, bool $register_shutdown = TRUE ] ) : bool
</blockquote>

<table>
<thead>
<tr>
  <th>参数</th>
  <th>描述</th>
</tr>
</thead>
<tbody>
<tr>
  <td>sessionhandler</td>
  <td>实现了 （SessionHandlerInterface， SessionIdInterface）或 SessionUpdateTimestampHandlerInterface 接口的对象， 例如 <code>SessionHandler</code>。</td>
</tr>
<tr>
  <td>register_shutdown</td>
  <td>将函数 <code>session_write_close()</code> 注册为 register_shutdown_function() 函数。在PHP函数停止执行时可以触发。</td>
</tr>
</tbody>
</table>

<blockquote>
  session_write_close()函数：结束当前会话并存储会话数据。
</blockquote>

调用方式：

<pre><code class="language-php line-numbers">&lt;?php 

// 需要先引入自定义的Session处理程序，然后再设置到save_handler中去
// 也可以直接在参数处传递闭包

$siamSession = new SiamSession();
session_set_save_handler($siamSession, true);

// 开启
session_start();
</code></pre>

我们看到第一个参数的描述，传入的参数应该是一个<code>实现了 SessionHandlerInterface 接口</code>的对象

同时还可以附属实现 <code>SessionIdInterface</code> 和 <code>SessionUpdateTimestampHandlerInterface</code> 接口

那么我们先来看看这几个接口需要实现什么方法

<h3>从SessionHandler理解几个接口实现</h3>

在描述中可以看到举例传入的参数可以为<code>SessionHandler</code>，也就是如果我们想要自定义Session处理程序，可以参考该类需要实现的方法。

<blockquote>
  <ul>
  <li>这个类是设计用于公开当前内部PHP Session处理程序，如果想要自己实现PHP Session处理程序，请实现 <code>SessionHandlerInterface</code>接口</li>
  <li>从SessionHandler继承的类，可以通过调用父类方法来重写覆盖具体操作，例如将数据加密储存。并且将新类通过session_set_save_handler()设置为PHP Session处理程序</li>
  </ul>
</blockquote>

<pre><code class="language-php line-numbers">&lt;?php
// SessionHandler 实现了SessionHandlerInterface和SessionIdInterface两个接口
// 其中 SessionIdInterface 提供了 create_sid 接口，可以自定义session_id的生成规则
// 其他的方法则由 SessionHandlerInterface 提供，主要是session的回调处理，如打开、关闭、gc、写入、读取
SessionHandler implements SessionHandlerInterface , SessionIdInterface {
    /**
     * close方法，当session关闭的时候触发
     */
    public close ( void ) : bool
    /**
     * create_sid方法，返回一个新创建的session_id
     */
    public create_sid ( void ) : string
    /**
     * destroy方法，当调用session_destroy的时候触发
     */
    public destroy ( string $session_id ) : bool
    /**
     * gc方法，当php程序gc清理的时候触发，主要用于清除已经过期的session
     */
    public gc ( int $maxlifetime ) : int
    /**
     * open方法，当session打开的时候触发
     */
    public open ( string $save_path , string $session_name ) : bool
    /**
     * read方法，读取session的处理逻辑，可以在这里解密储存数据
     * 在session_start后会触发
     */
    public read ( string $session_id ) : string

    /**
     * write方法，将session数据写入到储存中，可以在这里加密数据
     */
    public write ( string $session_id , string $session_data ) : bool
}
</code></pre>

还有另一个接口是<code>SessionUpdateTimestampHandlerInterface</code>  我们看看它又提供了什么方法的接口

<pre><code class="language-php line-numbers">SessionUpdateTimestampHandlerInterface {
    /**
     * 更新时间戳，即更新session过期时间的
     */
    abstract public updateTimestamp ( string $key , string $val ) : bool
    /**
     * 验证session_id 是否还在线
     */ 
    abstract public validateId ( string $key ) : bool
}
</code></pre>

<blockquote>
  SessionHandlerInterface 接口是PHP >= 5.4.0 提供的
  SessionIdInterface 接口是PHP >= 5.5.1 提供的
  SessionUpdateTimestampHandlerInterface 接口是PHP >= 7.0 提供的
</blockquote>

<hr />

接下来我们通过代码来实践一下，通过实现SessionHandlerInterface接口，来写一个redis的PHP Session处理程序

<pre><code class="language-php line-numbers">&lt;?php

class SiamSession  implements \SessionHandlerInterface
{
    private $redis;
    private $expTime = 30; // 默认超时时间 根据业务场景设置

    function __construct(){
        // 连接redis
        $this-&gt;redis = new Redis();
        $this-&gt;redis-&gt;connect('127.0.0.1',6379);

        // 设置session处理回调 并且将session_write_close注册为register_shutdown_function函数
        session_set_save_handler($this, true);

        // 开启
        session_start();

    }

    function open($path, $name)
    {
        return true;
    }

    function close(){
        return true;
    }

    function read($session_id)
    {
        $value = $this-&gt;redis-&gt;get("siam_".$session_id);
        if ($value){
            return $value;
        }
        return '';
    }

    function write($session_id, $data)
    {
        if( $this-&gt;redis-&gt;set("siam_".$session_id, $data) ){
            $this-&gt;redis-&gt;expire("siam_".$session_id, $this-&gt;expTime);
            return true;
        }
        return false;
    }

    function destroy($session_id)
    {
        if ( $this-&gt;redis-&gt;delete("siam_".$session_id) )
        {
            return true;
        }
        return false;
    }

    function gc($maxlifetime)
    {
        return true; // 因为redis设置了过期时间，不需要再gc回收
    }

    function __destruct()
    {
        session_write_close();
    }
}

new SiamSession();
</code></pre>

接着我们在另一个文件中写下测试代码

<pre><code class="language-php line-numbers">&lt;?php
require_once "SiamSession.php";

$_SESSION['name'] = "siam";
echo $_SESSION['name'];
</code></pre>

可以看到浏览器正常出现了<code>siam</code>

那么我们进入phpredisadmin查看一下数据 可以看到类似图片的情况

<a href="#" title="phpredisadmin查看演示"><img src="http://yancoo.cn/uploads/images/201904/13_1.png" alt="phpredisadmin查看演示" title="phpredisadmin查看演示" /></a>

<blockquote>
  其他的储存可以参考上面的处理，对数据进行处理，就可以实现自己的session处理器了
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[php驱动,session自定义,redis的使用]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:15:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:15:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:15:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:15:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e8%ae%be%e7%bd%aeredis%e5%82%a8%e5%ad%98session%ef%bc%8c%e8%87%aa%e5%ae%9a%e4%b9%89session%e9%a9%b1%e5%8a%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="redis"><![CDATA[Redis]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1036]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>743</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-10 05:57:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-09 21:57:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://gcialisk.com/" / rel="nofollow ugc">generic cialis for sale</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[PHP：Phar的打包和使用]]></title>
		<link>https://blog.siammm.cn/archives/140</link>
		<pubDate>Fri, 30 Aug 2019 02:17:07 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>什么是Phar?</h2>

Phar是PHP里类似于<code>Jar</code>的一种打包文件，可以将整个应用打包，便于部署等。

<h3>安装需求</h3>

Phar需要 <code>PHP &gt;= 5.2</code> ，在 PHP5.3或以上，Phar已经包含在内置的扩展中，在这之前可以通过<code>PECL</code>扩展安装。

<h3>运行时配置</h3>

通过<code>php.ini</code>的配置项，可以设定一些Phar的函数行为方式。

<table>
<thead>
<tr>
  <th align="left">配置项</th>
  <th align="left">默认值</th>
  <th align="left">解释</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">phar.readonly</td>
  <td align="left">1</td>
  <td align="left">只允许读，只能在php.ini中取消设置</td>
</tr>
<tr>
  <td align="left">phar.require_hash</td>
  <td align="left">1</td>
  <td align="left">强制所有打开的Phar包需要包含某种签名，否则拒绝处理，只能在php.ini中取消设置</td>
</tr>
<tr>
  <td align="left">phar.extract_list</td>
  <td align="left"></td>
  <td align="left">从phar 2.0.0开始，此INI设置已被删除，加载路径映射</td>
</tr>
<tr>
  <td align="left">phar.cache_list</td>
  <td align="left"></td>
  <td align="left">允许在Web服务器启动时预先解析映射phar存档，从而提供性能改进，使运行文件从phar存档中移出，非常接近从传统的基于磁盘的安装运行这些文件的速度。</td>
</tr>
</tbody>
</table>

<h3>使用Phar</h3>

Phar包在概念上类似于Java的Jar包，但是根据PHP应用程序的需求和灵活性进行了定制，Phar包用于在单个文件中分发完整的PHP应用程序或者库（单一入口）。

使用Phar包和使用其他的PHP库是相同的：
加载文件 --> 调用

<pre><code class="language-php line-numbers">&lt;?php
require_once "phar://siam.phar/user.class.php";

$u = new user();
$u-&gt;set_name("siam");
</code></pre>

<h3>制作Phar包</h3>

我们先建立以下层级的文件

<pre><code class="line-numbers">siam
├── src 目标程序
|   ├── test
|   |   └── index.html
|   └── A.php
|   └── B.php
|   └── index.php
└── build.php   打包程序
</code></pre>

其中src目录下 就是你需要打包的整个程序文件，这里就不展示了、

build.php文件是执行打包的文件

<pre><code class="language-php line-numbers">&lt;?php

//产生一个siam.phar文件
$phar = new Phar('siam.phar', 0, 'siam.phar');
// 添加src里面的所有文件到siam.phar归档文件
$phar-&gt;buildFromDirectory(dirname(__FILE__) . '/src');
//设置执行时的入口文件，第一个用于命令行，第二个用于浏览器访问，这里都设置为index.php
$phar-&gt;setDefaultStub('index.php', 'index.php');
</code></pre>

设置好包名、打包目标、运行入口文件，我们在浏览器访问build.php即可看到在目录中生成了一个<code>siam.phar</code>的文件。

<blockquote>
  第一次访问build.php提示报错:disabled by the php.ini setting phar.readonly，记得看文章上面，在php.ini手动打开，不能通过函数设置的哈~
</blockquote>

siam.phar的开头内容大概如下

<pre><code class="language-php line-numbers">&lt;?php
$web = 'index.php';

if (in_array('phar', stream_get_wrappers()) &amp;&amp; class_exists('Phar', 0)) {
Phar::interceptFileFuncs();
set_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());
Phar::webPhar(null, $web);
include 'phar://' . __FILE__ . '/' . Extract_Phar::START;
return;
}

if (@(isset($_SERVER['REQUEST_URI']) &amp;&amp; isset($_SERVER['REQUEST_METHOD']) &amp;&amp; ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {
Extract_Phar::go(true);
$mimes = array(
'phps' =&gt; 2,
'c' =&gt; 'text/plain',
'cc' =&gt; 'text/plain',
'cpp' =&gt; 'text/plain',
'c++' =&gt; 'text/plain',
......
)
</code></pre>

<h3>效果预览</h3>

<pre><code class="language-php line-numbers">&lt;?php
/**
 * 测试siam.phar
 */

# 测试入口文件
require 'phar://siam.phar';

echo "&lt;br&gt;";

# 测试类文件
require 'phar://siam.phar/A.php';

$class = new Siam\A();
echo $class-&gt;a();

echo "&lt;br&gt;";

# 测试静态文件
$html = require 'phar://siam.phar/test/index.html';
echo $html;

</code></pre>

<h3>命令行模式</h3>

上面我们演示了的是其他php程序加载调用phar包的情况。

我们也可以用命令行来运行phar包。

首先我们先改造一下入口文件

<pre><code class="language-php line-numbers">&lt;?php
foreach ($argv as $key =&gt; $value) {
    if ($key == 0){
        continue;
    }

    switch ($value) {
        case '-v':
            echo "当前版本 v1.0";
            break;

        case '-m':
            echo "siam";
            break;

        default:
            echo "未知命令";die;
            break;
    }
}
</code></pre>

然后再次构建phar包，在命令行模式下分别输入以下命令试试吧

<pre><code class="line-numbers">php ./siam.phar 
php ./siam.phar -v
php ./siam.phar -v -m 
php ./siam.phar -v -t
</code></pre>

<h3>Phar中目录路径相关</h3>

我们都知道在PHP中是可以通过函数和常量来获取运行脚本所在目录路径的，那么在Phar打包的程序中，展示的目录路径又会是怎么样的？

我们将<code>src/index.php</code>中的文件再次改为以下内容来进行测试

<pre><code class="language-php line-numbers">&lt;?php
// getcwd()返回当前工作目录
echo "getcwd --&gt;" . getcwd();
echo "\n";

// 获取当前文件的绝对路径
echo "__FILE__ --&gt;" .__FILE__;
echo "\n";

// 获取当前脚本的目录
echo "__DIR__ --&gt;" .__DIR__;
echo "\n";

// 当前执行脚本的绝对路径。记住，在CLI方式运行php是获取不到的
echo "SCRIPT_FILENAME --&gt;" .$_SERVER["SCRIPT_FILENAME"];
echo "\n";

// 当前运行脚本所在的文档根目录。在服务器配置文件中定义
echo "DOCUMENT_ROOT --&gt;" .$_SERVER["DOCUMENT_ROOT"];
echo "\n";
</code></pre>

接着我们分别运行<code>src/index.php</code>和<code>siam.phar</code>

<a href="#" title="phar运行结果对比"><img src="http://yancoo.cn/uploads/images/201902/20190330-1.png" alt="phar运行结果对比" title="phar运行结果对比" /></a>

在结果中我们可以看到类似如图的结果

<table>
<thead>
<tr>
  <th></th>
  <th>phar</th>
  <th>正常PHP脚本</th>
</tr>
</thead>
<tbody>
<tr>
  <td>getcwd</td>
  <td>得到phar包所在目录</td>
  <td>得到php脚本所在目录</td>
</tr>
<tr>
  <td>&#95;&#95;FILE&#95;&#95;</td>
  <td>phar:// 数据流包装器，指向入口脚本所在绝对路径（注意：phar包名作为一个目录层级）</td>
  <td>得到php脚本文件所在绝对路径</td>
</tr>
<tr>
  <td>&#95;&#95;DIR&#95;&#95;</td>
  <td>phar:// 数据流包装器，指向入口脚本所在目录绝对路径</td>
  <td>得到php脚本所在目录绝对路径</td>
</tr>
<tr>
  <td>$&#95;SERVER["SCRIPT_FILENAME"]</td>
  <td>phar包名</td>
  <td>php脚本文件名</td>
</tr>
<tr>
  <td>$&#95;SERVER["DOCUMENT_ROOT"]</td>
  <td>应该是本地测试原因为空，后面补充</td>
  <td></td>
</tr>
</tbody>
</table>

<h4>Phar包中的临时文件存放</h4>

假设我们的程序打包成了phar包，那么在运行中产生的日志记录，我们应该怎么来存放。

根据上面的测试，我们知道了 <code>__FILE__</code> <code>__DIR__</code> 两个常量得到的是<code>phar:// 数据流包装器</code>，如果我们使用这两个常量来设置Log文件存放路径，是否能正常储存?

<pre><code class="language-php line-numbers">&lt;?php
$logPath = __DIR__ .   "/test.log";
echo $logPath."\n";
file_put_contents($logPath, "test\n");

// 写完再读出来
echo file_get_contents($logPath);
</code></pre>

<blockquote>
  打包，运行，会得到以下结果
</blockquote>

<pre><code class="line-numbers">phar://F:/WWW/learn/phar/siam.phar/test.log
test
</code></pre>

但是我们的日志需要储存一般都是用<code>FILE_APPEND</code>追加内容储存。

然而phar包中的运行你将会得到以下结果

<pre><code class="line-numbers">Warning: file_put_contents(phar://F:/WWW/learn/phar/siam.phar/test.log): failed to open stream: phar error: open mode append not supported in phar://F:/WWW/learn/phar/siam.phar/index.php on line 4
</code></pre>

关键报错：open model append not supported in phar

可见phar内的文件写入不支持追加模式打开。

并且在后续的日志查看中 也极其不方便，因为phar包内的文件我们并不能直接查看，所以我们储存临时文件应该存放在外部。

<pre><code class="language-php line-numbers">&lt;?php
$logPath = getcwd() .   "/test.log";
echo $logPath."\n";
file_put_contents($logPath, "test\n", FILE_APPEND);
</code></pre>

getcwd()函数将会得到phar包所在目录，然后在同级将创建test.log文件存放日志内容。]]></content:encoded>
		<excerpt:encoded><![CDATA[php打包,部署,技巧,生产迁移]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:17:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:17:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:17:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:17:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%ef%bc%9aphar%e7%9a%84%e6%89%93%e5%8c%85%e5%92%8c%e4%bd%bf%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1204]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[bitmap算法的PHP实现，快速去重排序，数据压缩储存]]></title>
		<link>https://blog.siammm.cn/archives/141</link>
		<pubDate>Fri, 30 Aug 2019 02:18:10 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[，## 基础知识储备

<h4>一个字节占用8个位</h4>

<pre><code class="line-numbers">1字节(byte)=8位(bit)
1K=1024字节
1M=1024k
</code></pre>

因为电路的逻辑只有0和1两个状态，这里的0和1并不是数字的0和1，0和1是表示两种不同的状态，0表示低电平，1表示高电平。因为计算机是由无数个逻辑电路组成的，只能根据0和1的无限位数和组合来表达信息。

电脑只认识0和1这两个数字，所有的数据在电脑中都是以0和1组成的编码存储的，这样的编码叫做二进制。一个0或一个1就叫做一个位

最初的计算机性能和存储容量都比较差,所以普遍采用4位BCD编码(这个编码出现比计算机还早,最早是用在打孔卡上的)。

BCD编码表示数字还可以,但表示字母或符号就很不好用,需要用多个编码来表示。

后来又演变出6位的BCD编码(BCDIC),以及至今仍在广泛使用的7位ASCII编码。

不过最终决定字节大小的,是大名鼎鼎的System/360。当时IBM为System/360设计了一套8位EBCDIC编码,涵盖了数字、大小写字母和大部分常用符号,同时又兼容广泛用于打孔卡的6位BCDIC编码。System/360很成功,也奠定了字符存储单位采用8位长度的基础,这就是1字节=8位的由来。

<h4>位运算</h4>

位运算就是直接对整数在内存中的二进制位进行操作。
上面已经介绍了什么是二进制位，数字1的二进制位为 <code>00000001</code> 数字2的二进制位为 <code>00000010</code>

<table>
<thead>
<tr>
  <th>例子</th>
  <th>说明</th>
  <th>名称</th>
</tr>
</thead>
<tbody>
<tr>
  <td>$a &amp; $b</td>
  <td>将把 $a 和 $b 中都为 1 的位设为 1。</td>
  <td>按位与</td>
</tr>
<tr>
  <td>$a 丨 $b</td>
  <td>将把 $a 和 $b 中任何一个为 1 的位设为 1。</td>
  <td>按位或</td>
</tr>
<tr>
  <td>$a ^ $b</td>
  <td>将把 $a 和 $b 中一个为 1 另一个为 0 的位设为 1。</td>
  <td>按位异或</td>
</tr>
<tr>
  <td>~ $a</td>
  <td>将 $a 中为 0 的位设为 1，反之亦然。</td>
  <td>按位取反</td>
</tr>
<tr>
  <td>$a &lt;&lt; $b</td>
  <td>将 $a 中的位向左移动 $b 次（每一次移动都表示“乘以 2”）。</td>
  <td>左移</td>
</tr>
<tr>
  <td>$a >> $b</td>
  <td>将 $a 中的位向右移动 $b 次（每一次移动都表示“除以 2”）。</td>
  <td>右移</td>
</tr>
</tbody>
</table>

这里只拿&amp; 和 | 简单介绍，其他的可以在官网手册进一步学习。

<pre><code class="language-php line-numbers">&lt;?php
$a = 1;
$b = 2;
echo $a &amp; $b;  // 结果0
// $a =&gt; 00000001
// $b =&gt; 00000010
//   ↓ 同一个位都为1的才设为1
//    =&gt; 00000000
</code></pre>

<pre><code class="language-php line-numbers">&lt;?php
$a = 1;
$b = 2;
echo $a | $b;  // 结果3
// $a =&gt; 00000001
// $b =&gt; 00000010
//   ↓ 任何一个位为1的就设为1
//    =&gt; 00000011
</code></pre>

<h4>php中int类型占用多少字节</h4>

<pre><code class="line-numbers">var_dump(PHP_INT_SIZE);  // 表示整数integer值的字节长。在32位平台上int占4个字节，在64位平台上int占8个字节。
</code></pre>

<blockquote>
  以下场景均为使用64位平台
</blockquote>

在php中，一个int类型的值占用的位数为：

<pre><code class="line-numbers">PHP_INT_SIZE * 8 = 8 * 8 = 64
</code></pre>

<h3>bitmap算法</h3>

<code>bitmap</code>从字面意思是位图，但是在这里，我们应该翻译成 <code>位的映射</code>

BitMap算法就是用一个bit位来标记某个元素存在，该bit位所在的key就是该元素的值。

如我们需要储存一组数据：3,6,7,1,5
我们可以声明一字节空间（8个位）  然后分别将第3位、第6位、第7位、第1位、第5位的bit值设置成1

<blockquote>
  位的下标是从0开始算的
</blockquote>

于是这一字节空间就变成了 <code>010100110</code>

<blockquote>
  本来是5个int，占用 40个字节，用bitmap储存只占用了 1个字节
</blockquote>

储存完后 也可以达到排序的效果，只要遍历一次，从第0位开始读取是否为1，这样就能拿到5个元素排序后的结果。

<h3>用途</h3>

<ul>
<li>数据压缩储存</li>
<li>通过位运算对比筛选储存数据</li>
<li>数据去重排序</li>
</ul>

<h3>优点</h3>

<ul>
<li>占用内存少 压缩储存数据</li>
<li>可进行快速方便的位运算</li>
<li>快速查找使用</li>
<li>快速排序去重</li>
</ul>

<h3>缺点</h3>

<ul>
<li>无法处理重复数据</li>
<li>bitmap中的查询结果（value）能表达的状态有限</li>
</ul>

<h3>php实现</h3>

<pre><code class="language-php line-numbers">&lt;?php
# 定义一个数据 开辟储存空间
$arr          = array_fill(0, 50, 0);      //申请一个整形数组, 50个元素, 初始化为整数0
$int_bit_size = PHP_INT_SIZE * 8; // 每一个int占用的位数 (可储存标记的数量)
$a            = array(1,2,3,6,6,7,9,1,11,105,97,31,66,58,69,25); // 乱序数组

foreach ($a as $k =&gt; $v){
    $row = (int) floor ($v / $int_bit_size);  // 数据储存在第几行
    $wei = $v % $int_bit_size;                // 数据储存在第几位

    // 以下看不懂的 请看文章开头的 知识储备 位运算
    $offset    = 1 &lt;&lt; $wei;            // 1是 00000001 ； 得到的余数 （位） 假设为3  则左移3位 得到 00001000
    $arr[$row] = $arr[$row] | $offset; // 将位改为1  标记储存数据 
}
</code></pre>

<h3>演习就是实战</h3>

需求：用户属性标签。 Siam拥有程序员、画画标签；仙士可拥有程序员、奶爸、有老婆标签。

Siam弟弟的做法：以用户为单位，储存标签。

<strong>用户表</strong>

<table>
<thead>
<tr>
  <th>u_id</th>
  <th>u_name</th>
  <th>u_tags</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>Siam</td>
  <td>1,2</td>
</tr>
<tr>
  <td>2</td>
  <td>仙士可</td>
  <td>1,3,4</td>
</tr>
</tbody>
</table>

<strong>标签表</strong>

<table>
<thead>
<tr>
  <th>tag_id</th>
  <th>tag_name</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>程序员</td>
</tr>
<tr>
  <td>2</td>
  <td>画画</td>
</tr>
<tr>
  <td>3</td>
  <td>奶爸</td>
</tr>
<tr>
  <td>4</td>
  <td>有老婆</td>
</tr>
</tbody>
</table>

嗯 看起来好像没什么毛病 查询出u_tags再分割查询tag 正常显示

<strong>新需求来了</strong>
在后台 统计分析 拥有某个标签的用户数量 <code>what the f*ck?</code>

emmmm.....

<strong>新版用户表</strong>

<table>
<thead>
<tr>
  <th>u_id</th>
  <th>u_name</th>
  <th>age</th>
  <th>job</th>
  <th>...</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>Siam</td>
  <td>20</td>
  <td>程序员</td>
  <td>...</td>
</tr>
<tr>
  <td>2</td>
  <td>仙士可</td>
  <td>NULL</td>
  <td>程序员</td>
  <td>...</td>
</tr>
</tbody>
</table>

能统计了...但是?? 每个标签都要<code>预先创建好列</code>

<strong>思维转换</strong>

<strong>新版标签表 用户表还是用第一版</strong>

<table>
<thead>
<tr>
  <th>tag_id</th>
  <th>tag_name</th>
  <th>tag_users</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>程序员</td>
  <td>1,2</td>
</tr>
<tr>
  <td>2</td>
  <td>画画</td>
  <td>1</td>
</tr>
<tr>
  <td>3</td>
  <td>奶爸</td>
  <td>2</td>
</tr>
<tr>
  <td>4</td>
  <td>有老婆</td>
  <td>2</td>
</tr>
</tbody>
</table>

如果直接以这样子的数据储存用户id，当用户量多了，数据就会非常的大，做分析的时候，占用了很多内存，

我们把tag_users字段的储存，用bitmap算法，压缩储存

<pre><code class="language-php line-numbers">&lt;?php
$arr = []; // 如果是做更新操作 原数组从储存中拿出

// 先运算用户id在第几行和第几位  (一行是一个int，64位)
$bitSize = PHP_INT_SIZE * 8;

$uId    = 100;
$row    = (int) floor ( $uId / $bitSize );
$column = $uId % $bitSize;

$offset    = 1 &lt;&lt; $column;
$arr[$row] = $arr[$row] | $offset;

echo json_encode($arr); // 将json存入db
</code></pre>

<blockquote>
  除了压缩储存的优势，在做用户群交集并集运算的时候，bitmap也有极大的便利优势。
</blockquote>

<strong>数据取出筛选分析 (位运算)</strong>

<blockquote>
  以下代码比较多 请用心看完！
</blockquote>

<pre><code class="language-php line-numbers">&lt;?php
// 先分别从db取出数据 伪代码
$bitSize = PHP_INT_SIZE * 8;

// 程序员
$programmer = [
    0 =&gt; '6', // 00000110  储存了用户1、2
    1 =&gt; '2199023255552', // 储存了用户105
];

// 画画
$draw = [
    0 =&gt; '2', // 00000010 储存了用户1
    1 =&gt; '2199023255552', // 储存了用户105
];

// 有老婆的
$notSingleDog = [
    0 =&gt; '4', // 00000100 储存了用户2
    1 =&gt; '0', 
];

// 奶爸
$father = [
    0 =&gt; '4', // 00000100 储存了用户2
    1 =&gt; '0', 
];

/**
 * 会画画的程序员 交集
 */
$tem = [];
// 遍历程序员 看看哪些会画画
foreach ($programmer as $key =&gt; $value){
    // 这里的一个key 等于一行 value是bitmap
    $tem[$key] = $value &amp; $draw[$key];
}


// 得到交集的bitmap  再解析成u_id
$uId = [];
foreach ($tem as $k =&gt; $v){
     for ($i=0; $i &lt; $bitSize; $i++)
     {
        $tmp  = 1 &lt;&lt; $i;
        $flag = $tmp &amp; $tem[$k];

        if ($flag) {
          $uId[] = $k * $bitSize + $i;
        }
     }
}
echo "会画画的程序员:&lt;br/&gt;";
var_dump($uId);

/**
 * 有老婆的程序员 交集
 */

$tem = [];
foreach ($programmer as $key =&gt; $value){
    $tem[$key] = $value &amp; $notSingleDog[$key];
}

$uId = [];
foreach ($tem as $k =&gt; $v){
     for ($i=0; $i &lt; $bitSize; $i++)
     {
        $tmp  = 1 &lt;&lt; $i;
        $flag = $tmp &amp; $tem[$k];

        if ($flag) {
          $uId[] = $k * $bitSize + $i;
        }
     }
}
echo "有老婆的程序员:&lt;br/&gt;";
var_dump($uId);

/**
 * 有老婆又会画画的程序员 交集
 */

$tem = [];
foreach ($programmer as $key =&gt; $value){
  $tem[$key] = $value &amp; $notSingleDog[$key] &amp; $draw[$key];
}

$uId = [];
foreach ($tem as $k =&gt; $v){
   for ($i=0; $i &lt; $bitSize; $i++)
   {
      $tmp  = 1 &lt;&lt; $i;
      $flag = $tmp &amp; $tem[$k];

      if ($flag) {
        $uId[] = $k * $bitSize + $i;
      }
   }
}
echo "有老婆又会画画的程序员:&lt;br/&gt;";
var_dump($uId);

/**
 * 有老婆或者会画画的程序员 并集
 */

$tem = [];
foreach ($programmer as $key =&gt; $value){
  $tem[$key] = $value &amp; ($notSingleDog[$key] | $draw[$key]);
}

$uId = [];
foreach ($tem as $k =&gt; $v){
   for ($i=0; $i &lt; $bitSize; $i++)
   {
      $tmp  = 1 &lt;&lt; $i;
      $flag = $tmp &amp; $tem[$k];

      if ($flag) {
        $uId[] = $k * $bitSize + $i;
      }
   }
}
echo "有老婆或者会画画的程序员:&lt;br/&gt;";
var_dump($uId);
</code></pre>

<pre><code class="language-php line-numbers">会画画的程序员:&lt;br/&gt;array(2) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(105)
}
有老婆的程序员:&lt;br/&gt;array(1) {
  [0]=&gt;
  int(2)
}
有老婆又会画画的程序员:&lt;br/&gt;array(0) {
}
有老婆或者会画画的程序员:&lt;br/&gt;array(3) {
  [0]=&gt;
  int(1)
  [1]=&gt;
  int(2)
  [2]=&gt;
  int(105)
}
</code></pre>

<blockquote>
  然而 bitmap算法也存在着缺点：不能直接进行非运算
</blockquote>

如，想要获取不是程序员的用户数量，如果直接拿程序员标签的结果进行非运算，并不会得到准确的用户信息，

假设声明了一个64位的空间，其中只有3个用户是程序员，占用了1/2/3位，如果直接运行非运算，将会得到0/4/5/6.../63位的数据

但我们的系统可能没有64个用户，或者用户的id进行了跳跃，并不是连续的，所以得到了错误的列表。

我们需要借助全量用户的bitmap。 每有用户注册，不管他设置了什么标签，都需要往全量bitmap进行插入，这样子就可以用全量bitmap和程序员标签的bitmap进行运算，得到<code>非程序员用户</code>的列表]]></content:encoded>
		<excerpt:encoded><![CDATA[php算法,大数据,bitmap,注册打卡实现]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:18:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:18:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:18:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:18:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bitmap%e7%ae%97%e6%b3%95%e7%9a%84php%e5%ae%9e%e7%8e%b0%ef%bc%8c%e5%bf%ab%e9%80%9f%e5%8e%bb%e9%87%8d%e6%8e%92%e5%ba%8f%ef%bc%8c%e6%95%b0%e6%8d%ae%e5%8e%8b%e7%bc%a9%e5%82%a8%e5%ad%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1021]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP图片文字合成居中]]></title>
		<link>https://blog.siammm.cn/archives/142</link>
		<pubDate>Fri, 30 Aug 2019 02:19:04 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>PHP处理图片</h3>

PHP使用GD库创建和处理包括GIF，PNG，jpef，wbmp以及xpm在内的多种格式的图像。

以下教程：图片合成文字，实现合成文字水平、垂直居中。

<h4>读取图片资源</h4>

<pre><code class="line-numbers">imagecreatefrom 系列函数用于从文件或 URL 载入一幅图像，成功返回图像资源，失败则返回一个空字符串。
</code></pre>

<h4>根据图片格式选用不同函数</h4>

<pre><code class="line-numbers">imagecreatefromgif()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像
imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像
imagecreatefrompng()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像
imagecreatefromwbmp()：创建一块画布，并从 WBMP 文件或 URL 地址载入一副图像
imagecreatefromstring()：创建一块画布，并从字符串中的图像流新建一副图像
</code></pre>

<h4>获取图片尺寸</h4>

<pre><code class="line-numbers">imagesx($image);
imagesy($image);
</code></pre>

<h4>创建颜色</h4>

<pre><code class="line-numbers">imagecolorallocatealpha(resource $image , int $red , int $green , int $blue , int $alpha); // 带透明度
imagecolorallocate(resource $image , int $red , int $green , int $blue);      // 普通
</code></pre>

<h4>获取文字内容所需尺寸</h4>

<pre><code class="line-numbers">imagettfbbox ( float $size, float $angle, string $fontfile, string $text):array
</code></pre>

取得使用 TrueType 字体的文本的范围。（种类型字体文件的扩展名是.ttf，类型代码是tfil。）

以上是每个步骤使用的关键函数说明。以下是完整代码示例。

<pre><code class="language-php line-numbers">&lt;?php
/**
 * Created by PhpStorm.
 * User: Siam
 * Date: 2019/2/4 0004
 * Time: 下午 10:58
 */

$main = imagecreatefromjpeg('./test.jpg');

$fontSize = 38;
$width   = imagesx($main);
$height   = imagesy($main);

//1.设置字体的路径
$font    = "./t.ttf";
//2.填写水印内容
$content = "My name is Siam,中文是宣言";
//3.设置字体颜色和透明度
$color   = imagecolorallocatealpha($main, 255, 255, 255, 0);

$fontBox = imagettfbbox($fontSize, 0, $font, $content);//获取文字所需的尺寸大小 

//4.写入文字 (图片资源，字体大小，旋转角度，坐标x，坐标y，颜色，字体文件，内容)
imagettftext($main, $fontSize, 0, ceil(($width - $fontBox[2]) / 2), ceil(($height - $fontBox[1] - $fontBox[7]) / 2), $color, $font, $content);

// 浏览器输出 也可以换成保存新图片资源
header("Content-type:jpg");
imagejpeg($main);
</code></pre>

效果：
<a href="#" title="Siam博客"><img src="http://yancoo.cn/uploads/images/201902/2019190205-123829.png" alt="Siam博客" title="Siam博客" /></a>
最关键的步骤是获取到文字内容所需的尺寸大小

<blockquote>
  原图的大小 - 文字内容的大小 = 剩余空白大小；
  剩余空白大小 / 2 的效果就是自动居中。
</blockquote>

我们可以在以上基础上封装成一个灵活的函数

<pre><code class="language-php line-numbers">&lt;?php
function imageAddText($path, $content, $x = 'auto', $y = 'auto', $fontSize = 38, $font = './t.ttf'){
    $temp = array(1=&gt;'gif', 2=&gt;'jpeg', 3=&gt;'png');
    // 获取图片信息
    $imageInfo = getimagesize($path);
    $imageType = $temp[$imageInfo[2]];

    $getfunc = "imagecreatefrom$imageType";
    $outfunc = "image$imageType";

    $resource = $getfunc($path);

    $width    = imagesx($resource);
    $height   = imagesy($resource);

    $color = imagecolorallocatealpha($resource, 255, 255, 255, 0);

    $fontBox = imagettfbbox($fontSize, 0, $font, $content);//文字水平居中实质

    if ($x === 'auto'){
        $x = ceil(($width - $fontBox[2]) / 2);
    }
    if ($y === 'auto'){
        $y = ceil(($height - $fontBox[1] - $fontBox[7]) / 2);
    }

    imagettftext($resource, $fontSize, 0, $x, $y, $color, $font, $content);

    /*输出图片*/
    //浏览器输出
    header("Content-type:".$imageType);
    $outfunc($resource);
}

// 自动居中
// imageAddText('./test.jpg', 'My name is Siam，中文名是宣言');
// 声明x y值
// imageAddText('./test.jpg', 'My name is Siam，中文名是宣言',200);
// imageAddText('./test.jpg', 'My name is Siam，中文名是宣言','auto', '300');
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[phpgd库.图片生成,合成海报]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:19:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:19:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 11:51:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 03:51:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e5%9b%be%e7%89%87%e6%96%87%e5%ad%97%e5%90%88%e6%88%90%e5%b1%85%e4%b8%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[934]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PhpSpreadsheet导出Excel表格，长数字自动转科学计数法]]></title>
		<link>https://blog.siammm.cn/archives/143</link>
		<pubDate>Fri, 30 Aug 2019 02:19:35 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>原代码</h2>

<pre><code class="line-numbers">public function down($data)
{
    $spreadsheet = new Spreadsheet();
    $sheet       = $spreadsheet-&gt;getActiveSheet();

    $lieCount = count($data['data'][0]);
    # 全部设为自动列宽
    for($i=65;$i&lt; (65 +$lieCount);$i++){
        $sheet-&gt;getColumnDimension(strtoupper(chr($i)))-&gt;setAutoSize(true);
    }
    # 最快捷设置数据
    $sheet-&gt;fromArray($data['data']);
    # 导出
    $writer = new Xlsx($spreadsheet);
    $writer-&gt;save('php://output');
}
</code></pre>

这样子就可以实现传入一个数组data，然后快速导出成Excel表格了。
但是遇到长数字的时候，就会被转成科学计数法的数字，并且会丢失最后的精度 全部转成了 <code>0</code>

原因：

<blockquote>
  凡数字超过11位数，Excel 表格就会用科学记数法显示。如果要输入超过11位的数，得把单元格设为文本形式或在输入数字前先输入一个英文单引号（'）。(单引号在英文输入法下输入）
</blockquote>

也就是在传入data之前先遍历 添加符号

但是这样子在我们程序自动导出是不能生效的，需要我们再 <code>双击单元格</code> 它才会转成文本形式。

导出后的效果为 <code>'11111111111111</code>

<h2>网上的方案 （ PHPExcel 旧版的 ）</h2>

<ul>
<li><ol>
<li>在数据前后加上 <code>\t</code> 跟 <code>'</code> 差不多</li>
</ol></li>
<li><ol start="2">
<li>$objActSheet->setCellValueExplicit('A1', '330602198804224688', PHPExcel_Cell_DataType::TYPE_STRING);</li>
</ol></li>
<li><ol start="3">
<li>$objActSheet->setCellValue('A1', ' '.'330602198804224688');</li>
</ol></li>
</ul>

<h2>PhpSpreadsheet 解决</h2>

<blockquote>
  当然是除了拼接字符串的方案了！ 以下划重点 要考！
</blockquote>

PhpSpreadsheet也有它的前驱者PHPExcel一样的方式，可以通过setCellValueExplicit指定方案。

所以将原来的程序改造成以下

<pre><code class="line-numbers">    private $mustStringArray = [];

    /**
     * 将列强制设置成文本，避免长文本出现转科学计数法
     * @param array $array
     */
    function setMustString(Array $array)
    {
        $this-&gt;mustStringArray = $array;
    }

    /**
     * 导出表格
     * @todo 弹窗导出表格
     * @param $data array 数组 可选:filename文件名,data数据(二维数组),
     * @return bool
     * @throws \PhpOffice\PhpSpreadsheet\Exception
     * @throws \PhpOffice\PhpSpreadsheet\Writer\Exception
     */
    public function down($data)
    {
        if (empty($data)) return false;

        $filename = !empty($data['filename']) ? $data['filename'] . ".xlsx" : date('Y-m-d H:i:s') . ".xlsx";

        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="' . $filename . '"');
        header('Cache-Control: max-age=0');

        $spreadsheet = new Spreadsheet();
        $sheet       = $spreadsheet-&gt;getActiveSheet();

        $lieCount = count($data['data'][0]);
        for($i=65;$i&lt; (65 +$lieCount);$i++){
            $sheet-&gt;getColumnDimension(strtoupper(chr($i)))-&gt;setAutoSize(true);
        }

        // 以下代码基于fromArray改造
        // 开始列和开始行数，默认全部
        $startColumn = 'A';
        $startRow = '1';

        foreach ($data['data'] as $rowData) {
            $currentColumn = $startColumn;
            foreach ($rowData as $cellValue) {
                    if ($cellValue !== null) {
                        if (in_array($currentColumn, $this-&gt;mustStringArray)){
                            $sheet-&gt;getCell($currentColumn . $startRow)-&gt;setValueExplicit($cellValue,'s');
                        }else{
                            $sheet-&gt;getCell($currentColumn . $startRow)-&gt;setValue($cellValue);
                        }
                    }
                ++$currentColumn;
            }
            ++$startRow;
        }

        $writer = new Xlsx($spreadsheet);
        $writer-&gt;save('php://output');
    }
</code></pre>

<h2>关键代码</h2>

<pre><code class="line-numbers">$sheet-&gt;getCell($currentColumn . $startRow)-&gt;setValueExplicit($cellValue,'s');
</code></pre>

第二个参数其实也是要传入一个类的静态变量，然后我追踪了它的代码，直接将值给写进去了~

有兴趣的同学可以查看这个类文件 <code>PhpOffice\PhpSpreadsheet\Cell\DataType</code>  里面还有其他几个类型的常量列表

<pre><code class="line-numbers">// Data types
const TYPE_STRING2 = 'str';
const TYPE_STRING = 's';
const TYPE_FORMULA = 'f';
const TYPE_NUMERIC = 'n';
const TYPE_BOOL = 'b';
const TYPE_NULL = 'null';
const TYPE_INLINE = 'inlineStr';
const TYPE_ERROR = 'e';
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:19:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:19:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:19:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:19:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[phpspreadsheet%e5%af%bc%e5%87%baexcel%e8%a1%a8%e6%a0%bc%ef%bc%8c%e9%95%bf%e6%95%b0%e5%ad%97%e8%87%aa%e5%8a%a8%e8%bd%ac%e7%a7%91%e5%ad%a6%e8%ae%a1%e6%95%b0%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1687]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[手把手教你写一个composer包]]></title>
		<link>https://blog.siammm.cn/archives/144</link>
		<pubDate>Fri, 30 Aug 2019 02:20:29 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>什么是composer</h2>

<code>Composer</code> 是一个命令行工具，它的作用就是帮我们的项目<code>管理所依赖的开发包</code>，属于<code>依赖包管理工具</code>。

<h2>什么是依赖包管理工具</h2>

由于程序届的《开源运动》，我们可以在社区找到很多别人提供的工具，也可以向社区贡献我们的代码。

在github还没有兴起的年代，我们是需要到工具的官网下载代码，比如jquery。然后放到我们自己的项目目录里，再在我们的页面中使用。

但是...当一个网站依赖的包越来越多，我们会发现这是一件非常麻烦的事情：

<ul>
<li>安装新包，代码目录管理等问题</li>
<li>升级依赖包，只能手动替换文件</li>
<li>安装过程发现某个包需要依赖于另一个包，那我们又要开始安装前面的包...</li>
<li>...</li>
</ul>

哪怕是每个开源包都有自己的官网，也还是需要用户去下载安装。

即使是有一个类似<code>github</code>的大仓库，可以存放所有的项目，实现一站下载。

但不同依赖包之间的关系也还是需要手动维持，包与包之间的关系有可能是相互依赖，也可能是冲突的。

<blockquote>
  比如A包需要的PHP版本是小于7的，而B包需要的PHP版本是大于等于7的，那么你安装下来就是有冲突的，可能你在使用之前都没有注意环境的要求，直到遇到各种坑....
</blockquote>

于是就有<code>依赖包管理工具</code>的诞生了，如前端使用的<code>npm</code>，java使用的<code>maven</code>，安卓的<code>Gradle</code>等等。在PHP中我们使用的工具叫<code>Composer</code>。

当我们需要加载一个新包的时候，我们只需要一条命令，工具就会自动构建安装，并且在安装之前如果检测到环境或者需要依赖其他包，管理工具也会做出相应的处理，比如提示终止、自动安装依赖包。

当我们需要更新包的时候，我们也只需要一条命令，就可以实现工具包的升级，在这过程也依然会检测新版本包需要的环境和依赖等。

所以说，<code>依赖包管理工具</code> 为我们在管理依赖包的工作上带来了极大的便利。

<h2>安装Composer</h2>

首先我们需要把composer下载到本地，并且执行安装。在这过程中会检测php的的参数设置，如果某些参数未正确设置则会给出警告。

分别运行以下三条命令

<pre><code class="line-numbers">php -r "copy('https://install.phpcomposer.com/installer', 'composer-setup.php');"
</code></pre>

<pre><code class="line-numbers">php composer-setup.php
</code></pre>

<pre><code class="line-numbers">php -r "unlink('composer-setup.php');"
</code></pre>

<h4>局部使用</h4>

如果是局部使用，我们到这里就可以了，只需要把下载安装下来的<code>composer.phar</code>复制到你的项目根目录，并且执行<code>php composer.phar</code>就可以看到提示的内容啦~

<h4>全局安装</h4>

如果想要在任意的项目目录都可以执行使用的话，我们需要把composer包设置一个系统环境变量。

<strong>Mac或者linux</strong>
把安装包移动到<code>/usr/local/bin/</code>目录

<pre><code class="line-numbers">sudo mv composer.phar /usr/local/bin/composer
</code></pre>

<strong>windows</strong>

<ul>
<li>首先确保你的php已经在环境变量中（也就是在任意目录打开cmd都可以执行php命令）</li>
<li>把composer.phar复制到以上说的php目录中，跟<code>php.exe</code>同个级别</li>
<li>新建一个<code>composer.bat</code>文件，写以下内容并保存，该文件提供composer命令入口。</li>
</ul>

<pre><code class="line-numbers">@php "%~dp0composer.phar" %*
</code></pre>

然后就可以在项目目录里打开cmd 并执行<code>composer --version</code>检测看看安装是否成功了！

<h2>写一个属于自己的composer包</h2>

前面我们已经介绍了依赖包管理工具的便利，许许多多的先辈在开源工具的时候往往都会上传到<code>github</code>或者制作成<code>composer包</code>。

<blockquote>
  如果传到github，可以解决下载问题，但是与其他包的依赖关系却得不到自动处理，一般用于开源整个项目。
</blockquote>

.

<blockquote>
  composer包则适合在需要与其他依赖包配合的情况下使用。
</blockquote>

那么我们下面就来写一个自己的composer包吧，

首先我们创建一个空的目录，并且运行以下命令初始化一个空白的composer包

<pre><code class="line-numbers">composer init
</code></pre>

可以在命令窗口看到有返回提示；

<strong>需要输入包名</strong>

<pre><code class="line-numbers">This command will guide you through creating your composer.json config.`
Package name (&lt;vendor&gt;/&lt;name&gt;) :
</code></pre>

我这里写的是<code>yancoo.cn/test</code>，回车

<strong>需要输入描述</strong>

<pre><code class="line-numbers">Description []:
</code></pre>

包的描述内容

<strong>需要输入作者</strong>

<pre><code class="line-numbers">Author [宣言 &lt;59419979@qq.com&gt;, n to skip]:
</code></pre>

该选项如果有默认值 可以直接回车

<strong>需要输入最低稳定版本</strong>

<pre><code class="line-numbers">Minimum Stability []:
</code></pre>

该选项有可选值：stable, RC, beta, alpha, dev  一般填dev

<strong>需要输入包类型</strong>

<pre><code class="line-numbers">Package Type (e.g. library, project, metapackage, composer-plugin) []:
</code></pre>

可选项在提示中已经有了，我们一般选<code>library</code>填<code>l</code>即可

<strong>需要输入开源协议</strong>

<pre><code class="line-numbers">License []:
</code></pre>

根据自己情况填写，我们填<code>Apache</code>

<strong>设置包需要依赖的其他环境或者包</strong>

<pre><code class="line-numbers"><br />Define your dependencies.

Would you like to define your dependencies (require) interactively [yes]?
</code></pre>

如果需要设置依赖环境或者其他包 则输入yes回车，会让你搜索，我们这里给包设置php版本必须大于5.6，所以搜索php。

<pre><code class="line-numbers">Enter the version constraint to require (or leave blank to use the latest version):
</code></pre>

输入最低要求版本号  >=5.6.0

<a href="#" title="composer初始化"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer_01.png" alt="composer初始化" title="composer初始化" /></a>

如果需要设置多个环境要求，则重复搜索填写即可，如果不需要了，则在<code>Search for a package:</code>不填写内容，直接<code>回车</code>即可

接下来设置依赖包

<pre><code class="line-numbers">Would you like to define your dev dependencies (require-dev) interactively [yes]?
</code></pre>

我们不需要 直接回车回车。

<pre><code class="line-numbers">{
    "name": "yancoo.cn/test",
    "description": "This is a test package,form yancoo.cn,author is siam.",
    "type": "l",
    "require": {
        "php": "&gt;=5.6.0"
    },
    "license": "Apache",
    "authors": [
        {
            "name": "宣言",
            "email": "59419979@qq.com"
        }
    ],
    "minimum-stability": "dev"
}

Do you confirm generation [yes]?
</code></pre>

确认信息，yes 回车 初始化完成

Do you confirm generation [yes]? yes
Would you like to install dependencies now [yes]? yes

安装完成，可以看到我们的目录生成了如下结构。

<a href="#" title="composer目录"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer_02.png" alt="composer目录" title="composer目录" /></a>

<blockquote>
  <code>vendor</code>是composer存放包的地址，所有的包都存放在该路径中统一管理，并且composer提供了命名空间自动加载的功能，我们在使用过程中只需要引入composer的统一入口文件即可
</blockquote>

<pre><code class="language-php line-numbers">require "vendor/autoload.php";
</code></pre>

但是我们也需要在包的配置文件中写上需要自动加载哪个目录才有效哈！

编辑composer.json文件

<a href="#" title="composer的dump-autoload"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer_03.png" alt="composer的dump-autoload" title="composer的dump-autoload" /></a>

这里的路径需要根据你自己的来定，也可以参考以上写法即可。

写完之后需要运行一下命令行<code>composer dump-autoload</code>更新composer的命名空间与文件夹映射关系。

<blockquote>
  上一步骤非常重要 漏了就不正常执行了。
</blockquote>

然后我们创建<code>src</code>文件夹，再创建<code>siam</code>文件夹，在里面创建<code>Test.php</code>文件
写上命名空间 Siam; 根据psr-4规范，类名要与文件名相同。

<pre><code class="language-php line-numbers">&lt;?php
//Test.php文件
namespace Siam;

class Test
{
    function test()
    {
        echo "Form Test -&gt; test()";
    }
}
</code></pre>

再在最外层写下index.php测试文件，正确做法是创建demo文件夹 然后再写测试文件。

<pre><code class="line-numbers">&lt;?php
require "vendor/autoload.php";

$Test = new Siam\Test();
$Test-&gt;test();
</code></pre>

于是我们现在的文件目录结构如下，运行index.php正确得到内容<code>Form Test -&gt; test()</code>

<a href="#" title="demo目录结构"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer_04.png" alt="demo目录结构" title="demo目录结构" /></a>

可以根据你自己的想法来写类，只需要注意命名空间的层级与文件夹层级相同，类名与文件名相同即可自动加载。

<h2>上传composer包</h2>

我们需要把包上传到仓库中，别人才可以通过composer命令安装

我们需要先把包上传到github中，再把github仓库地址复制到composer官方仓库提交，composer就会自动拉取你的包并且提供给别人下载安装了！
<br>

<h3>首先在github上创建仓库</h3>

<a href="#" title="创建仓库"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer_05.png" alt="创建仓库" title="创建仓库" /></a>
<br>
<a href="#" title="git仓库"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer06.png" alt="git仓库" title="git仓库" /></a>
<br>

<h3>在你本地电脑上运行命令，将我们刚刚创建的示例包文件与github仓库关联起来，并推送上去。</h3>

<h3>推送成功之后，复制仓库的地址到composer官方提交。</h3>

<a href="#" title="提交comopser"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer07.png" alt="提交comopser" title="提交comopser" /></a>

<br>

<h3>composer的官方仓库是<code>https://packagist.org/</code></h3>

我们打开，并且注册一个账号。然后点击右上角的submit。把地址填写进去即可。

<a href="#" title="提交comopser"><img src="http://blog.siammm.cn/wp-content/uploads/images/201904/composer08.png" alt="提交comopser" title="提交comopser" /></a>

到这里，我们的github仓库与packagist已经建立了关联，但是这个使用还是用不了的，因为我们还没有发布正式版本！

需要在git上打标签，才认为我们发布了一个新的版本，packagist才会去拉取并且提供给别人安装。

git打标签需要运行以下命令

<pre><code class="line-numbers">git tag -a v1.0.1 -m "第一个版本"
git push origin v1.0.1
</code></pre>

然后就在线上仓库打标签成功了，此时运行composer安装也正常了
在新的一个空白目录中运行

<pre><code class="line-numbers">composer require yancoo.cn/test    是我们初始化填写的包名！
</code></pre>

因为我们在开发composer包的目录，跟在实际项目中安装后的有一些不一样。 所以记得自己新建测试文件，载入composer的自动加载文件然后再测试哦

<blockquote>
  我们开发的包，只是项目所有包的其中之一，还有很多其他包，所以目录结构不一样
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[php composer,类库包]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:20:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:20:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-11-04 19:38:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-11-04 11:38:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%86%99%e4%b8%80%e4%b8%aacomposer%e5%8c%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="composer"><![CDATA[Composer]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1060]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>760</wp:comment_id>
			<wp:comment_author><![CDATA[sina的迷弟]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[2494911084@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.45.78.80]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-10-15 10:43:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-10-15 02:43:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[牛逼]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[数据分表分库的基本思路]]></title>
		<link>https://blog.siammm.cn/archives/145</link>
		<pubDate>Fri, 30 Aug 2019 02:21:55 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>什么情况需要切分？</h1>

当一个数据库被创建之后，随着时间的推移和业务量的增加，数据库中的表以及表中的数据量都会越来越多，就有可能会出现两种弊端：
（1）数据库的存储资源是有限的，其负载能力也是有限的，数据的大量积累肯定会导致其处理数据的能力下降；
（2）数据量越多，那么对数据的增删改查等操作的开销也会越来越大；
所以，当出现如上两种情况，分库分表势在必行。

<h1>两种切分方式</h1>

<h3>垂直切分</h3>

举例场景：表的记录并不多，但是字段却很长，表占用空间很大，检索表的时候需要执行大量的IO，严重降低了性能。这时需要把大的字段拆分到另一个表，并且该表与原表是一对一的关系。

学生答题表 t  结构如下

<table>
<thead>
<tr>
  <th>列名</th>
  <th>注释</th>
</tr>
</thead>
<tbody>
<tr>
  <td>id</td>
  <td>答题表id</td>
</tr>
<tr>
  <td>name</td>
  <td>学生名</td>
</tr>
<tr>
  <td>fraction</td>
  <td>得分</td>
</tr>
<tr>
  <td>answer</td>
  <td>答案</td>
</tr>
<tr>
  <td>...</td>
  <td>...</td>
</tr>
</tbody>
</table>

其中answer是以特定格式来储存的字符 如： A|B|C|C|C|D|D|D|A|B|B|填空一|填空二|其他算数题....

对于常用的列表来说，一般只查看姓名和总分数，对于具体的答案等字段很少需要查看，所以可以考虑把答案拆分成一张独立的表。
通过id与t表建立一对一的关系，同样将回答单独放到一张表中。这样我们插叙t中的分数的时候就不会扫描回答等不常用字段了。

若有些场景需要所有字段都查询出，可以使用join或者分次查询再合并结果。

再以一个实例代码示范
将订单拆分成订单主要信息表、订单附加信息表，两种信息都需要的情况再join，如果是单条信息，则也可以单独用id查询附加信息等。

<pre><code class="line-numbers">&lt;?php
/**
 * 订单分库 - 垂直分割
 * 将一笔订单的数据拆分储存在多个表里，查询的时候使用join联查出来
 * User: Siam
 * Date: 2018/11/25 0025
 * Time: 下午 10:04
 */

// 开始结束时间
$beginTime = '2018-09-01 00:00:00';
$endTime   = '2018-11-25 23:52:24';

$tableName = 'order_vertical as o';
$joinTableName = 'order_vertical_attach as oa';

// 联查
$sql = "select o.*,oa.* from $tableName JOIN $joinTableName where o.id = oa.o_id AND o.order_time BETWEEN '$beginTime' AND '$endTime'";

echo $sql;

// select o.*,oa.* from order_vertical as o JOIN order_vertical_attach as oa where o.order_time BETWEEN '2018-09-01 00:00:00' AND '2018-11-25 21:52:24'
</code></pre>

<h3>水平切分</h3>

当表的列并不复杂，数量却很多，如用户表。假设有一千万条用户信息，如果只有一张表，每个用户登录的时候数据库都要从这一千万中查找，会很慢很慢。哪怕你建立了索引。

但如果将表以一定规则分割成10个表，则每个表只有百万条数据，就小了很多了，表命名一般可以为table_1,table_2等等

水平切分的规则常见有：id取模、添加时间等

id取模：可以将用户的id%100(这个数是你想要分成多少个表)，那么会得到0-99的数，查询表的时候，将表名qq跟取模的数连接起来，就构建了表名。比如123456789用户，取模的89，那么就到table_89表查询

添加时间：以下用一条代码实例示范

<pre><code class="line-numbers">&lt;?php
/**
 * 订单分库 - 水平分割
 * 将订单表按一定规则(一般是时间)拆分成多个表，根据不同筛选条件调用不同表查询
 * User: Siam
 * Date: 2018/11/25 0025
 * Time: 下午 9:51
 */


/**
 * 方案① 时间中线分割，以某个时间点为中线切割
 * 注意：
 * 筛选的时候以结束日期为条件判断该差哪个表，在页面上需要做提示：数据以每一年的数据为区间分割，无法跨区间查询
 * 或者在代码中判断日期区间，然后分别查询，结果合并
 */

// 开始结束时间
$beginTime = '2017-09-01 00:00:00';
$endTime   = '2018-11-25 23:59:24';

// 分割的时间中线
$limitTime_1 = '2018-01-01 00:00:00'; // 10月以前的数据
$limitTime_2 = '2019-01-01 00:00:00'; // 10月1号到11月1号的数据

switch ($endTime) {
    case ($endTime &lt; $limitTime_1):
        $tableName = 'order_2017';
        break;

    case ($endTime &lt; $limitTime_2):
        $tableName = 'order_2018';
        break;

    default:
        $tableName = 'order_2018';
        break;
}


$sql = "select * from $tableName where order_time BETWEEN '$beginTime' AND '$endTime'";

echo $sql;

</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[php mysql,分库分表,大数据,sql慢查询优化]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:21:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:21:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:21:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:21:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e6%8d%ae%e5%88%86%e8%a1%a8%e5%88%86%e5%ba%93%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%80%9d%e8%b7%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1035]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[session在浏览器关闭时进行何处理?以及回收机制]]></title>
		<link>https://blog.siammm.cn/archives/146</link>
		<pubDate>Fri, 30 Aug 2019 02:22:44 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[Session会话机制被广泛应用在JSP、ASP、PHP等语言中。一般用来储存登陆状态或者其他的一些需要验证权限的状态。
以下类似代码在每个系统里应该都会存在

<pre><code class="line-numbers">&lt;?php
$userAccount = $_POST['user_account'];
$passWord    = $_POST['password'];

# 这里一般查询数据库验证用户是否存在、密码是否正常等
$vif = true;
if ( $vif ) {
    $_SESSION = $userInfo;
    echo '登陆成功';
} else{
    echo '登陆失败';
}
</code></pre>

接着就可以在浏览器中浏览需要登陆状态的页面了。

那么，当我们关闭浏览器的时候，服务器上的session都进行了什么处理？

<h1>Session的储存机制</h1>

我们先来看一下session的创建储存。

SESSION的实现中采用COOKIE技术。
SESSION会在客户端保存一个包含session_id(SESSION编号)的COOKIE；
在服务器端保存其他session变量，比如session_name等等。

当用户请求服务器时也把session_id一起发送到服务器，通过 session_id提取所保存在服务器端的变量，就能识别用户是谁了。

所以当我们创建一个session会话时候进行了如下的处理：

<ul>
<li>向服务器端写入session内容(一般默认是文件格式,文件储存位置可以通过配置文件修改) 比如我们上面储存的 <code>$userInfo</code> 变量信息，并且产生了一个 <code>SessionId</code> 编号。</li>
<li>将 <code>SessionId</code> 编号通过响应内容顺带返回给客户端</li>
<li>客户端将 <code>SessionId</code> 编号储存在 <code>Cookies</code> 中。</li>
<li>接下来客户端向该服务器发送的请求将带上 <code>SessionId</code> 编号，服务端便可以通过编号得到用户登录状态和信息。</li>
</ul>

<h1>浏览器关闭</h1>

当浏览器关闭的时候，会 <code>清空Cookies</code> ，这是浏览器对自己软件的操作，但是并不能对服务端的储存文件进行操作，所以这个时候服务端的session文件将继续生存。

当我们关闭浏览器，甚至电脑重启，短时间内服务端的session仍保存着，直到它被回收，这个时候我们通过一些手段模拟sessionid，仍可以继续保持会话进行。（当然你必须在你关闭浏览器之前把sessionid记下来了<del>）</del>

让session失效的原因只有两个：

<blockquote>
  超时，服务器自动回收。可以在配置文件中决定它的生存时间等。
  
  程序主动销毁。比如 <code>$_SESSION = NULL;</code>。
</blockquote>

<h1>gc回收机制</h1>

PHP采用Garbage Collection process(gc)对过期session进行回收。

上面已经讲到可以通过配置文件修改session的生存周期（创建后不进行活动开始计时）

比如我们登陆了一个页面，然后再也没有进行过操作，一直在挂机着，一段时间后将会自动过期退出登陆

所以说每个服务端的session文件都会记录 <code>最后的活动时间</code>，等当前时间已经大于<code>最后活动时间+生存周期</code>，GC机制将会把该session文件清空回收。

那该gc机制是不是一直在监听检测每一个session文件？当然不是了~当访问量过大时，session文件将会很多，不停处理会让服务器造成不小的开销。

gc是按照<code>一定概率</code>启动的，

三个与PHP session过期相关的参数(php.ini中)：

<blockquote>
  session.gc_probability = 1
  session.gc_divisor = 1000
  session.gc_maxlifetime = 1440
</blockquote>

gc启动概率 = gc_probability / gc_divisor = 0.1%

意思是每次session文件更新时，便会有 0.1% 的几率进行检测回收过期的session。但是如果访问量很小，可能会造成很多session文件过期了，但是仍然没有进行检测回收，这个时候我们就要通过修改上面的三个参数，来让GC启动的几率变大，让session过期的检测会更准确。]]></content:encoded>
		<excerpt:encoded><![CDATA[php session,php gc回收]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:22:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:22:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:22:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:22:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[session%e5%9c%a8%e6%b5%8f%e8%a7%88%e5%99%a8%e5%85%b3%e9%97%ad%e6%97%b6%e8%bf%9b%e8%a1%8c%e4%bd%95%e5%a4%84%e7%90%86%e4%bb%a5%e5%8f%8a%e5%9b%9e%e6%94%b6%e6%9c%ba%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[957]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[无限级子商户的查询优化方法]]></title>
		<link>https://blog.siammm.cn/archives/147</link>
		<pubDate>Fri, 30 Aug 2019 02:23:26 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[无限级平台必须解决的一个问题，分享一下我在网上学习到的方法。

假设平台有这样的上下级关系<img src="/ueditor/php/upload/image/20180627/1530089465307111.png" alt="image.png" title="1530089465307111.png" />

A 有 2 个直接下级B、C，    B有2个直接下级D、E，    C有2个直接下级F、G

我们正常的做法是使用递归这样操作：先查询出所有上级为A的子商户，再查询所有上级为上一个查询结果的子商户。如第一步查询出B、C，第二步查询所有上级为B、C的商户（mysql的 IN 范围条件实现）。

这样的递归查询耗时是非常长的。(个人觉得具体消耗在连接mysql数据库的次数上)

现在我们的做法是这样的：一次性查询出所有的商户信息（id、上级id），并且按正序排列（添加时间，因为要有第三级的商户必须先有第二级商户，按正序排列才可以正常得到结果）

<pre><code class="line-numbers">&lt;?php
function getTeamMember($allMembers, $id){
    $teams        = [];         // 在$id下的所有商户id数组，最终的返回结果
    $teams[$id]   = $id;     // 把我们要查询的这个id先添加在这个数组里，设置的值任意，只要让这个键值存在即可。
    
    // 遍历每一个会员信息
    foreach($allMembers as $key =&gt; $v){
        // 判断遍历到的这个会员上级是否在团队数组里 （判断键值）
        if( isset( $teams[$v['p_id'] ] ) ){
            // 该会员的上级属于团队 追加进团队
            $teams[ $v['id'] ] = 123;  // 也是任意值 存在即可
        }
        // 遍历完就把这个会员的信息删除~不需要储存了
        unset($allMembers[$key]);
    }
    // 把我们第二步传递进来的自身的$id删除掉 也就是第一个
    unset($teams[$id]);
    // 返回数据
    return array_keys($teams);
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[php无限级商户系统]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:23:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:23:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 11:57:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 03:57:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%a0%e9%99%90%e7%ba%a7%e5%ad%90%e5%95%86%e6%88%b7%e7%9a%84%e6%9f%a5%e8%af%a2%e4%bc%98%e5%8c%96%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[835]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP生成不重复的订单号]]></title>
		<link>https://blog.siammm.cn/archives/148</link>
		<pubDate>Fri, 30 Aug 2019 02:24:32 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[使用场景：商城、微信支付等生成订单号需求

<hr />

<blockquote>
  方法一
</blockquote>

比较常见的一种简单方法

使用date()函数，获取当前日期的数字，再配合rand()函数，生成几位随机数。便是一个简单的12位订单号了

<pre><code class="line-numbers">&lt;?php
function getOrderNum(){
    $date = date('Ymd');
    $rand = rand(0,9).rand(0,9).rand(0,9).rand(0,9);
    return $date.$rand;
}
echo getOrderNum();
</code></pre>

<blockquote>
  方法二
</blockquote>

<pre><code class="line-numbers">&lt;?php
function getOrderNum(){
    $date = date('Ymd');
    $rand = substr(implode(NULL, array_map('ord', str_split(substr(uniqid(), 7, 13), 1))),0,12); 
    return $date.$rand;
}
echo getOrderNum();
</code></pre>

uniqid()函数基于以微秒计的当前时间，生成一个唯一的 ID。当时前面的7位是不会经常变动的(应该是秒数，一秒一次)

所以我们使用substr()函数，截取字符串，从第8位到13位，接着这里会有一个问题，得到的是数字+字母的随机数，如果你需要的订单号可以包含字母，这里不需要转换也可以。

这里为了纯数字的订单号，所以要继续进行处理。

使用str_split($string, 1)函数，将字符串，以一个字符的长度分割成变量。也就是一个字符一个变量。

array_map()函数是将数组遍历执行一次函数，这里使用的是ord函数，返回字符所在的ASCII码，是一个数字。

所有的字符都已经转成了数字，但是长度会波动(因为有写ASCII码可能是1.可能是81)

所以我们还要使用一个字符截取函数，implode()，截取0~12位的字符。合适范围(5~12)，最大12

这里是完全随机的字符。而且是基于时间微秒来生成的，重复的可能性非常非常低，之所以加上时间日期，是为了看起来更加统一。

20180131559751565757

20180131985210250485

<hr />

2018-2-1更新

<blockquote>
  方法三
</blockquote>

<pre><code class="line-numbers">function getOrderNum(){
    $yCode = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J');
    $orderSn = $yCode[intval(date('Y')) - 2017] . strtoupper(dechex(date('m'))) . date('d') . substr(time(), -5) . substr(microtime(), 2, 6) . sprintf('%02d', rand(0, 99));
    return $orderSn;
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[工具记录,笔记,工作技巧.php]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:24:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:24:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:24:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:24:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e7%94%9f%e6%88%90%e4%b8%8d%e9%87%8d%e5%a4%8d%e7%9a%84%e8%ae%a2%e5%8d%95%e5%8f%b7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1497]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[沈唁志]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[52o@qq52o.cn]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[119.188.116.17]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-09 18:40:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-09 10:40:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[还有个骚方法。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[TP5.0.20 - TP5更改网站目录为/public 后运行出错解决]]></title>
		<link>https://blog.siammm.cn/archives/149</link>
		<pubDate>Fri, 30 Aug 2019 02:26:00 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[今天在部署TP5的时候，把网站根目录指向到public目录下，运行后产生以下错误

<pre><code class="line-numbers">Warning: require(): open_basedir restriction in effect. File(/www/wwwroot/xx/thinkphp/start.php) is not within the allowed path(s): (/www/wwwroot/xx/public/:/tmp/:/proc/) in /www/wwwroot/xx/public/index.php on line 18

Warning: require(/www/wwwroot/xx/thinkphp/start.php): failed to open stream: Operation not permitted in /www/wwwroot/xx/public/index.php on line 18

Fatal error: require(): Failed opening required '/www/wwwroot/xx/public/../thinkphp/start.php' (include_path='.:/www/server/php/70/lib/php') in /www/wwwroot/xx/public/index.php on line 18
</code></pre>

就是require文件的时候出错了，并且带上了文件的路径，一开始以为是路径出错的，于是在index.php中尝试修改 引入的文件路径，发现index.php并没有问题。

百度发现：open_basedir 的问题  需要在php.ini中修改open_basedir你的项目路径，或者在nginx中也可以定义。

但是我的两个配置文件中都没有该配置参数，于是继续找问题。后来想到服务器使用了宝塔面板来管理的，指定子目录也是在宝塔面板中进行。

于是到宝塔面板的页面，发现有一个   防跨站攻击(open_basedir)    的选项 把该选项关闭即可。

原因如下：open_basedir 将PHP所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开。

本指令不受安全模式打开或关闭的影响。]]></content:encoded>
		<excerpt:encoded><![CDATA[tp5,伪静态,报错,bug,修复]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:26:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:26:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:26:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:26:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tp5-0-20-tp5%e6%9b%b4%e6%94%b9%e7%bd%91%e7%ab%99%e7%9b%ae%e5%bd%95%e4%b8%ba-public-%e5%90%8e%e8%bf%90%e8%a1%8c%e5%87%ba%e9%94%99%e8%a7%a3%e5%86%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1558]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>745</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-11 01:57:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-10 17:57:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://vscialisv.com/" / rel="nofollow ugc">how much does cialis cost</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[微信退款结果回调解密,低版本以及7.1以上版本的使用方法]]></title>
		<link>https://blog.siammm.cn/archives/150</link>
		<pubDate>Fri, 30 Aug 2019 02:38:21 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[微信的退款结果回调，数据是加密的。我们需要解密之后才能得到订单信息和结果信息，进行处理。

再次吐槽微信，官方demo都藏得贼吉尔深，一般人没有点狗屎运都找不到。

<h1>PHP5~PHP7.0常见解密方式</h1>

说不多说上代码(其实在以前我这一种已经写过文章了)。

传送门 --> http://www.yancoo.cn/index/article/show/id/33.html

<pre><code class="line-numbers">    /**
     * 退款解密
     * @param array $data
     * @return bool|string
     */
    public function decryption($data = array())
    {
        $encryption = base64_decode($data['req_info']);
        $key = md5($data['key']);
        $str = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $encryption, MCRYPT_MODE_ECB);
        $block = mcrypt_get_block_size('rijndael_128', 'ecb');
        $pad = ord($str[($len = strlen($str)) - 1]);
        $len = strlen($str);
        $pad = ord($str[$len - 1]);
        return substr($str, 0, strlen($str) - $pad);
    }
</code></pre>

使用方式也很简单

<pre><code class="line-numbers">$data = [
    'req_info' =&gt; $xml['req_info'], // 退款回调xml中的req_info
    'key'      =&gt; $key,             // 商户的key
];
var_dump($work-&gt;decryption($data));
</code></pre>

<h1>PHP7.1+的解密方式</h1>

在PHP7.1开始，mcrypt_decrypt系列函数已经被弃用，并且在PHP7.2的版本从核心扩展库中移除（当然还是可以自己编译进去的）。

在PHP7.1使用以上方式解密会得到如下报错（如果你开启了PHP报错提示的话）。

<pre><code class="line-numbers">Function mcrypt_decrypt() is deprecated in ...
</code></pre>

如果你是PHP7.1，那么也有不推荐的解决方案：提高报错等级、强制抑制错误提示。也就可以继续使用以上方案去解密。

如果是PHP7.2，该系列函数已经被移除核心库了，并且在以后也得不到支持。推荐使用openssl系列解密。

<pre><code class="line-numbers">    /**
     * 退款解密(7.1+版本推荐使用)
     * @param array $data
     * @return bool|string
     */
    public function decryption($data = array())
    {
        $encryption = base64_decode($data['req_info']);
        $key = md5($data['key']);
        $return = openssl_decrypt($encryption , 'AES-256-ECB', $key, OPENSSL_RAW_DATA);
        return $return;
    }
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:38:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:38:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:38:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:38:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e4%bf%a1%e9%80%80%e6%ac%be%e7%bb%93%e6%9e%9c%e5%9b%9e%e8%b0%83%e8%a7%a3%e5%af%86%e4%bd%8e%e7%89%88%e6%9c%ac%e4%bb%a5%e5%8f%8a7-1%e4%bb%a5%e4%b8%8a%e7%89%88%e6%9c%ac%e7%9a%84%e4%bd%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e4%bf%a1"><![CDATA[微信]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[151]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1095]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Openssl -  微信支付证书pfx分解成pem]]></title>
		<link>https://blog.siammm.cn/archives/152</link>
		<pubDate>Fri, 30 Aug 2019 02:39:12 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[事件起因：做香港本地微信支付（香港公司收取香港用户钱包）申请的商户只提供了cert.pem和一个pfx的文件。程序使用pem需要cert和key两个文件，所以需要从pfx文件中提取cert和key文件。

下载OpenSSL：http://gnuwin32.sourceforge.net/packages/openssl.htm

解压Binaries.zip中openssl.exe，可单独运行

打开CMD窗口 进入OpenSSL安装目录 输入命令 ：openssl

进入openssl模式，把xxx.pfx文件放到openssl安装目录中，开始转换文件

提取cert证书：

<pre><code class="line-numbers">pkcs12 -in xxxxx.pfx -clcerts -nokeys -out cert.pem
</code></pre>

提取证书key：

<pre><code class="line-numbers">pkcs12 -in xxxxx.pfx -nocerts -out key.pem
</code></pre>

过程中需要输入证书密码 微信证书密码默认是商户号，

提取证书key的时候需要设置新密码，如果不需要设置新密码 则运行：

<pre><code class="line-numbers">pkcs12 -in xxxxx.pfx -nocerts -nodes -out key.pem
</code></pre>

在openssl安装目录里就多了两个新文件了 copy使用即可

附 openssl  pkcs12参数选项：

<h3>用途：</h3>

pkcs12文件工具，能生成和分析pkcs12文件。PKCS#12文件可以被用于多个项目，例如包含Netscape、 MSIE 和 MS Outlook。

<h3>用法：</h3>

openssl pkcs12 [-export] [-chain] [-inkey filename] [-certfile filename] [-CApath arg] [-CAfile arg] <br />
[-name name] [-caname name] [-in filename] [-out filename] [-noout] [-nomacver] [-nocerts] <br />
[-clcerts] [-cacerts] [-nokeys] [-info] [-noiter] [-maciter] [-nomaciter] [-nomac] [-twopass] [-descert] <br />
[-certpbe alg] [-keypbe alg] [-macalg digest] [-keyex] [-keysig] [-password arg] [-passin arg] [-passout arg] <br />
[-rand file(s)] [-LMK] [-CSP name][-engine e] [-des] [-des3] [-aes128] [-aes192] [-aes256] [-idea] <br />
[-camellia128] [-camellia192] [-camellia256] [-nodes]

<h3>选项说明：</h3>

PKCS#12文件在创建或分析的时候要依赖有一些选项。默认的是分析一个PKCS#12文件。一个PKCS#12文件可以用B<-export>选项来创建。

<h3>分析选项：</h3>

-in filename：指定私钥和证书读取的文件，默认为标准输入。必须为PEM格式。

-out filename：指定输出的pkcs12文件，默认为标准输出。

-password arg：指定导入导出口令来源。

-passin arg：输入文件保护口令来源。

-passout arg：指定所有输出私钥保护口令来源。

-noout：不打印参数编码的版本信息。

-clcerts：仅仅输出客户端证书，不输出CA证书。

-cacerts：仅仅输出CA证书，不输出客户端证书。

-nocerts：不输出任何证书。

-nokeys：不输出任何私钥信息值。

-info：输出PKCS#12文件结构的附加信息值。例如用的算法信息以及迭代次数。

-des：在输出之前用DES算法加密私钥值。

-des3：在输出之前用3DES算法加密私钥值。此项为默认。

-idea：在输出之前用IDEA算法加密私钥值。

-aes128、-aes192、-aes256：在输出之前用AES算法加密私钥值。

-camellia128、-camellia192、-camellia256：在输出之前用camellia算法加密私钥值。

-nodes：一直对私钥不加密。

-nomacver：读取文件时不验证MAC值的完整性。

-twopass：需要用户分别指定MAC口令和加密口令。

文件创建选项：

-export：这个选项指定了一个PKCS#12文件将会被创建。

-in filename：指定私钥和证书读取的文件，默认为标准输入。必须为PEM格式。

-out filename：指定输出的pkcs12文件，默认为标准输出。

-inkey filename：指定私钥文件的位置。如果没有被指定，私钥必须在-in filename中指定。

-name name：指定证书以及私钥的友好名字。当用软件导入这个文件时，这个名字将被显示出来。

-certfilefilename：添加filename中所有的证书信息值。

-caname name：指定其它证书的友好名字。这个选项可以被用于多次。

-password arg：指定导入导出口令来源。

-passin arg：输入文件保护口令来源。

-passout arg：指定所有输出私钥保护口令来源。

-chain：如果这个选项被提出，则添加用户证书的证书链。标准CA中心用它来搜索。如果搜索失败，则是一个重大的错误。

-descert：用3DES对PKCS12进行加密，这样杨浦可能会导致PKCS12文件被一些“export grade”软件不能够读取。默认的是用3DES对私钥文件进行加密，用40位的RC2对证书公钥文件进行加密。

-certpbealg：该选项允许指定证书的加密算法。任何PKCS#5 v1.5或 PKCS#12 PBE类型的算法都可以被使用。默认使用的是40位的RC2。

-keypbe alg：该选项允许指定证书私钥的加密算法。任何PKCS#5 v1.5或 PKCS#12 PBE类型的算法都可以被使用。默认使用的是3DES。

-keyex：设置私钥仅仅被用于密钥交换。

-keysig：设置私钥仅仅被用于数字签名。

-macalg digest：指定MAC摘要算法。如果没有被指定，则默认使用sha1。

-nomaciter、-noiter：这个选项影响MAC值和密钥算法的迭代次数。除非你希望产生的文件能与MSIE 4.0相兼容，可以把这两个选项丢弃一边。

-maciter：加强完整性保护，多次计算MAC。

-nomac：不去规定MAC值的完整性。

-rand file(s)：指定随机数种子文件，多个文件间用分隔符分开，windows用“;”，OpenVMS用“,“，其他系统用“：”。

-CApatharg：指定CA目录。该目录必须是一个标准证书目录：每个CA文件的文件名为XXXX.0，XXXX为其持有者摘要值。

-CAfile arg：指定CA文件。

 -LMK：添加本地的机械属性到私钥中。

-CSP name：微软的CSP的名字。

-engine id：指定硬件引擎。

<h3>注意：</h3>

有一大部分选项将不会使用。对PKCS#12文件来说，仅仅B<-in>和 B<-out>需要被使用。对文件创建来说，B<-export>和 B<-name>使用。

如果B<-clcerts>、B<-cacerts>或 B<-nocerts>没有存在，所有的证书将会被依附到PKCS#12文件将会被输出。没有保证的是提出的第一个证书不一定匹配私钥。某些软件需要一个私钥和证书，来承担在文件中的第一个证书匹配私钥：经常没有这种情况。用B<-clcerts>选项能够解决问题，因为这个选项要输出与私钥文件相匹配的证书。如果CA证书是必需的，用B<-nokeys -cacerts>选项来输出文件，仅仅输出CA证书。

B<-keypbe> 和 B<-certpbe>算法允许明确的私钥加密算法和证书的详细说明。通常的默认是好的，但是偶尔的软件不能够处理经过3DES加密了的私钥。选项B<-keypbe PBE-SHA1-RC2-40>可以被用于减少40字节的RC2私钥加密。一个完整的所有算法的描述包含在B<pkcs8>手册中。

<h3>实例：</h3>

分析一个PKCS#12文件和输出到文件中：

openssl pkcs12 -in file.p12 -out file.pem

仅仅输出客户端证书到文件中：

openssl pkcs12 -in file.p12 -clcerts -out file.pem

不加密私钥文件：

openssl pkcs12 -in file.p12 -out file.pem -nodes

打印PKCS#12格式的信息值：

openssl pkcs12 -in file.p12 -info -noout

生成pkcs12文件，但不包含CA证书：

openssl pkcs12 -export -inkey ocspserverkey.pem -in ocspservercert.pem  -out ocspserverpkcs12.pfx

生成pcs12文件，包含CA证书：

openssl pkcs12 -export -inkey ocspserverkey.pem -in ocspservercert.pem -CAfile demoCA/cacert.pem -chain -out ocsp1.pfx

将pcks12中的信息分离出来，写入文件：

openssl pkcs12 –in ocsp1.pfx -out certandkey.pem

显示pkcs12信息：

openssl pkcs12 –in ocsp1.pfx -info

<h3>BUGS：</h3>

有一些争论是PKCS#12的标准是一个大的BUG。

OpenSSL 0.9.6a以前的版本在PKCS#12的产生过程中有一个bug。在稀有的情况下用一个无效的密钥来加密并产生PKCS#12文件。这样做的结果是一些PKCS#12文件被其它的应用程序（MSIE或Netscape）会触发这个bug。因为他们不会被OpenSSL或相似的OpenSSL在产生PKCS#12文件时不能够被加密。产生的通道相当的小：在256中比1还小。

一方面这个Bug的固定影响是老的无效的加密了的PKCS#12文件不能够被固定的版本所分析。在这种情况下，B<pkcs12>会报告’ the MAC is OK but fail with a decryption error when extracting private keys’错误。

这个问题的解决方法是用老的OpenSSL版本从PKCS#12中来提起私钥文件和证书，用新的版本、提取到的证书、私钥来重新创建PKCS#12文件。例如：

old-openssl -in bad.p12 -out keycerts.pem<br />
openssl -in keycerts.pem -export -name "My PKCS#12 file" -out fixed.p12]]></content:encoded>
		<excerpt:encoded><![CDATA[微信证书,退款证书,分解,pem]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:39:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:39:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:39:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:39:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[openssl-%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98%e8%af%81%e4%b9%a6pfx%e5%88%86%e8%a7%a3%e6%88%90pem]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e4%bf%a1"><![CDATA[微信]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[151]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1077]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[宝塔面板多PHP版本中编译安装升级Swoole]]></title>
		<link>https://blog.siammm.cn/archives/154</link>
		<pubDate>Fri, 30 Aug 2019 02:40:23 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[今天在使用最新版easyswole框架的过程中，需要依赖的swoole版本必须<code>&gt;= 4.2.13</code>，到2019-2-25，宝塔面板能支持安装的swoole版本只有4.2.10，所以就看一下如何自己安装编译swoole扩展吧~

<h4>swoole 下载地址</h4>

<pre><code class="line-numbers">https://github.com/swoole/swoole-src/releases
http://pecl.php.net/package/swoole
http://git.oschina.net/swoole/swoole
</code></pre>

首先我们下载4.2.13版本的包，进入目录。

<pre><code class="line-numbers">cd swoole
</code></pre>

侦测php

<pre><code class="line-numbers">sudo phpize （原文档）
</code></pre>

因为我们安装多PHP版本，所以我们指定一下php的路径

<pre><code class="line-numbers">sudo /www/server/php/72/bin/phpize
</code></pre>

<blockquote>
  phpize是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。当php编译完成后，php的bin目录下会有phpize这个脚本文件。在编译你要添加的扩展模块之前，执行phpize就可以了；
</blockquote>

到了这里会生成<code>configure</code>文件

<pre><code class="line-numbers">sudo ./configure （原文档）
</code></pre>

我们需要指定php的配置文件路径

<pre><code class="line-numbers">sudo ./configure --with-php-config=/www/server/php/72/bin/php-config
</code></pre>

接着就是最后一步了

<pre><code class="line-numbers">make &amp;&amp; make install
</code></pre>

等待编译完成后，查看一下swoole的版本即可

<pre><code class="line-numbers">/www/server/php/72/bin/php --ri swoole | grep Version
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:40:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:40:23]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:40:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:40:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%9d%e5%a1%94%e9%9d%a2%e6%9d%bf%e5%a4%9aphp%e7%89%88%e6%9c%ac%e4%b8%ad%e7%bc%96%e8%af%91%e5%ae%89%e8%a3%85%e5%8d%87%e7%ba%a7swoole]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[83]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1261]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ba3dc0fa58e2a69a3df5c20b0298b33b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4bfc3bff72f19b446d9e513184100110]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[入门 - Docker将nginx容器和php容器关联起来]]></title>
		<link>https://blog.siammm.cn/archives/156</link>
		<pubDate>Fri, 30 Aug 2019 02:42:31 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[概念教程和介绍有一大堆，我就不多说了。主要记录一下操作，方便你我查阅。

首先是在菜鸟教程里看的教程，里面把各种镜像、容器的概念和基本操作都说了。但是每一步都直到怎么测试运行起来。

如：nginx，运行成功了，然后呢？没了。其他环境要怎么弄？

在百度上找教程，看到有人先是开了一个centos镜像的容器，然后在上面跟一个基本服务器一样去yum各种环境，如php、nginx、mysql。

然后再把镜像更新commit，说是环境就搭建好了。方法①

但这样子的话，主机上pull下来的php和nginx又有什么用？（按着菜鸟教程走下来的时候pull的）

于是请教前辈，是按方法①去操作还是php,nginx各开一个容器再去连接方法②，得到了方法②的回复，于是开始了漫长的道路。

<ul>
<li>单容器易于分发、维护。因为它们是独立的，所有的东西都运行在同一个容器中，这点就像是一个虚拟机。但这也意味着，当你要升级其中的某样东西（比如PHP新版本）的时候，需要重新构建整个容器。</li>
<li>多容器可以在添加组件时提供更好的模块化。因为每个容器包含了堆栈的一部分：Web、PHP、MySQL等，这样可以单独扩展每个服务或者添加服务，并且不需要重建所有的东西。</li>
</ul>

需要先把php镜像和nginx镜像pull下来。查看已有镜像

docker images

 先新建一个php容器

<pre><code class="line-numbers">docker run--name php1 -v/home/wwwroot/service_config/php_config:/usr/local/php/etc -v/home/wwwroot/:/home/wwwroot/ -d php:7.0-fpm
</code></pre>

-v/home/wwwroot/service_config/php_config:/usr/local/php/etc这一句搭建可以省略

这是将主机的目录挂载到容器里，也就是让容器可以共享这个目录里的文件。这样子可以在主机灵活地去修改php配置，nginx同理。

坑：如果没有把配置文件挂载出来，会出现配置文件出错，然后容器就无法start了，也无法进入修改，只能删除重新建立一个容器。

接着开启nginx容器

<pre><code class="line-numbers">docker run--name nginx   -v/home/wwwroot/:/home/wwwroot/   -v/home/wwwroot/service_config/nginx_config:/etc/nginx/conf.d   --link php1:php1   -p 80:80   -d nginx
</code></pre>

  同样的两个配置挂载目录，第一个是放项目文件的，第二个是放配置文件的

  然后再link刚刚开启的php容器，名称是php1，端口映射都用的80

  在开启两个容器之前，需要先新建好主机目录，也就是/home/wwwroot/service_config/nginx_config等一列目录

  然后/home/wwwroot/service_config/nginx_config文件夹中有两个文件（这两文件docker官方下载下来的nginx镜像是没有的）： 

<pre><code class="line-numbers">fastcgi_params文件

fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

fastcgi_param QUERY_STRING $query_string;

fastcgi_param REQUEST_METHOD $request_method;

fastcgi_param CONTENT_TYPE $content_type;

fastcgi_param CONTENT_LENGTH $content_length;

fastcgi_param SCRIPT_NAME $fastcgi_script_name;

fastcgi_param REQUEST_URI $request_uri;

fastcgi_param DOCUMENT_URI $document_uri;

fastcgi_param DOCUMENT_ROOT $document_root;

fastcgi_param SERVER_PROTOCOL $server_protocol;

fastcgi_param HTTPS $https if_not_empty;

fastcgi_param GATEWAY_INTERFACE CGI / 1.1;

fastcgi_param SERVER_SOFTWARE nginx / $nginx_version;

fastcgi_param REMOTE_ADDR $remote_addr;

fastcgi_param REMOTE_PORT $remote_port;

fastcgi_param SERVER_ADDR $server_addr;

fastcgi_param SERVER_PORT $server_port;

fastcgi_param SERVER_NAME $server_name;

#PHP only, required

if PHP was built with--enable - force - cgi - redirectfastcgi_param REDIRECT_STATUS 200;
</code></pre>

nginx.conf文件（根据你多少个网站，配置多少个。下面配置若是不懂，请查看相关文档）

<pre><code class="line-numbers">server {

    listen 80;

    server_name www.test.com test.com;

    index index.html index.htm index.php;

    root / home / wwwroot /

        default;#

    error_page 404 / 404.html;

    location~[ ^ /].php(/ | $) {

        try_files $uri = 404;

        fastcgi_pass php1: 9000;#

        极其重要fastcgi_index index.php;

        include / etc / nginx / conf.d / fastcgi_params

    }

    location / nginx_status {

        stub_status on;

        access_log off

    }

    location~.*.(gif | jpg | jpeg | png | bmp | swf) $ {

        expires 30d

    }

    location~.*.(js | css) ? $ {

        expires 12h

    }

    location~/.{deny all}}
</code></pre>

新建完文件后就可以开启容器了，开启后应该就正常了，访问你的服务器ip（默认就是80端口，应该就可以正常访问nginx）

然后在刚刚的主机目录/home/wwwroot/下新建一个目录default （因为在nginx里设置的默认目录，可以自己修改）

然后新建test.php 写入php代码测试运行。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:42:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:42:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:42:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:42:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%a5%e9%97%a8-docker%e5%b0%86nginx%e5%ae%b9%e5%99%a8%e5%92%8cphp%e5%ae%b9%e5%99%a8%e5%85%b3%e8%81%94%e8%b5%b7%e6%9d%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1063]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[入门 - Docker容器数据储存和转移]]></title>
		<link>https://blog.siammm.cn/archives/158</link>
		<pubDate>Fri, 30 Aug 2019 02:43:03 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>容器和层</h1>

容器和镜像之间的主要区别是顶部的可写层。所有对容器添加新的或修改现有数据的内容都存储在该可写层中。当容器被删除时，可写层也被删除。底层镜像保持不变。

同一个镜像可以被创建多个同时运行的容器，相当于最上层的可写层不同而已，Docker版“披上羊皮的狼”。

<h1>容器数据储存</h1>

默认情况下，在容器内创建的所有文件都存储在可写层中。这意味着：

<ul>
<li>当该容器不再运行时，数据不会持久存在，如果另一个进程需要，则可能很难从容器中获取数据。</p></li>
<li><p>容器的可写层紧密耦合到运行容器的主机。无法轻松地将数据移动到其他位置。</p></li>
</ul>

<p>Docker有两个容器选项可以在主机中存储文件，因此即使在容器停止之后文件仍然存在：<code>数据卷</code>和<code>挂载目录</code>。如果你在Linux上运行Docker，你也可以使用<em>tmpfs mount</em>。

下面是用法：

<blockquote>
  <code>-v</code>或者<code>--volume</code>标志在单独容器中使用，<code>--mount</code>标志用于群集服务容器
</blockquote>

-v或--volume：由三个字段组成，用冒号字符（:）分隔。字段必须按正确的顺序排列，并且每个字段的含义不是很明显。

<ul>
<li>对于命名卷，第一个字段是卷的名称，并且在给定主机上是唯一的。对于匿名卷，省略第一个字段。</p></li>
<li><p>第二个字段是文件或目录在容器中安装的路径。</p></li>
<li><p>第三个字段是可选的，是逗号分隔的选项列表，例如ro。这些选项将在下面讨论。</p></li>
</ul>

<p>--mount：由多个键值对组成，以逗号分隔，每个键<key>=<value>组由一个元组组成。该--mount语法比更详细的-v或--volume，但按键的顺序并不显著，并且标志的价值更容易理解。

<ul>
<li>该type安装件，其可以是bind，volume，或tmpfs。本主题讨论卷，因此类型始终是volume。</p></li>
<li><p>该source安装的。对于命名卷，这是卷的名称。对于匿名卷，省略此字段。可以指定为source或src。</p></li>
<li><p>将destination文件或目录安装在容器中的路径作为其值。可以指定为destination，dst或target。</p></li>
<li><p>该readonly选项（如果存在）导致绑定装入以只读方式装入容器中。</p></li>
<li><p>该volume-opt选项可以多次指定，它采用由选项名称及其值组成的键值对。</p></li>
</ul>

<h1>使用数据卷</h1>

<p>数据卷是保存Docker容器生成和使用的数据的首选机制。数据卷完全由Docker管理。有几个优点：

与挂载目录相比，卷更易于备份或迁移。

可以使用Docker CLI命令或Docker API管理数据卷

卷适用于Linux和Windows容器。可以在多个容器之间更安全地共享卷。

卷驱动程序允许在远程主机或云提供程序上存储卷，加密卷的内容或添加其他功能。

新卷可以通过容器预先填充其内容。

卷不会增加使用它的容器的大小，并且卷的内容存在于给定容器的生命周期之外

docker run-d-P--name nginx-v【重点my-vol重点】:/webapp nginx

docker run-d-P--name nginx--mount source=my-vol,target=/webapp nginx

①如果本地数据卷或者本地目录尚未创建，-v命令则会自动创建（此时创建的是匿名数据卷）,--mount则会报错

匿名数据卷：没有指定名称标识的数据卷，docker随机生成不重复的标识，依赖于一个容器，如果该容器消亡，则因为数据卷标识无法知道，所以无法复用。

②如果是容器里的目录不存在，两者都会自动创建

创建数据卷

docker volume create my-vol

数据卷列表

docker volume ls

查看数据卷具体信息

docker volume inspect my-vol

删除数据卷

docker volume rm my-vol

清除无主的数据卷

docker volume prune

备份数据卷

当您需要备份，还原或将数据从一个Docker主机迁移到另一个Docker主机时，卷是更好的选择。您可以使用卷停止容器，然后备份卷的目录（例如/var/lib/docker/volumes/<volume-name>）。

<h1>使用挂载目录</h1>

将主机上的目录或者文件（绝对路径）挂载到容器指定的路径中（绝对路径），也是比较快捷高效的做法，但是数据卷拥有更好的优点，如果你在开发新的应用，请尝试使用数据卷。

docker run-d-p 8082:8080--name tomcat-mount-v/usr/local/kun/aa:/usr/local/tomcat/webapps/aa tomcat

docker run-d-p 8082:8080--name tomcat-mount--mount type=bind,src=/usr/local/kun/aa,target=/usr/local/tomcat/webapps/aa tomcat]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:43:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:43:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:43:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:43:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%a5%e9%97%a8-docker%e5%ae%b9%e5%99%a8%e6%95%b0%e6%8d%ae%e5%82%a8%e5%ad%98%e5%92%8c%e8%bd%ac%e7%a7%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1091]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>747</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-11 09:09:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-11 01:09:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://sscialisvv.com/" / rel="nofollow ugc">cialis online pharmacy</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[实战 - 多容器,Nginx容器灵活切换PHP版本!同时运行多个PHP容器]]></title>
		<link>https://blog.siammm.cn/archives/159</link>
		<pubDate>Fri, 30 Aug 2019 02:44:06 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[容器link原理

===========

在前面一章中，我们使用 <code>--link</code>来将php容器和nginx容器关联在一起，并在nginx容器中的配置写下了如下代码，写下的php001就是我们在--link中设置的别名，其实这是通过本地host实现的。

<pre><code class="line-numbers">{
    try_files $uri =404;
    fastcgi_pass php001:9000;   #极其重要
    fastcgi_index index.php;
    include /etc/nginx/conf.d/fastcgi_params;  #这里也是需要注意的，之前就是在这里还惨我了，需要绝对路径。不然路径默认从nginx的配置目录开始。
}
</code></pre>

我们进入容器，并运行

<pre><code class="line-numbers">$ cd /etc/
$ vim hosts
</code></pre>

便可以看到设置的本地host。

<h1>实现灵活切换php版本</h1>

我们先拉取两个不同版本的php镜像

<pre><code class="line-numbers">$ docker pull php:7.0-fpm
$ docker pull php:7.2-fpm
</code></pre>

然后开启两个容器

<pre><code class="line-numbers">$ docker run --name php70 -v /home/wwwroot/service_config/php_config:/usr/local/php/etc -v /home/wwwroot/:/home/wwwroot/ -d php:7.0-fpm

$ docker run --name php72 -v /home/wwwroot/service_config/php_config:/usr/local/php/etc -v /home/wwwroot/:/home/wwwroot/ -d php:7.2-fpm
</code></pre>

注意挂载目录不需要同我的命令一致 自己修改

因为默认都是9000端口 所以不能同时运行 ，创建完一个先stop 创建第二个。需要同时运行的看下面的步骤↓↓↓

运行需要的php版本容器 运行容器后查看容器的ip

$ docker inspect php70

查找以下行
"IPAddress": "172.17.0.2",

如果要在nginx使用别名去访问  则需要把hosts文件挂载出来 

因为修改了nginx配置需要重启机器，手动修改是没用的。！

接着开启nginx容器，然后进入nginx容器，在nginx的配置文件里修改，（我已经挂载在主机本地目录，详细看前一章节）

<pre><code class="line-numbers">{
    try_files $uri =404;
    fastcgi_pass 172.17.0.2:9000这里修改了;
    fastcgi_index index.php;
    include /etc/nginx/conf.d/fastcgi_params;
}
</code></pre>

Esc 然后:wq 保存退出重启即可  

$ docker restart nginx001

切换成7.2的步骤：

<pre><code class="line-numbers">$ docker stop php70
$ docker start php72
$ docker inspect php72
</code></pre>

得到容器运行ip，进入nginx 修改配置 （因为两个容器不是同时运行，当70版本的容器结束，再开启72版本的容器 还是同一个ip 所以不需要修改配置）

假设ip更换了 则需要修改配置然后重启机器

<h1>同时运行多个PHP容器</h1>

在开启容器的时候需要使用不同的外网ip，因为php-fpm默认监听的是9000端口 所以运行的命令就成了这样子

<pre><code class="line-numbers">$ docker run -p 9001:9000 --name php70 -v /home/wwwroot/service_config/php_config:/usr/local/php/etc -v /home/wwwroot/:/home/wwwroot/ -d php:7.0-fpm

$ docker run -p 9002:9000 --name php72 -v /home/wwwroot/service_config/php_config:/usr/local/php/etc -v /home/wwwroot/:/home/wwwroot/ -d php:7.2-fpm
</code></pre>

这里的9001和9002是你的宿主机没有被占用的端口即可

可以看到两个php容器已经同时可以运行了  $ docker ps 

在nginx.conf配置中使用对应容器的ip:9000即可使用对应的PHP版本去编译。

记得修改完IP需要重启nginx！

容器端口号和主机端口号关系的理解

===================

Docker的所有容器都相当于在同一个<code>内网</code>的很多机器

所以每一个容器都有一个ip   每个机器都有自己的端口使用情况  <br />
所以不同容器可以使用一样的端口 ，所以我们两个容器都使用php-fpm默认的9000端口并没有冲突。

但是每一个容器都需要映射一个端口到主机上，这个端口是在主机上的，所以不能重复， 我们使用9001和9002。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:44:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:44:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:44:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:44:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%9e%e6%88%98%e5%a4%9a%e5%ae%b9%e5%99%a8nginx%e5%ae%b9%e5%99%a8%e7%81%b5%e6%b4%bb%e5%88%87%e6%8d%a2php%e7%89%88%e6%9c%ac%e5%90%8c%e6%97%b6%e8%bf%90%e8%a1%8c%e5%a4%9a%e4%b8%aaphp%e5%ae%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1085]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ 实战 - docker-compose搭建基本的nginx+php环境]]></title>
		<link>https://blog.siammm.cn/archives/160</link>
		<pubDate>Fri, 30 Aug 2019 02:44:40 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>安装docker-compose</h1>

简单说几句，具体可以参照官网的详细教程。

<ul>
<li>确保已经安装docker</p></li>
<li><p>从github拉取docker-compose </p></li>
</ul>

<pre><code class="line-numbers"># curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
</code></pre>

<ul>
<li>添加可执行权限</li>
</ul>

<pre><code class="line-numbers"># chmod +x /usr/local/bin/docker-compose
</code></pre>

<ul>
<li>运行docker-compose</li>
</ul>

<pre><code class="line-numbers"># docker-compose --version
docker-compose version 1.22.0, build 1719ceb
</code></pre>

<h1>docker-compose基本使用</h1>

<p>docker-compose使用后缀为yml的文件定义你的服务容器关系

下面我们用一个nginx+php的简单例子来演示

创建项目总目录

<pre><code class="line-numbers">$ mkdir work &amp;&amp; cd work
</code></pre>

创建代码存放目录

<pre><code class="line-numbers">$ mkdir app
</code></pre>

创建配置存放目录

<pre><code class="line-numbers">$ mkdir config &amp;&amp; cd config
</code></pre>

创建nginx配置文件

<pre><code class="line-numbers">$ vim site.conf
</code></pre>

写入你需要的nginx服务器配置，我这里写的是

<pre><code class="line-numbers">server {
    listen 80;
    index index.php index.html;
    server_name localhost;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /home/wwwroot/;


    location ~ .php {
        # try_files $uri =404;
        fastcgi_split_path_info ^(.+.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        include fastcgi_params;
    }
}
</code></pre>

开始编写docker-compose的yml文件

<pre><code class="line-numbers">$ vim docker-compose.yml
</code></pre>

我已经写了简单的注释，其他的可选项可以在官网或者其他教程学习，这里只是演示最基本的搭建。

<pre><code class="line-numbers">version: '2'

services:
    web:
        # 使用镜像
        image: nginx:latest
        # 端口映射
        ports:
            - "80:80"
        # 目录挂载
        volumes:
            - ./app:/home/wwwroot/
            - ./config/nginx/site.conf:/etc/nginx/conf.d/default.conf
        # 网络
        networks:
            - code-network
    php:
        image: php:7.0-fpm
        volumes:
            - ./app:/home/wwwroot/
        networks:
            - code-network

networks:
    code-network:
        driver: bridge
</code></pre>

开始构建

<pre><code class="line-numbers">$ docker-compose up -d
Starting work_web_1 ... done
Starting work_php_1 ... done
</code></pre>

打开你网址 查看是否nginx是否运行成功 （这里应该会提示nginx 403，没有则可能不正常）

接着进入代码存放目录，编写第一个php文件

<pre><code class="line-numbers">$ cd app 
$ vim index.php
</code></pre>

<pre><code class="line-numbers">&lt;?php
phpinfo();
</code></pre>

刷新网址，<img src="http://img.baidu.com/hi/jx2/j_0002.gif" alt="" />我已经运行成功了，那你呢？

最终的文件目录结构如下

<pre><code class="line-numbers">work 总目录
├── app  代码存放目录
│   └── index.php
├── config 配置存放目录
│   └── nginx
│       └── site.conf
└── docker-compose.yml
</code></pre>

docker-compose的其他几个常用指令

==========================

进入你的项目目录 则运行以下其他命令

查看容器运行状态

<pre><code class="line-numbers">$docker-compose ps
</code></pre>

停止该项目运行

<pre><code class="line-numbers">$docker-compose stop
</code></pre>

关于为什么要使用docker和docker-compose将在下一章进行讨论!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:44:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:44:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:44:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:44:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%9e%e6%88%98docker-compose%e6%90%ad%e5%bb%ba%e5%9f%ba%e6%9c%ac%e7%9a%84nginxphp%e7%8e%af%e5%a2%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1159]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[讨论 - 为什么要使用docker和docker-compose]]></title>
		<link>https://blog.siammm.cn/archives/161</link>
		<pubDate>Fri, 30 Aug 2019 02:45:16 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>优点总结(后面进行讨论)</h1>

<h2>更高效的利用系统资源</h2>

<h2>更快速的启动时间</h2>

<h2>一致的运行环境</h2>

<h2>持续交付和部署</h2>

<h2>更轻松的迁移</h2>

<h2>更轻松的维护和扩展</h2>

讨论

=====

更高效？

<hr />

docker是容器型虚拟化，不需要进行硬件虚拟、运行完整操作系统等额外的开销。所以提高了对系统资源的利用率

简单来说：可以在同样配置的机器上虚拟运行更多的应用。

<h2>更快速？</h2>

因为docker不需要运行完成的操作系统，而是直接运行宿主机的内核，因此可以做到秒级甚至毫秒级的启动关闭。

简单来说：加载1万个文件和100个文件的速度区别

<h2>一致的运行环境？ ※※※※※ </h2>

主要针对：开发--测试--线上   几大环节。

对于phper来说，在本地开发一般是使用phpstudy或者其他的<code>集成环境</code>来开发，而在线上则一般则使用其他安装方式

一些php集成环境可能为了减小软件体积，阉割了一些组件，所以不太适合运营使用

这就造成了环境的不一致问题，可能是由于php、nginx版本不一致，或者某个配置参数本地有打开、线上无打开等情况的出现。

出现问题了那就需要phper进行调试、调整，无疑浪费了巨大的精力，只为了能正常运行。

假设有一天，公司决定更换服务器，那可能又要进行以上一系列的配置修改...

假设公司开发的项目是商业项目，源码可能对外出售，其他公司的部署又是一系列的问题...

如果使用了docker，可以将项目需要的环境打包成镜像，其他机器可以直接拉取镜像进行部署。

如thinkphp5等支持路由的框架在nginx上可能无法正常运行的问题（只能访问默认hello页，其他的页面出现404）

这是由于nginx没有配置PATH_INFO 导致框架无法解析路由

这个问题需要修改nginx.conf文件来解决，修改简单如下

<pre><code class="line-numbers">    location ~ .php {   这里可能出现 .php$  需要把$去掉，否则无法获取index.php后的内容
        try_files $uri =404;
        fastcgi\_split\_path_info ^(.+.php)(/.+)$;  # 新增这一行
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        fastcgi\_param SCRIPT\_FILENAME $document\_root$fastcgi\_script_name;
        fastcgi\_param PATH\_INFO $fastcgi\_path\_info; # 新增这一行
        include fastcgi_params;
    }
</code></pre>

修改不算特别复杂，但如果每个机器都要这样子检查一次，调试修改 那不是很浪费时间吗？

① 我们可以使用docker拉取一个官方的nginx镜像，然后修改配置后提交成新镜像作为项目的使用镜像。

② 我们可以通过挂载文件将配置文件挂载到容器里保证配置最终的一致

<h2>持续交付和部署、更轻松迁移？ ※※※※※ </h2>

对于开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。

使用Docker可以通过定制应用镜像来实现持续集成，持续交付，部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成系统进行集成测试，而运维人员则可以在生产环境中快速部署该镜像，甚至结合持续部署系统进行自动部署

如果使用了<code>docker-compose</code>则可以更好的管理应用的容器关系，加快部署步骤

在上一章我们使用docker-compose搭建了一个php+nginx的应用，目录结构如下

<pre><code class="line-numbers">work 总目录
├──app  代码存放目录
│   └──index.php
├──config 配置存放目录
│   └──nginx
│       └──site.conf
└──docker-compose.yml
</code></pre>

假设我们的一个商业应用是使用thinkphp5开发，则将我们的应用程序放入app目录中。

在docker-compose.yml 定义好各个容器的参数和关系，在config目录中定义好容器的配置参数。

于是在另一个机器部署该应用只需要把work压缩，放上去，解压，进入work目录

运行 $ dokcer-compose up -d

则可以在保证配置一致的情况下部署成功！而不会出现部分机器还需要修改nginx.conf来支持PATH_INFO的情况（我们已经在config/nginx/site.conf配置好了）

<h2>更轻松维护和扩展？</h2>

Docker使用的分层存数以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单，此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:45:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:45:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:45:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:45:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%ae%a8%e8%ae%ba%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e4%bd%bf%e7%94%a8docker%e5%92%8cdocker-compose]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1074]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[layui数据表格checkbox设置部分不可选]]></title>
		<link>https://blog.siammm.cn/archives/162</link>
		<pubDate>Fri, 30 Aug 2019 02:46:52 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>问题</h3>

在layui数据表格中设置了字段为<code>type:checkbox</code>  但是想要实现部分不显示，不可选的功能。

<a href="#" title="layui数据表格"><img src="http://www.yancoo.cn/uploads/images/201905/30_01_layuitable.png" alt="layui数据表格" title="layui数据表格" /></a>

layui内置没有该功能，所以只能自己实现。

<h2>使用templet实现</h2>

<pre><code class="language-javascript line-numbers">table.render({
    elem: '#junTable',
    url: '',
    cols: [[
        {
            templet: "#checkbd",
            title: "&lt;input type='checkbox' name='siam_all' title='' lay-skin='primary' lay-filter='siam_all'&gt; ",
            width: 60,
        }
        , {
            field: 'z_id',
            title: 'id'
        }
    ]],
    page: true,
    limit: 10
});
</code></pre>

<pre data-language=HTML><code class="language-markup line-numbers">&lt;script type="text/html" id="checkbd"&gt;
    {{#  if (d.can_fabu === 1){ }}// 这里是判断要不要显示的条件
    &lt;input type="checkbox" name="siam_one" title="" lay-skin="primary" data-id = "{{ d.z_id }}"&gt;
    {{#  } }}
&lt;/script&gt;
</code></pre>

<pre><code class="language-css line-numbers">&lt;style&gt;
    .laytable-cell-checkbox .layui-disabled.layui-form-checked i {
        background: #fff !important;
    }
&lt;/style&gt;
</code></pre>

到这里就可以部分数据<code>不显示复选框</code>了，但是全选功能和获取id的功能还是不正常

<h3>全选功能</h3>

<pre><code class="language-javascript line-numbers">form.on("checkbox(siam_all)", function () {
    var status = $(this).prop("checked");
    $.each($("input[name=siam_one]"), function (i, value) {
        $(this).prop("checked", status);
    });
    form.render();
});
</code></pre>

<h3>获取选中数据</h3>

<pre><code class="language-javascript line-numbers">var ids = [];
$.each($("input[name=siam_one]:checked"), function (i, value) {
    ids[i] = $(this).attr("data-id");  // 如果需要获取其他的值 需要在模板中把值放到属性中 然后这里就可以拿到了
});
</code></pre>

<h2>使用done函数禁用</h2>

这是网上的做法，但是有瑕疵，全选不可用，并且不可选状态和可选状态的复选框样式很接近，建议重写不可选的样式 （参考上面的）

<pre data-language=HTML><code class="language-markup line-numbers">&lt;!DOCTYPE html&gt;
&lt;html&gt;

    &lt;head&gt;
        &lt;meta charset="utf-8" /&gt;
        &lt;title&gt;layui&lt;/title&gt;
        &lt;meta name="renderer" content="webkit" /&gt;
        &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" /&gt;
        &lt;link rel="stylesheet" href="https://res.layui.com/layui/dist/css/layui.css" media="all" /&gt;
        &lt;!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 --&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;div style="margin-bottom: 5px;"&gt;
            &lt;div id="table-main"&gt;
&lt;span class="layui-btn" id="getselect"&gt;获取选中行&lt;/span&gt;

                &lt;table class="layui-table" id="idTest" lay-filter="demo"&gt;&lt;/table&gt;
            &lt;/div&gt;
            &lt;script type="text/html" id="barDemo"&gt;
                &lt; a class = "layui-btn layui-btn-primary layui-btn-mini"
                lay - event = "detail" &gt; 查看 &lt; /a&gt;
            &lt;/script&gt;
            &lt;script src="https://res.layui.com/layui/dist/layui.all.js" charset="utf-8"&gt;&lt;/script&gt;
            &lt;!-- 注意：如果你直接复制所有代码到本地，上述js路径需要改成你本地的 --&gt;
            &lt;script&gt;
                layui.use(['table', 'jquery', 'form', 'layer'], function() {
                    var table = layui.table;
                    var $ = layui.jquery;
                    var form = layui.form;
                    var layer = layui.layer;
                    var tableIns = table.render({ //其它参数在此省略
                        elem: '#idTest',
                        id: 'idTest',
                        url: 'https://www.layui.com/demo/table/user/', // 注意：如果你直接复制所有代码到本地，数据请求需要本地返回数据
                        cols: [
                            [{
                                    checkbox: true,
                                    fixed: true
                                },
                                {
                                    field: 'id',
                                    width: 80,
                                    sort: true,
                                    fixed: true,
                                    title: 'ID'
                                },
                                {
                                    fixed: 'right',
                                    width: 160,
                                    align: 'center',
                                    toolbar: '#barDemo'
                                }
                            ]
                        ],
                        where: {}, //如果无需传递额外参数，可不加该参数
                        limits: [10, 15, 20, 40, 60, 80],
                        limit: 10,
                        page: true, //开启分页
                        done: function(res, curr, count) {
                            var data = res.data;
                            var allck = true;
                            for (var item in data) {
                                if (data[item].score == 57) { //关键点如果data中score包含57那么就不能全选
                                    allck = false;
                                }
                                break;
                            }
                            if (!allck) {
                                $(".layui-table-header").find("input[name = 'layTableCheckbox'][lay-filter='layTableAllChoose']").each(function() {
                                    $(this).attr("disabled", 'disabled').next().removeClass("layui-form-checked");
                                    form.render('checkbox');
                                });
                            }
                            var i = 0;
                            $(".layui-table-body.layui-table-main").find("input[name='layTableCheckbox']").each(function() {
                                if (res.data[i].score == 57) { //关键点如果当前行数据中score包含57那么就不可选
                                    $(this).attr("disabled", 'disabled').removeAttr("checked");
                                    form.render('checkbox');
                                }
                                i++;
                            });
                            i = 0;
                            $(".layui-table-fixed.layui-table-fixed-l").find(".layui-table-body").find("input[name='layTableCheckbox']").each(function() {
                                if (res.data[i].score == 57) { //关键点如果当前行数据中score包含57那么就不可选
                                    $(this).attr("disabled", 'disabled').removeAttr("checked");
                                    form.render('checkbox');
                                }
                                i++;
                            });
                        }
                    });
                    //监听表格复选框选择
                    table.on('checkbox(demo)', function(obj) {
                        console.log(obj)
                    });
                    $("#getselect").click(function() {
                        var checkStatus = table.checkStatus('idTest'); //test即为基础参数id对应的值
                        layer.alert(JSON.stringify(checkStatus.data));
                    });
                });
            &lt;/script&gt;
        &lt;/div&gt;
    &lt;/body&gt;

&lt;/html&gt;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:46:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:46:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:46:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:46:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[layui%e6%95%b0%e6%8d%ae%e8%a1%a8%e6%a0%bccheckbox%e8%ae%be%e7%bd%ae%e9%83%a8%e5%88%86%e4%b8%8d%e5%8f%af%e9%80%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="layui"><![CDATA[Layui]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[122]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2259]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[多Iframe版后台，在一个iframe切换到另一个iframe，同时刷新]]></title>
		<link>https://blog.siammm.cn/archives/165</link>
		<pubDate>Fri, 30 Aug 2019 02:49:20 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[当我们使用多标签iframe的后台管理模板时，需要在一个iframe中跳转到另一个iframe，并且对新iframe进行操作，这篇文章记录一下我在开发过程中编写的代码。

有一个标签 #tab 用于储存已经打开的标签页

<a href="#" title="tab标签说明"><img src="http://yancoo.cn/uploads/images/20190103/2019190103-045938.png" alt="tab标签说明" title="tab标签说明" /></a>

存放iframe的标签.tabsbody-item   结构如下

<pre><code class="line-numbers">.tabsbody-item 订单列表
——iframe
.tabsbody-item 收款点
——iframe
</code></pre>

<pre><code class="line-numbers"># 在iframe中，对父级窗口进行操作，搜索#tab中已打开标签的列表
var iframe = $(window.parent.document).find("#tab &gt; li");
if (iframe.length &gt; 0) {
    # 遍历已经打开的标签，并且判断是否为自己想要操作的目标。
    iframe.each(function (index, element) {
        if ($(this).attr('id') === "test.html") {
            # 模拟点下该标签
            $(this).trigger('click');
            # 刷新
            var iframet = $(window.parent.document).find('.tabsbody-item').eq(index).find('.iframe-class');
            iframet[0].contentWindow.location.reload(true);
        }
    });
}
</code></pre>

这样子就从A标签内操作父窗口，打开B标签页，并且刷新B标签页的内容。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:49:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:49:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:49:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:49:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a4%9aiframe%e7%89%88%e5%90%8e%e5%8f%b0%ef%bc%8c%e5%9c%a8%e4%b8%80%e4%b8%aaiframe%e5%88%87%e6%8d%a2%e5%88%b0%e5%8f%a6%e4%b8%80%e4%b8%aaiframe%ef%bc%8c%e5%90%8c%e6%97%b6%e5%88%b7%e6%96%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[166]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[979]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[layui2.0数据表格导出复杂表头EXCEL解决方案,table2excel]]></title>
		<link>https://blog.siammm.cn/archives/167</link>
		<pubDate>Fri, 30 Aug 2019 02:50:03 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>layui 数据表格组件</h3>

layui是一套面向所有层次的前后端开发者，零门槛开箱即用的前端UI解决方案。很多的后端开发在开发后台系统时候都会选择它。

数据表格组件也是使用非常频繁的，它可以快速从api得到数据并进行处理渲染成表格，并且还有排序、总计、导出表格等等功能。

<img src="http://cdn.yancoo.cn/img/20190128/layuitable.png" alt="layui数据表格" title="layui数据表格" />

在一次的需求中，需要使用复杂表头并且导出EXCEL表格，发现layui并不支持复杂表头的处理，社区之中也还未找到相关的方案。于是使用了table2excel插件协助完成需求。（如果你有更好更方便的方法，希望你能联系我或者留言交流一下，谢谢）

以下简单记一下笔记和步骤，方便自己和他人。

<h3>talbe2excel</h3>

<blockquote>
  https://github.com/rusty1s/table2excel
</blockquote>

在github上有挺多个叫table2excel的仓库，我选择了以上这个仓库。

在页面引入jquery和table2excel.js

一个快速的demo

<pre><code class="language-javascript line-numbers">&lt;script src="table2excel.js"&gt;&lt;/script&gt;

&lt;script&gt;
  var table2excel = new Table2Excel();
  table2excel.export(document.querySelectorAll("table"));
&lt;/script&gt;
</code></pre>

<blockquote>
  但是此方式在layui生成的数据表格中并不适用。具体原因和解决方案有空待研究~ 其他小伙伴也可以补充哦！
</blockquote>

原生写的table标签可以正常导出，并且可以使用复杂表头。

于是绕了一下弯路，在layui数据表格加载完数据后，在页面操作原生tableDom（并且隐藏起来 (<em>╹▽╹</em>)   ），再使用table2excel导出表格。

<pre data-language=HTML><code class="language-markup line-numbers">&lt;table id="report-table" cellpadding=1 cellspacing=1 border =1&gt;
    &lt;tr&gt;
        &lt;th rowspan="2"&gt;id&lt;/th&gt;
        &lt;th colspan="2"&gt;信息&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th&gt;姓名&lt;/th&gt;
        &lt;th&gt;年龄&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tbody id="report-table-tbody"&gt;
        &lt;tr&gt;
            &lt;th&gt;1&lt;/th&gt;
            &lt;th&gt;Siam&lt;/th&gt;
            &lt;th&gt;19&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>

<blockquote>
  javascript代码
</blockquote>

<pre><code class="language-javascript line-numbers">table.render({ //其它参数在此省略
  done: function(res, curr, count){
    $.each(res.data,function(index,value){
        let html = '';

        html += '&lt;tr&gt;';
        html += '&lt;td&gt;';
        html += '&lt;td&gt;'+value.name+'&lt;/td&gt;';
        html += '&lt;td&gt;'+value.other+'&lt;/td&gt;';
        html += '&lt;/td&gt;';
        html += '&lt;/tr&gt;';
        $('#report-table-tbody').append(html);
    });

  }
});
</code></pre>

<pre><code class="language-javascript line-numbers">$('#report-table-downexcel').click(function(){
  var table2excel = new Table2Excel();
  table2excel.export($('#report-table'));
})
</code></pre>

这样子就可以完成导出复杂表头的表格了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date><![CDATA[2019-08-30 10:50:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-30 02:50:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-08-30 10:50:03]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-08-30 02:50:03]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[layui2-0%e6%95%b0%e6%8d%ae%e8%a1%a8%e6%a0%bc%e5%af%bc%e5%87%ba%e5%a4%8d%e6%9d%82%e8%a1%a8%e5%a4%b4excel%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88table2excel]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="layui"><![CDATA[Layui]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[122]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2437]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ea9c514d63b7242eeb7c7da0908ed584]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>725</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-26 01:37:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-25 17:37:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://vskamagrav.com" rel="nofollow ugc">kamagra gold 100mg review[/url]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>739</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-07 20:54:40]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-07 12:54:40]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vskamagrav.com/" / rel="nofollow ugc">kamagra or malegra</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[【源码解读】TP5return json_encode ajax自动被加上双引号]]></title>
		<link>https://blog.siammm.cn/archives/168</link>
		<pubDate>Mon, 02 Sep 2019 07:20:01 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=168</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>事情起因</h1>

在thinkphp5中，return数据才是控制器正确的时候方式，而不是直接echo 然后die 或者exti

因为框架有后置数据的落地处理等等，直接让程序退出并不友好，既然我们选择了框架，就应该遵循框架的设计理念

这样子能让我们避免一些坑爹事件的发生。

此次我在控制器中，并没有使用tp的<code>Json Response</code>对象，而是想通过<code>return json_encode($arr);</code>返回字符串的形式

正常应该输出如下

<pre><code class="language-json line-numbers">{"name":"siam", "age":21}
</code></pre>

结果却输出为

<pre><code class="line-numbers">"{"name":"siam", "age":21}"
</code></pre>

这样子就明显乱套了，前端解析直接崩溃。

<h1>控制器原理</h1>

追寻response后框架的处理，框架会根据控制器<code>return</code>的数据类型做不同的处理

<ul>
<li>返回Reponse子类，比如Json、Jsonp、Xml、View、重定向等等，则会执行子类的run()</li>
<li>返回不是Reponse子类，则会自动识别响应输出类型</li>
</ul>

<h1>源码追踪</h1>

以下是tp5中该问题核心的代码

<pre><code class="language-php line-numbers">// 输出数据到客户端
if ($data instanceof Response) {
    $response = $data;
} elseif (!is_null($data)) {
    // 默认自动识别响应输出类型
    $type = $request-&gt;isAjax() ?
    Config::get('default_ajax_return') :
    Config::get('default_return_type');

    $response = Response::create($data, $type);
} else {
    $response = Response::create();
}
</code></pre>

$data是我们在控制器中返回的数据

可能是

<pre><code class="language-php line-numbers">return '文本';
return json($arr);
return jsonp($arr);
return xml($arr);
</code></pre>

等等

当我们返回json_encode的时候，不是Reponse类，会走第二个判断

它会判断是否为ajax请求，如果是ajax请求，则走默认的ajax_return type  在tp5中 默认是json

所以会把字符串<code>再度json序列化</code>

就会出现我们问题的那种情况了

<h1>解决方案</h1>

解决该问题有多种方式 其实也只是小问题，这里做一个汇总吧

<ul>
<li>返回Reponse子类，是文本类型</li>
</ul>

<pre><code class="language-php line-numbers">Response::create($this-&gt;encrypt(json_encode($array, 256)), "html");
</code></pre>

<ul>
<li>返回Reponse子类，是json类型</li>
</ul>

<pre><code class="language-php line-numbers">// tp5内置json助手函数
return json($array);
</code></pre>

<ul>
<li>输出后退出（不符合tp设计理念 非常非常不推荐）</li>
<li>修改配置文件，默认ajax_return为html</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2019-09-02 15:20:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-02 07:20:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-02 15:51:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-02 07:51:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%ba%90%e7%a0%81%e8%a7%a3%e8%af%bb%e3%80%91tp5return-json_encode-ajax%e8%87%aa%e5%8a%a8%e8%a2%ab%e5%8a%a0%e4%b8%8a%e5%8f%8c%e5%bc%95%e5%8f%b7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1394]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Mysql误删,恢复数据,binlog闪回,宝塔面板]]></title>
		<link>https://blog.siammm.cn/archives/174</link>
		<pubDate>Sat, 14 Sep 2019 13:51:25 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

DBA或开发人员，有时会误删或者误更新数据

你是否有<code>删库</code>经历？<code>删库</code>是否真的无解

如果是线上环境并且影响较大，就需要能快速回滚。

传统恢复方法是利用备份重搭实例，再应用去除错误sql后的binlog来恢复数据。

此法费时费力，甚至需要停机维护，并不适合快速回滚。

也有团队利用LVM快照来缩短恢复时间，但快照的缺点是会影响mysql的性能。

MySQL闪回(flashback)利用binlog直接进行回滚，能快速恢复且不用停机。

本文将简单进行<code>mysql根据binlog闪回数据</code>的实战测试

<h1>基础知识准备</h1>

binlog是二进制日志文件，用来记录Mysql内部对数据库的改动（只记录对数据的修改操作），主要用于数据库的主从复制以及增量恢复。

当我们搭建mysql主从复制的时候，两个实例之间也是通过binlog来完成数据的备份同步。

所以有这种根据binlog得到执行sql语句、闪回sql语句，我们只需要利用根据分析binlog，然后就可以找到准确的数据改动sql，并得到闪回sql，检查无误后执行就可以恢复数据了

<h1>准备工作</h1>

我们采用<code>binlog2sql工具</code>来分析，由上海美团DBA团队出品

使用的是python语言，所以我们需要提前安装好python语言

我使用的是宝塔面板，宝塔面板已经内置安装了python，所以直接开始安装更三十就好了

<h2>安装binlog2sql工具</h2>

<pre><code class="language-shell line-numbers">cd /www/server
</code></pre>

<pre><code class="language-shell line-numbers">git clone https://github.com/danfengcao/binlog2sql.git &amp;&amp; cd binlog2sql
</code></pre>

<pre><code class="language-shell line-numbers">pip install -r requirements.txt
</code></pre>

<h2>开启mysql server主从配置</h2>

在mysql配置文件中填写以下内容

<pre><code class="line-numbers">[mysqld]
server_id = 1
log_bin = /var/log/mysql/mysql-bin.log
max_binlog_size = 1G
binlog_format = row
binlog_row_image = full
</code></pre>

<blockquote>
  在宝塔面板中，有几个参数已经是开启的，我们无需修改，看以下内容
</blockquote>

在软件管理 mysql 配置修改中 打开配置文件

在<code>33行</code>开始，有几个参数已经填写了，我们主要是修改binlog_format和row_image

binlog文件储存位置默认是 /www/server/data 无需修改也可以

<pre><code class="line-numbers">log-bin=mysql-bin
binlog_format = row
binlog_row_image = full
server-id = 1
</code></pre>

<h1>开始实战</h1>

创建测试库、测试表、插入测试数据

然后执行delete 不带where条件  全部删除

<pre><code class="line-numbers">mysql&gt; select * from siamwp_links;
Empty set (0.01 sec)
</code></pre>

接下来就是重点了，我们使用工具分析

<h2>查看当前的binlog文件名</h2>

<pre><code class="line-numbers">mysql&gt; show master status;
</code></pre>

得到类似

<pre><code class="line-numbers"><br />+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000006 |   613171 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)
</code></pre>

我们记住<code>mysql-bin.000006</code>

<h2>打开binlog2sql工具分析</h2>

进入我们安装后的binlog2sql工具目录

<pre><code class="line-numbers">cd /www/server/binlog2sql/binlog2sql
</code></pre>

<pre><code class="line-numbers">ll
</code></pre>

可以看到这里面有py脚本

<h2>得到历史sql语句</h2>

<pre><code class="line-numbers">python binlog2sql.py 
-h127.0.0.1 
-P3306 
-uroot 
-p'密码' 
-d数据库名 
刚刚查找的文件名
--start-file='mysql-bin.000006'   
后面的参数可以不带 筛选时间 
--start-datetime '2019-09-14 22:05:30' 
--stop-datetime '2019-09-14 22:05:45'
</code></pre>

总的可能是这样子的语句 上面是为了讲解参数意义

<pre><code class="line-numbers">python binlog2sql.py  -h127.0.0.1 -P3306 -uroot -p'密码' -dwww_siammm_cn --start-file='mysql-bin.000006' --start-datetime '2019-09-14 22:05:30' --stop-datetime '2019-09-14 22:05:45'
</code></pre>

得到的大概是这样子的记录（这里为了演示方便 用了时间筛选 准确得到只有删除数据的log  正常情况下会有很多 需要耐心查找）

<img src="https://www.siammm.cn/wp-content/uploads/2019/09/60fbc15b44570acf12e8e0018fb5cf40.png" alt="" />

有三条语句

然后每一条语句的最后面还有这样子一段注释

<pre><code class="line-numbers">#start 590075 end 590633 time 2019-09-14 22:05:35
</code></pre>

这代表的是在log文件中的起始位置和结束位置

<h2>闪回sql语句</h2>

我们有了起始位置和结束位置，就可以利用工具，得到这一部分变化的闪回sql了

前面的大部分参数都一样 后面的筛选日期参数变成了起始位置和结束位置的值 还有一个-B即可

<pre><code class="line-numbers">python binlog2sql.py  -h127.0.0.1 -P3306 -uroot -p'密码' -dwww_siammm_cn --start-file='mysql-bin.000006' -B --start-pos 590075 --stop-pos 590633
</code></pre>

就可以得到insert的语句 复制出来，检查无误，就可以执行 恢复数据了]]></content:encoded>
		<excerpt:encoded><![CDATA[当我们误删mysql数据库的时候，该怎么办，这里提供了一种简单的实战方法，可以先行储备，mysql闪回，binlog2sql，binlog的作用。]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2019-09-14 21:51:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-14 13:51:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-14 22:21:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-14 14:21:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e8%af%af%e5%88%a0%e6%81%a2%e5%a4%8d%e6%95%b0%e6%8d%aebinlog%e9%97%aa%e5%9b%9e%e5%ae%9d%e5%a1%94%e9%9d%a2%e6%9d%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1642]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[【常见问题】宝塔面板如何安装最新版本的php扩展swoole]]></title>
		<link>https://blog.siammm.cn/archives/176</link>
		<pubDate>Tue, 17 Sep 2019 04:53:11 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

大家都知道，宝塔是一个面向小白的服务器运维面板，内置了非常丰富的问题。

我们可以快速安装各个版本的语言、软件、扩展等等

当笔者在使用过程中，学习php先进的技术swoole，swoole比较有名的easyswoole框架时，需要比较新的swoole版本。

而通过宝塔自动安装的是稍微旧一点的版本，那么如何安装自定义版本、最新版本呢？

<h1>编译安装swoole</h1>

其他php扩展其实也是一样的原理， 我们可以自行编译。

在另一篇文章中，我有比较详细的编译安装过程，可以参考一下。

<a href="https://www.siammm.cn/archives/154" title="宝塔面板多PHP版本编译安装swoole">宝塔面板多PHP版本编译安装swoole</a>

<h1>总结</h1>

宝塔面板能提高我们非运维专业人员的管理效率，但是也会损失一些灵活性，要根据需求灵活使用工具。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2019-09-17 12:53:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-17 04:53:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-17 12:53:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-17 04:53:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e3%80%91%e5%ae%9d%e5%a1%94%e9%9d%a2%e6%9d%bf%e5%a6%82%e4%bd%95%e5%ae%89%e8%a3%85%e6%9c%80%e6%96%b0%e7%89%88%e6%9c%ac%e7%9a%84php%e6%89%a9%e5%b1%95swoole]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[83]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1221]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Nginx重试机制，浏览器重复请求两次多次]]></title>
		<link>https://blog.siammm.cn/archives/177</link>
		<pubDate>Tue, 17 Sep 2019 07:05:49 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=177</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>前言</h1>

在研究nginx的时候，偶然看到网上前辈一篇解决问题的实战记录文章，稍微整理一下，学习补充一下知识点。

<h1>场景还原</h1>

问题 用户再浏览器里执行了一次http请求，结果后端服务器执行了两遍，如果这次请求是Insert操作，可想而知，数据库会多出一条一模一样的记录来。

<ul>
<li>网关用Nginx做了反向代理和负载均衡，Nginx下挂着两台阿里云ECS服务器，每台机器上都装着Tomcat，用户打开浏览器，点击页面，访问后端接口，查看Nginx的access.log,结果这一条请求打在了两台服务器上。</li>
</ul>

<h1>问题剖析</h1>

nginx的重试机制就是容错的一种，在nginx的配置文件中，proxy_next_upstream项定义了什么情况下进行重试，官网文档中给出的说明如下：

<pre><code class="line-numbers">Syntax: proxy_next_upstream error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off 
Default:    proxy_next_upstream error timeout;
Context:    http, server, location
</code></pre>

<ul>
<li>默认情况下，当请求服务器发生错误或超时时，会尝试到下一台服务器。</li>
<li>问题找到了，原因是Nginx配置文件中，超时时间太短了：proxy_connect_timeout 20;；在Nginx的默认配置是：在客户端请求服务器超时的情况下，Nginx会自动转发该请求到另外一台服务器上，这是Nginx的一种容错机制，所以Nginx的访问日志中会出现同一条请求而两台服务器都执行了一遍的情况，这样以来，程序如果没有做幂等性操作的话数据库会出现两条记录。</li>
<li>还有一个参数影响了重试的次数：proxy_next_upstream_tries，官方文档中给出的说明如下：</li>
</ul>

<pre><code class="line-numbers">    Syntax: proxy_next_upstream_tries number;
    Default:    proxy_next_upstream_tries 0;
    Context:    http, server, location
    This directive appeared in version 1.7.5.
</code></pre>

<h1>调整</h1>

本来就是Nginx的一种容错机制，这种机制在查询操作还是挺好的，如果是插入操作，那就有点问题了，如果这条插入的请求特别耗时，并且时间超过Nginx的proxy_connect_timeout时间设置，Nginx会自动将该请求转发集群中的另外一台服务器的。但是我们不能将这种机制关闭，关闭以后会影响Nginx效率的，那怎么办哪？于是想出了一个临时解决方案，专门针对耗时时间长的几个接口做一下过滤，也就是说，在Nginx的server配置标签中，专门对几个特定的url过过滤，关闭Nginx的重试机制，配置如下

<pre><code class="line-numbers">server {


       location ~ /api/insertData {
              proxy_connect_timeout 60;
              proxy_send_timeout 60;
              proxy_read_timeout 60;
              proxy_next_upstream off;

        }
 }
</code></pre>

也可以直接关闭重试机制

<pre><code class="line-numbers">proxy_next_upstream off;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[前几天正在升级发版项目的时候，发现一个很奇葩的问题，就是用户再浏览器里执行了一次http请求，结果后端服务器执行了两遍，如果这次请求是Insert操作，可想而知，数据库会多出一条一模一样的记录来。Nginx重复请求，记录请求]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date><![CDATA[2019-09-17 15:05:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-17 07:05:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-17 15:05:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-17 07:05:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nginx%e9%87%8d%e8%af%95%e6%9c%ba%e5%88%b6%ef%bc%8c%e6%b5%8f%e8%a7%88%e5%99%a8%e9%87%8d%e5%a4%8d%e8%af%b7%e6%b1%82%e4%b8%a4%e6%ac%a1%e5%a4%9a%e6%ac%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[132]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1639]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php计算两个日期之间的间隔,避免导出大量数据]]></title>
		<link>https://blog.siammm.cn/archives/178</link>
		<pubDate>Tue, 17 Sep 2019 07:23:10 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在做系统业务功能的时候，有的时候业务人员会进行超大范围地导出excel表格，导致<code>内存、CPU占用飙升</code>。

这对于系统的平滑运行不太友好，应该进行导出任务排队、限制范围等操作来控制频率、资源使用率。

<h1>探索</h1>

<h2>导出任务排队</h2>

这里讲讲实现思路：

<ul>
<li>前端请求服务端接口，告诉它要导出的日期范围、内容</li>
<li>服务端记录，插入队列</li>
<li>服务端监控脚本（可以用easyswoole等常驻型应用来完成），生成队列里的excel文件，把任务标注成已经成功、对应的文件名</li>
<li>前端请求任务之后，间隔轮询后端，是否服务端导出完成，是的话则根据返回文件名下载文件</li>
</ul>

<h2>限制数据范围</h2>

这是比较重要的点，因为如果是不限制数据筛选范围，使用了排队导出的架构之后，也可能导致机器资源占用过高（而且有被攻击的风险！）

我们可以根据筛选的日期范围，比如不能间隔超过50天，来限制，那么就要判断两个日期差距的日期了。

这里附带一小段代码

<pre><code class="language-php line-numbers">$start = "2019-9-17 15:11:38";
$end   = "2019-9-01 15:11:45";

$diff = strtotime($start) - strtotime($end);

$diffHour = bcdiv($diff, 60 * 60, 2); // 差距的小时
$diffDay  = bcdiv($diffHour,24,2); // 差距的天数
if ($diffDay &gt; 50){
    echo "范围过大，不可间隔50天";die;
}
echo "....";
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[php资源控制,系统CPU占用过高,任务排队,队列完成,php导出excel过大,内存溢出]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2019-09-17 15:23:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-17 07:23:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-17 15:23:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-17 07:23:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e8%ae%a1%e7%ae%97%e4%b8%a4%e4%b8%aa%e6%97%a5%e6%9c%9f%e4%b9%8b%e9%97%b4%e7%9a%84%e9%97%b4%e9%9a%94%e9%81%bf%e5%85%8d%e5%af%bc%e5%87%ba%e5%a4%a7%e9%87%8f%e6%95%b0%e6%8d%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[929]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[md5加密介绍以及php中md5的漏洞]]></title>
		<link>https://blog.siammm.cn/archives/179</link>
		<pubDate>Wed, 18 Sep 2019 12:18:17 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>什么是MD5</h2>

<code>md5</code>是一种密码散列函数，也叫密码散列算法。

<code>密码散列函数</code>是一种单向散列函数，它可以将给定的数据提取出<code>信息摘要</code>，也就是给定数据的<code>指纹信息</code>。结果的摘要信息格式是一致的，通常用一个短的随机字母和数字组成的字符串来代表。

<h3>密码散列函数的特点</h3>

<ul>
<li>对于任何一个给定的消息，它都很容易就能运算出散列数值。</li>
<li>难以用散列数值推算出原始数据。</li>
<li>数据变动（哪怕很微小），散列数值也会发生很大的变动。</li>
<li>单向散列函数生成的信息摘要是不可预见的。</li>
</ul>

算数模型为： h = H(M)
h为散列数值结果
H为散列函数
M为原始数据

<strong>模型特点</strong>

<ul>
<li>h需要有固定的长度，即生成的散列数值格式需要一致，跟原始数据M的长度和格式无关</li>
<li>给定h和H，很难甚至根本无法计算出原始数据M</li>
<li>给定H，找到M1和M2，使得 H(M1) = H(M2)  在计算上是不可行的 （但是这不代表不存在散列数值相等的M1和M2，只是想通过计算得出是不可行的）</li>
</ul>

<h3>MD5的应用</h3>

<strong>一致性验证</strong>
在UNIX下有很多软件在下载的时候都提供了一个后缀为.md5的文件，这个文件通常的内容只有一行，格式大概为： <code>MD5 (xxx.tar.gz) = 38b8c2c1093dd0fec383a9d9ac940515</code>。

这是软件或者下载包的md5散列数值，我们可以计算我们下载的包的散列数值，并与该值进行对比，只有数值相同的才是正确、安全的下载。

这是防止软件被篡改，或者在传输过程造成的文件损坏，只要数据内部结构产生微小的变化，散列数值的结果就会发生很大的变动。

<strong>安全访问认证</strong>
当我们在程序中保存用户密码的时候，如果我们采用明文储存，当服务器权限或者管理员账号泄露，用户的密码就会被查询出来，根据我们的习惯，我们往往会在多个不同系统中使用相同的密码，这会造成更大的影响。

我们可以将用户的密码进行md5加密储存，在用户登录的时候，将输入内容进行md5加密，与储存的数值对比，这样子就可以在不需要知道用户的明文密码请求下完成认证验证。

当然这也不是绝对安全的，常见的方式有：字典反查、暴力穷举

暴力穷举先设定一个范围，并在这个范围内逐一地对数据进行验证，需要的运算量和时间比较大。

黑客往往拥有强大的<code>彩虹表</code>，这就是密码字典。这种表是为了破解密码的散列值而准备的，它将提前计算好的散列数值储存起来，通常都是100G以上。

当黑客拿到了hash散列数值，它可以通过在彩虹表中反查出对应该散列数值的原文，这样子就可以直接登录系统进行操作。

<h2>php中md5函数的漏洞</h2>

在PHP中，我们也常将md5哈希字符串进行对比，然而却没有在意处理的细节，导致漏洞的出现。

我们在运行以下的php脚本

<pre><code class="language-php line-numbers">&lt;?php
$str = md5('QNKCDZO');
var_dump($str == '0');
</code></pre>

打印出来的结果是：bool(true)

是不是与我们预想中的情况不一样，这明显是两个不一样的字符串，为什么会得到相等的结果。

我们将$str的值打印出来得到：<code>0e830400451993494058024219903391</code>

为什么<code>"0e830400451993494058024219903391" == "0"</code>会得到true的结果，这是因为PHP的语言特性，导致了问题的发生。

<h4>php是弱类型语言</h4>

因为php是弱类型语言，在使用<code>==</code>进行对比的时候，只判断两个参数的值，而不判断参数的类型。

我们运行该脚本，也一样能得到true的结果

<pre><code class="language-php line-numbers">&lt;?php
var_dump("0e830400451993494058024219903391" == 0);
</code></pre>

<h4>0e代表什么</h4>

除了以上demo的<code>QNKCDZO</code>，以下的字符进行MD5运行后的哈希值也会出现一样的问题

<pre><code class="line-numbers">QNKCDZO   =&gt; 0e830400451993494058024219903391
240610708 =&gt; 0e462097431906509019562988736854
s878926199a =&gt; 0e545993274517709034328855841020
s155964671a =&gt; 0e342768416822451524974117254469
s214587387a =&gt; 0e848240448830537924465865611904
s214587387a =&gt; 0e848240448830537924465865611904
</code></pre>

这些值的md5哈希结果全都是以<code>0e</code>开头的，我们来看看0e代表的是什么

首先我们了解一下科学计数法。

这是一种计数的写法，把一个数表示成a与10的n次幂相乘的形式<code>（1≤a&lt;10，n为整数）</code>

比如将650000记成 <code>6.5E+5</code>，在支持科学计数法的计算器中都可以测试，我们手机自带的计算器一般都有该功能。

但是在输入的时候要把<code>+</code>号省略，并且显示的E是小写的<code>e</code>

在PHP中 以下几种写法的结果相同

<pre><code class="language-php line-numbers">&lt;?php
echo 6.5E+5;
echo "\n";
echo 6.5E5;
echo "\n";
echo 6.5e5;
echo "\n";
</code></pre>

那么就可以来解释我们上面出现的问题了，以0e开头的数，如果是按科学计数法来计算，不管后面的幂是多大，它的值永远是等于0的。

所以<code>0e830400451993494058024219903391 == 0</code>

<h4>php对比数据时的类型选择</h4>

由于php是弱类型语言，在处理变量的时候，php内部会根据需要转换数据的格式

<pre><code class="language-php line-numbers">&lt;?php
$str = "100";
var_dump($str); // string(3) "100"

echo ($str - 99); // 1
</code></pre>

以上例子中，当一个字符串变量需要进行数值运算的时候，php先把它变成了一个数值类型，再计算。

那么我们一开始遇到问题的时候的<code>==</code>比较运算符号中，php也会根据场景将值转换为对应格式来比较

<ul>
<li>如果比较的数据中，有布尔值，则转为布尔值比较，布尔值比较有一个规则：true> false</li>
<li>如果比较的数据中，有数字值，就转为数字值比较</li>
<li>如果比较的数据中，两边的值都为 纯数字字符串 ，就转为数字值比较</li>
<li>如果以上都不符合，则按常规字符串比较</li>
</ul>

那么当我们 "0e830400451993494058024219903391" == "0" 的时候，符合第三点要求，两边都是数字字符串，会转为数字值比较，所以得到的结果是true。

<blockquote>
  <code>0e830400451993494058024219903391 === 0</code> 是错误的哦！ 因为科学计数法在php中会转为float类型  可以通过<code>var_dump(0e830400451993494058024219903391)</code>查看类型;
</blockquote>

<h4>问题以及解决</h4>

假设有一个会员账号设置的密码是 <code>240610708</code> ，那么登录的时候如果输入<code>s155964671a</code>或者其他的值（上面有列举了一些），他也是能登录成功的。

那么需要我们如何处理呢

我们将用户的密码md5储存在数据库中，取出来之后应该是string类型的，我们应该使用<code>恒等运算符</code>，来让php脚本限定两个参数的类型。

<pre><code class="language-php line-numbers">&lt;?php
var_dump("0e830400451993494058024219903391" === "0e342768416822451524974117254469") 
</code></pre>

脚本将会得到不相等的结果。

在php中，使用比较运算符的时候需要考虑数据类型的问题，防止特殊数据影响了判断的结果。

<h1>提示</h1>

关于MD5在PHP中的使用注意事项 将会有一篇新的文章罗列讲解，有兴趣可以在博客内搜索看一下。]]></content:encoded>
		<excerpt:encoded><![CDATA[## 什么是MD5
`md5`是一种密码散列函数，也叫密码散列算法。

`密码散列函数`是一种单向散列函数，它可以将给定的数据提取出`信息摘要`，也就是给定数据的`指纹信息`。结果的摘要信息格式是一致的，通常用一个短的随机字母和数字组成的字符串来代表。

### 密码散列函数的特点
* 对于任何一个给定的消息，它都很容易就能运算出散列数值。
* 难以用散列数值推算出原始数据。
* 数据变动（哪怕很微小），散列数值也会发生很大的变动。
* 单向散列函数生成的信息摘要是不可预见的。

算数模型为： ]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2019-09-18 20:18:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-18 12:18:17]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-18 20:47:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-18 12:47:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[md5%e5%8a%a0%e5%af%86%e4%bb%8b%e7%bb%8d%e4%bb%a5%e5%8f%8aphp%e4%b8%admd5%e7%9a%84%e6%bc%8f%e6%b4%9e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1514]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>734</wp:comment_id>
			<wp:comment_author><![CDATA[angevyges]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Opiteapex@rvmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-06 16:25:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-06 08:25:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://gcialisk.com/" / rel="nofollow ugc">buy cialis online 20mg</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[MD5在PHP中使用的注意事项]]></title>
		<link>https://blog.siammm.cn/archives/181</link>
		<pubDate>Wed, 18 Sep 2019 14:31:00 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>回顾知识</h1>

在之前的文章中，已经介绍过MD5的基础知识，以及特殊密码不符加密结果判断相等的情况

可以回顾一下该文章：<a href="https://www.siammm.cn/archives/179" title="历史文章 MD5介绍">历史文章 MD5介绍</a>

<h1>由于PHP==判断时优先转换数字的坑</h1>

这就是上一篇文章说到的问题的原因："0e830400451993494058024219903391" == "0e848240448830537924465865611904"

会是得到相同的结果，这两个字符串都属于数字类型的字符串（可以转换为数字，原因看上一篇文章），所以PHP优先转换为数字进行比较。

导致两个值都转换为0，所以相等。

<pre><code class="language-php line-numbers">var_dump("0e830400451993494058024219903391" == "0"); // true
var_dump("0e830400451993494058024219903391" == "0e8124"); // true
</code></pre>

<h1>由于PHP弱类型string int互转的坑</h1>

如果md5结果字符串不是以数字开头的，比如

<ul>
<li>dd456464545644ca456415</li>
<li>cc9787qr8eccaqerq151q5</li>
</ul>

等等，那么根据php strig转int类型

<pre><code class="language-php line-numbers">var_dump((int) "dd456464545644ca456415");
// int(0)
</code></pre>

如果判断与0的比较

<pre><code class="language-php line-numbers">var_dump("dd456464545644ca456415" !== 0); // false
</code></pre>

这样子的比较也会出现问题（不要抬杠说业务中几乎没人这样子用   万一有呢？）

<h1>如何解决</h1>

仅需要记住一个原则：MD5加密结果的判断都需要<code>===</code>执行即可。

<code>===</code>在PHP中的判断，不只是判断值，而且还要判断变量的类型，如果不同，则不相等。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date><![CDATA[2019-09-18 22:31:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-18 14:31:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-18 22:31:00]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-18 14:31:00]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[md5%e5%9c%a8php%e4%b8%ad%e4%bd%bf%e7%94%a8%e7%9a%84%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[935]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[VMware Workstation客户端 Centos系统 中文乱码 UTF-8字符无法正常显示]]></title>
		<link>https://blog.siammm.cn/archives/182</link>
		<pubDate>Thu, 19 Sep 2019 04:49:15 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>问题由来</h1>

发生该问题的时间比较长了，之前没有第一时间整理记录。依稀记得是因为系统重装之后，Vmware软件重新安装，然后导入以前的虚拟机配置文件，就出现了中文乱码的问题。

从百度上查到的各种资料，都是说语言包和配置的问题，需要重新安装、修改配置等等步骤，下面将记录我的尝试步骤和解决问题的方案。

<h1>尝试步骤</h1>

<h2>系统中文语言包</h2>

首先运行以下命令，查看当前系统的语言包中是否有中文语言包

<pre><code class="language-shell line-numbers">locale -a |grep "zh_CN"
</code></pre>

<img src="https://www.siammm.cn/wp-content/uploads/2019/09/0c21d6a79d1311c6e7d0f128f16dc530.png" alt="" />

如果没有安装那么就先安装语言包，可以执行以下命令（不同系统可能有一些差异 原理一致）

<pre><code class="language-shell line-numbers">yum groupinstall "fonts" -y
</code></pre>

安装好了之后就是要切换系统使用语言的配置

<h2>切换系统语言配置</h2>

先查看一下本机当前使用的配置

<pre><code class="language-shell line-numbers"># locale

LANG=zh_CN.utf8
LC_CTYPE="zh_CN.utf8"
LC_NUMERIC="zh_CN.utf8"
LC_TIME="zh_CN.utf8"
LC_COLLATE="zh_CN.utf8"
LC_MONETARY="zh_CN.utf8"
LC_MESSAGES="zh_CN.utf8"
LC_PAPER="zh_CN.utf8"
LC_NAME="zh_CN.utf8"
LC_ADDRESS="zh_CN.utf8"
LC_TELEPHONE="zh_CN.utf8"
LC_MEASUREMENT="zh_CN.utf8"
LC_IDENTIFICATION="zh_CN.utf8"
LC_ALL=
</code></pre>

可以看到我这里的虚拟机已经是使用了zh_CN的配置，所以该方法不是我这个问题导致的。

<blockquote>
  如果你这里的配置是en的语言，可以尝试以下步骤进行配置切换尝试
</blockquote>

<pre><code class="language-shell line-numbers"># vim /etc/locale.conf

LANG="zh_CN"

# source   /etc/locale.conf

</code></pre>

测试是否切换成功 可以输出日期

<pre><code class="language-shell line-numbers"># date
</code></pre>

<h2>重装系统</h2>

在以上语言包的切换方案不行之后，我还根据还几篇文章 不同的方法安装语言包和切换，都是不行的。

我从网上下载了新的镜像来安装虚拟机，开启之后也是一样的中文乱码。

那么基本可以排查是系统层面导致的问题。

我把目光转到了VM软件上来

<h2>尝试其他shell工具</h2>

我使用了putty这个开源简单的工具，然后就得到了正常的中文结果...

<h1>结论</h1>

应该是VM软件 在重装系统过程中遗留了一些配置文件，然后新安装的软件又版本等问题不一致，导致丢失，中文乱码吧。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2019-09-19 12:49:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-19 04:49:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-19 12:49:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-19 04:49:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vmware-workstation%e5%ae%a2%e6%88%b7%e7%ab%af-centos%e7%b3%bb%e7%bb%9f-%e4%b8%ad%e6%96%87%e4%b9%b1%e7%a0%81-utf-8%e5%ad%97%e7%ac%a6%e6%97%a0%e6%b3%95%e6%ad%a3%e5%b8%b8%e6%98%be%e7%a4%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="vmware"><![CDATA[VMware]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e8%99%9a%e6%8b%9f%e6%9c%ba"><![CDATA[虚拟机]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1514]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[132]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php定期拉取数据对比]]></title>
		<link>https://blog.siammm.cn/archives/183</link>
		<pubDate>Fri, 20 Sep 2019 12:59:01 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

今天在网上看帖子提问的时候，看到有人发表了一个提问

<blockquote>
  php下载远程的批量文件，每天一次，对比昨天和今天的文件，将旧文件替换成新文件
</blockquote>

我们通过这个问题来分析讲解一下其中的知识点。

首先要解决的问题是：如何让程序每天自动执行一次脚本

<h1>php定时执行任务</h1>

关于定时执行，最常见的方法是利用系统级别自带的功能

<ul>
<li>linux ( crontab 定时任务命令) windows计划任务</li>
</ul>

这需要手动修改系统的任务文件，然后使其生效

<h2>手动在linux添加定时任务</h2>

<pre><code class="language-shell line-numbers"># crontab -e
</code></pre>

运行该命令 打开任务编辑  在其中输入任务内容，然后Esc :wq保存退出

任务示例

<pre><code class="language-shell line-numbers">0 0 * * * /www/siam/test.sh
</code></pre>

前面的是运行周期的配置，后面的是sh脚本的路径，该方式一般需要自己编写sh脚本来执行

<h2>宝塔面板快速计划任务</h2>

如果我们使用宝塔面板当成运维工具，那么我们就可以很方便地添加计划任务了，如下图，宝塔中内置了挺多计划任务的类型，如定时请求URL，运行脚本，备份文件等等。

可视化配置，带给我们极大的便利，维护、添加都节约了很多的时间。

这也是为什么宝塔受到那么多人喜爱的原因之一吧。

<img src="https://www.siammm.cn/wp-content/uploads/2019/09/bd639225b7afebd3629be434c1cf7019.png" alt="宝塔面板计划任务的面板添加" />

<h2>取巧云监控定时执行</h2>

以上两种方式都需要服务器的权限，我们才可以管理定时任务，假设我们刚入门时使用的是虚拟主机，没有权限设置脚本运行，那么该如何实现这种功能呢？

这里记录了我以前学习时利用的一个小方案，大家可以在其中学习一下。

云监控，是很多云服务商提供的一项服务，它可以用来测试、分析接口或者网站的稳定性和执行效率。

我们可以在服务商的后台类似宝塔面板一样去添加任务，然后服务商就会按我们设置的频率，定期访问网址，获取网址的正确执行、时间等信息，记录到他们后台，提供给用户查看分析改进。

我们可以利用这种特性，由服务商向我们的服务发起请求，我们可以填写一个php脚本的url，在其中判断当前时间，如果当前时间周期已经到了你设置的时间，则执行下面的内容

同时因为云监控是不间断地发起（一般最细颗粒是30s） 如果不能重复运行的任务，我们需要及时地把任务标记为已经执行。

可以在本地写文件，当文件锁。

不同云监控服务商有不同的设置和服务提供，网上有挺多免费的。大家可以找一找，如果找不到好的，也可以联系我QQ交流一下。

<h2>现代化PHP</h2>

PHP发展了这么久，其实已经有了很大的改进，比如PHP5OOP特性的完善、PHP7的性能提高、Swoole生态的出现，让PHP能做的事越来越多，越做越好。

在当今环境中，我们可以使用SWOOLE常驻内存的特性完成很多事，

这里推荐一下<code>EasySwoole</code>这款基于Swoole环境的框架。

关于定时任务在EasySwoole框架中的文档地址点这里  <a href="https://www.easyswoole.com/Cn/BaseUsage/crontab.html" title="EasySwoole Crontab 定时器">EasySwoole Crontab 定时器</a>

常驻内存的程序，在服务器上后台稳定运行，

EasySwoole中提供了丰富的组件，比如传统PHPFPM环境很难解决的Mysql数据库连接池、协程Redis客户端、协程Http客户端、芒果DB客户端等等

还有我们这个主题有的一个定时任务的模块，下面看一小段demo代码

首先在主环境事件代码中开启定时任务

<pre><code class="language-php line-numbers">public static function mainServerCreate(EventRegister $register)
{
    // 开始一个定时任务计划
    Crontab::getInstance()-&gt;addTask(TaskOne::class);
}
</code></pre>

定时任务的配置和内容

<pre><code class="language-php line-numbers">namespace App\Crontab;

use EasySwoole\EasySwoole\Crontab\AbstractCronTask;

class TaskOne extends AbstractCronTask
{

    public static function getRule(): string
    {
        // TODO: Implement getRule() method.
        // 定时周期 （每小时）
        return '@hourly';
    }

    public static function getTaskName(): string
    {
        // TODO: Implement getTaskName() method.
        // 定时任务名称
        return 'taskOne';
    }

    static function run(\swoole_server $server, int $taskId, int $fromWorkerId,$flags=null)
    {
        // 定时任务处理逻辑

        // 我们在这里执行拉取文件、对比处理、保存文件的逻辑就好了
        var_dump('run once per hour');
    }
}
</code></pre>

<h1>其他问题</h1>

解决了定时执行的问题，那么下载文件和保存文件，我觉得应该都不会是很大的问题]]></content:encoded>
		<excerpt:encoded><![CDATA[PHP脚本经常在日常开发过程中需要定时执行，关于定时执行，最常见的方法是利用系统级别自带的功能。我们还可以利用云监控的特性来取巧完成这个行为，虽然不太稳定，但是至少面向小白用户，低成本完成需求。]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date><![CDATA[2019-09-20 20:59:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-20 12:59:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-20 21:13:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-20 13:13:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e5%ae%9a%e6%9c%9f%e6%8b%89%e5%8f%96%e6%95%b0%e6%8d%ae%e5%af%b9%e6%af%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1153]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[JS的字符串插值，变量长文本换行]]></title>
		<link>https://blog.siammm.cn/archives/185</link>
		<pubDate>Thu, 26 Sep 2019 16:18:09 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>苦逼的PHPer要写前端</h1>

作为一个PHPer，经常需要在html中写js jq来解析数据，形成列表、选项等等。

（谁让我们PHPer还要兼顾页面呢？？ 又不会Vue，只能这样子讨讨生活。）

那么就经常遇到Html代码拼接，或者字符串拼接，可能是这样子的问题

<pre><code class="language-javascript line-numbers"><br />let html = "";

for(...){
    html += "&lt;li&gt; " + data.name + "&lt;/li&gt;";
}
</code></pre>

这种还是简单的，只有一个li，如果是2层、3层的div嵌套，那么这里就会是一团糟糕

有没有优雅一点的写法呢，比如php中的

<pre><code class="language-php line-numbers">$text = &lt;&lt;&lt;xml
    ....
    222
    $$$
&gt;&gt;&gt;
</code></pre>

<h1>字符串插值特性</h1>

一些语言提供了字符串插值，幸运的是，JavaScript 正是其中之一。

<pre><code class="language-javascript line-numbers"><br />let name = 'siam';
let html  = `Siam博客是一个干净的博客
   作者: ${name}
   年龄: 21
`;

alert(html);
</code></pre>

我们将会得到这样子的结果

<img src="https://www.siammm.cn/wp-content/uploads/2019/09/1f66b1250f9c1ff3e1efffd17a4b37c5.png" alt="" />

可以看到，在字符串中，我们使用<code>${}</code>来使用变量。

这里也可以使用对象的属性 比如<code>$(this.job)</code>等等

非常的方便 优雅

是一个你必须知道的JS特性！！！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date><![CDATA[2019-09-27 00:18:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-26 16:18:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-09-27 00:18:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-09-26 16:18:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[js%e7%9a%84%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%8f%92%e5%80%bc%ef%bc%8c%e5%8f%98%e9%87%8f%e9%95%bf%e6%96%87%e6%9c%ac%e6%8d%a2%e8%a1%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="http"><![CDATA[HTTP]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[Jquery]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[166]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1184]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[easyswoole一键安装脚本,宝塔安装错误]]></title>
		<link>https://blog.siammm.cn/archives/186</link>
		<pubDate>Wed, 09 Oct 2019 04:09:06 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>常见问题</h1>

在新接触easyswoole的phper中，经常遇到以下几个问题

<ul>
<li>安装步骤多 麻烦</li>
<li>宝塔等集成环境下容易出错</li>
<li>自己会安装，但是懒  有没有一键的？</li>
</ul>

<h1>开始创造</h1>

本人作为easyswoole开发组组员之一。为生态的完善和偷懒着想，在某一天讨论中就开始有了这个想法。

并且写下了这个小脚本

<blockquote>
  需要注意的是，这只是几句很简单的命令，并且在文档中都有出现。只是文档有比较多的场景描述，可能导致有些新人没有细心观看到。
</blockquote>

在宝塔面板中，如果按照easyswoole文档第一步骤进行安装的话，是会产生错误的，在文档后续步骤会有解决方案，但是很多新人到了报错这里就不看了，或者就走了弯路。

使用这个脚本，可以直接安装成功，比较方便

最大的作用还是偷懒吧~

<h1>正文</h1>

<pre><code class="language-sh line-numbers">#!/bin/bash
composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/;
composer require easyswoole/easyswoole=3.x;
php vendor/easyswoole/easyswoole/bin/easyswoole install;
php easyswoole start;
</code></pre>

后续会将脚本放在服务器中，提供下载，真正达到一行命令安装。

<blockquote>
  2019-10-10更新
</blockquote>

已经将脚本放到es官方资源中 只要在linux中运行以下一行命令即可完成安装！Hello World!

<pre><code class="language-sh line-numbers">wget https://www.easyswoole.com/install.sh &amp;&amp; sed -i 's/\r$//' install.sh &amp;&amp; chmod +x ./install.sh &amp;&amp; ./install.sh
</code></pre>

<h1>注意点</h1>

该脚本会把全局的composer镜像切换为阿里云。
安装好了会默认自动启动]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2019-10-09 12:09:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-09 04:09:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-10 11:41:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-10 03:41:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[easyswoole%e4%b8%80%e9%94%ae%e5%ae%89%e8%a3%85%e8%84%9a%e6%9c%ac%e5%ae%9d%e5%a1%94%e5%ae%89%e8%a3%85%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[187]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1158]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[easyswoole mysql-pool连接池empty null的问题]]></title>
		<link>https://blog.siammm.cn/archives/188</link>
		<pubDate>Fri, 11 Oct 2019 07:27:06 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>问题由来</h1>

在easyswoole的群里，每天都需要回答各种各样的问题，其中不乏一些问题反复被小白们问起，比如今天的这个主题：<code>连接池取出empty 为null</code>导致的问题

本文会简单引申出<code>什么是连接池</code>、<code>连接池数量如何设置</code>、<code>连接池的优点</code>等问题。

<h1>什么是连接池</h1>

<blockquote>
  连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。
</blockquote>

简单来说，就是创建一个容器，并且把资源提前准备好放在里面，比如我们常用的redis连接、mysql连接。

<h1>连接池的优点</h1>

计算机是由许多零件组装而成，比如CPU、内存、硬盘等等。

当我们进行网络连接、请求的时候，就需要在不同组件中传递和返回各种信号、数据

比如在CPU、内存、网卡中，数据的传递，请求，获取。

如果在短时间内进行一万次mysql的连接，就需要在这个往返过程循环，在路上浪费了很多时间、性能消耗。

如果我们先把连接连接好，并且放在连接池中，程序中需要使用就从池中获取，执行操作。

就省去了反复创建连接、断开连接的操作。

可以减少I/O操作，提高资源利用率。

<h1>连接池数量如何设置</h1>

那么一个池需要设置多少数量比较合适呢？是不是越多越好？

在此之前，我们需要先了解计算机的进程原理，一个CPU伪造出多进程并行的假象。（我们电脑能一边听歌一边聊天等等）

我们把一个池中的连接看成一个进程（在实际中也可能是线程级别），如果设置过多，就会在系统中创建太多进程，切换进程上下文就会比较慢了。

一般我们把连接池数量设置为CPU的1~2倍即可（非固定）

<h1>easyswoole中为什么会pool empty</h1>

这个问题有好几个可能性。

<ul>
<li>连接信息错误，导致一个资源都没有</li>
<li>程序有问题，把资源拿出去，没有归还到池内，后续就拿到空了</li>
<li>并发高，池的数量少，需要检查资源占用率，如果占用率没问题，则提高池内的数量</li>
</ul>

<h2>连接信息错误</h2>

如果我们的mysql配置信息错误，在easyswoole框架启动之后，就会去初始化连接池。

此时一直连接失败，也就没有产生资源，也没有将资源放在池内

当你在后续程序获取池内资源的时候。自然就报了空池的错误提示。

<h2>程序问题</h2>

先来一个连接池的伪代码

<pre><code class="language-php line-numbers">&lt;?php

class Pool{
    public static function getIn(){
        // 单例模式
    }
    /**
     * 初始化
     */
    public function init()
    {
        // pool准备好就填充指定的资源 比如10个连接
        $this-&gt;pool = $array;
    }

    public function get(){
        return array_pop($this-&gt;pool);
    }   
    public function push($obj)
    {
        $this-&gt;pool[] = $obj;
    }
}
</code></pre>

如果我们的程序有这样子的使用场景

<pre><code class="language-php line-numbers">&lt;?php

    $db = Pool::getIn()-&gt;get();
    $res = $db-&gt;query('sql语句');
</code></pre>

然后没有进行push 归还操作，那么池内资源一旦拿完，就没有资源可用了。

在easyswoole框架中，有提供以下方法获取资源（以mysql-pool为例）

<pre><code class="language-php line-numbers">$db = MysqlPool::defer();
$db-&gt;rawQuery('select version()');
</code></pre>

<pre><code class="language-php line-numbers">$data = MysqlPool::invoker(function (MysqlConnection $db){
    return $db-&gt;rawQuery('select version()');
});
</code></pre>

<pre><code class="language-php line-numbers">$db = PoolManager::getInstance()-&gt;getPool(MysqlPool::class)-&gt;getObj();
$data = $db-&gt;get('test');
//使用完毕需要回收
PoolManager::getInstance()-&gt;getPool(MysqlPool::class)-&gt;recycleObj($db);
</code></pre>

defer方法将会在本次请求协程退出的时候自动回收

invoker是闭包函数方式  一次运行完马上自动回收

get方式 就是我们伪代码的方式 需要自己回收  使用这种方式就需要特别注意啦~！！！

<blockquote>
  两种自动回收方式怎么选择  请接着往下看！
</blockquote>

<h2>并发高  资源占用率</h2>

上面说到两种自动回收资源的方式，defer和invoker

首先我们来看一个点，defer是在协程退出时自动回收，正常来说，在一个请求到达的时候，swoole会自动创建一个协程给他，比如我们一个http api的请求，就需要整个api跑完，这个协程才会退出

（相当于我们传统fpm php中  一个脚本全部执行完）

这个时候问题来了，如果我们的业务是这样子的

<pre><code class="language-php line-numbers">&lt;?php

    $db = MysqlPool::defer();
    $db-&gt;rawQuery('select version()');

    // 执行好mysql了  做其他任务

    // 耗时1.5s 完成其他


</code></pre>

实际上使用到mysql资源的可能只有0.1s不到，但是其他运算占用了脚本大量执行时间，要等全部执行完，协程退出了，资源才会回收，这个时候就比较浪费资源的利用率了。占用率比较低。

如果整个程序都是这样子的场景。那么一个池内有十几二十个连接是完全不够用的。这也是大部分新人为什么在pool里设置100个连接的理由。。。。。我真的佩服哦！！！

如果可以的话 ，我们推荐使用invoker   执行一条 马上回收资源

此时要注意一个点，如果程序有比较多执行语句，要么在一个invoker里执行，要么合理使用invoker

不然就会把性能消耗转移到不断get  recycle上了

如果以上排查都没问题，并且确认你的用户量比较多，并发高，就可以适当提高pool的number]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2019-10-11 15:27:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-11 07:27:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-11 16:20:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-11 08:20:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[easyswoole-mysql-pool%e8%bf%9e%e6%8e%a5%e6%b1%a0empty-null%e7%9a%84%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1947]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[187]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>720</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.167]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-25 07:37:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-24 23:37:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vscialisv.com" rel="nofollow ugc">real cialis online[/url]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>735</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-07 03:18:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-06 19:18:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://propeciaset.com/" / rel="nofollow ugc">generic propecia for sale</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>757</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-20 04:33:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-19 20:33:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://gcialisk.com/" / rel="nofollow ugc">generic cialis for sale</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Navicat数据同步,主键重复无法插入]]></title>
		<link>https://blog.siammm.cn/archives/190</link>
		<pubDate>Wed, 16 Oct 2019 01:29:27 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>基础知识</h1>

<code>Navicat</code>是一个非常好用的可视化mysql管理软件（其他数据库也有对应版本的支持）

它拥有非常丰富的功能，结构同步、数据同步、数据传输、进程监控、数据导出导入等等

但这是一个付费软件，新用户可以免费试用，这个问题是笔者在以前试用处理数据的时候遇到的。

<h1>问题</h1>

在A和B机器上分别有<code>结构相同</code>，<code>数据不完全相同</code>的两个数据库

比如

A机器上的表

<table>
<thead>
<tr>
  <th>id</th>
  <th>name</th>
  <th>age</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>宣言</td>
  <td>21</td>
</tr>
<tr>
  <td>2</td>
  <td>Siam</td>
  <td>21</td>
</tr>
</tbody>
</table>

B机器上的表

<table>
<thead>
<tr>
  <th>id</th>
  <th>name</th>
  <th>age</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>宣言B</td>
  <td>22</td>
</tr>
<tr>
  <td>2</td>
  <td>SiamB</td>
  <td>22</td>
</tr>
</tbody>
</table>

现在要实现的点是：将两个表的数据合并为一个，以后统一使用一个数据库即可。

在使用数据同步的时候，能筛选出不同数据，但是却不能运行，因为筛选出的数据主键在第二个数据库中已经被占用。

使用软件，选择A同步到B，那么会筛选出id 1 2两条数据

生成的语句却是以下这样子的

<pre><code class="language-sql line-numbers">insert into 表名 (id, name, age) values (1, '宣言', 21) ...
</code></pre>

在B中运行这样的语句。主键id重复，自然就会产生失败了

<h1>问题怎么解决</h1>

因为我这里需要处理的数据量比较小

我这里采用的是比较直接的方法，如果有更好的方式，请大家在评论中留言，一起探讨

<ul>
<li>在A中筛选出差异数据（可以根据软件或者其他筛选条件等）</li>
<li>数据压缩成json字符串，大概如图所示
<img src="https://www.siammm.cn/wp-content/uploads/2019/10/e2aca9df4caaed6b9aca85e491140a1b.png" alt="" /></li>
<li>json文件上传到B机器中，写一个脚本，读取json 并且删除id主键，重新生成insert语句</li>
</ul>

<pre><code class="language-php line-numbers">$data = file_get_contents("./data.txt");
$data = json_decode($data, true);

foreach ($data as $key =&gt; $value){
    unset($value['id']);
    $sql = "INSERT xxx " . array_to_sql($value);
    mysql_query($sql,$db);
}
echo "ok";
</code></pre>

因为是一个临时的脚本，这里就没有引入其他类库，用了面向过程的php代码来完成，大概思路就是这样子。

<blockquote>
  如果是使用mysqladmin，还可以在导出的时候直接选成导出php array  也许会更方便哦！
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2019-10-16 09:29:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-16 01:29:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-16 09:29:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-16 01:29:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[navicat%e6%95%b0%e6%8d%ae%e5%90%8c%e6%ad%a5%e4%b8%bb%e9%94%ae%e9%87%8d%e5%a4%8d%e6%97%a0%e6%b3%95%e6%8f%92%e5%85%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[195]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1405]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[21个数学原理 gif图演示]]></title>
		<link>https://blog.siammm.cn/archives/196</link>
		<pubDate>Thu, 17 Oct 2019 00:48:53 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=196</guid>
		<description></description>
		<content:encoded><![CDATA[本系列文章主要是分享我所见到的有趣的有价值的文章，所以会附上原文链接。

资源来自互联网，如有侵权，请联系站长删除。

原文链接：https://www.sohu.com/a/194412105_750370

<h1>正文</h1>

<h2>1.被简单证明的勾股定理</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/1.gif" alt="" />

<h2>2.勾股定理的面积证明法</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/2.gif" alt="" />

<h2>3.周长和直径的π点小事</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/3.gif" alt="" />

<h2>4.圆的面积=2πr?</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/4.gif" alt="" />

<h2>5、圆周率π</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/5.gif" alt="" />

<h2>6、椭圆画法</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/6.gif" alt="" />

<h2>7.正切值曲线</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/7.gif" alt="" />

<h2>8.圆规和正方形的爱恨纠缠</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/8.gif" alt="" />

<h2>9、一弧度就是长度刚好等于半径的一段圆弧所对的圆心角</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/9.gif" alt="" />

<h2>10、在Y轴上使用正弦(红色)，在X轴上使用余弦(蓝色)，则在XY轴平面上画出的环形如下图(黑色)</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/10.gif" alt="" />

<h2>11、将一个公式从笛卡尔坐标转换成轴坐标</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/11.gif" alt="" />

<h2>12、画抛物线</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/12.gif" alt="" />

<h2>13、将双曲线表现成 3D 形式，也许你不相信，它完全是用直线画成的</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/13.gif" alt="" />

<h2>14、考赛因和赛因的你追我赶</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/14.gif" alt="" />

<h2>15、多边形的外角之和总是等于 360 度</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/15.gif" alt="" />

<h2>16、使用“FOIL”轻松的解决二项式乘法</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/16.gif" alt="" />

<h2>17、矩阵转置的技巧</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/17.gif" alt="" />

<h2>18、杨辉三角问题(Pascal triangles)解法</h2>

原文丢失

<h2>19.谢尔宾斯基三角形</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/19.gif" alt="" />

<h2>20、得到永生的证明</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/20.gif" alt="" />

<h2>21、最后，放一张数学家很会玩之胖子超人的诞生，咦？这不是大白吗</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/17/21.gif" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2019-10-17 08:48:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-17 00:48:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-17 09:29:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-17 01:29:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a5%bd%e8%a7%86%e9%a2%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1075]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[199]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[《开讲啦》徐星——恐龙、科学、好奇心、孩童般的快乐]]></title>
		<link>https://blog.siammm.cn/archives/202</link>
		<pubDate>Fri, 18 Oct 2019 07:59:35 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=202</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>原文链接</h1>

<a href="http://tv.cctv.com/2019/06/02/VIDEHWza75wnRSgbCv3z6OXZ190602.shtml" title="原文链接《开讲啦》">原文链接《开讲啦》</a>

<blockquote>
  本期嘉宾是中国科学院古脊椎与古人类研究所研究员、古生物学家——徐星。徐星是目前世界上发现并命名恐龙最多的科学家，超过七十余种。其中徐星及其团队在2005年于内蒙古境内挖掘发现的二连巨盗龙是迄今发现最大体型的长羽毛恐龙，被美国时代杂志评为07年世界十大科技突破。
</blockquote>

<h1>推荐原因</h1>

想要让演讲击中人的内心，那么演讲者必须先迸发热情，观众才能代入到其中，走向他心中的世界。

徐星先生，从上台开始就给我留下了比较深刻的印象，比较积极主动，带着微笑。

在开讲过程中也以幽默生动的语言，给我们讲述了一个又一个的恐龙故事。

青年代表中还有一位让我印象同样深刻的儿童，他的提问、他的思考、他的热爱，带给我更多的感悟——我们应该怎么做，来保持自己的好奇心，从而获得孩童般的快乐。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>202</wp:post_id>
		<wp:post_date><![CDATA[2019-10-18 15:59:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-18 07:59:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-18 15:59:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-18 07:59:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8a%e5%bc%80%e8%ae%b2%e5%95%a6%e3%80%8b%e5%be%90%e6%98%9f-%e6%81%90%e9%be%99%e3%80%81%e7%a7%91%e5%ad%a6%e3%80%81%e5%a5%bd%e5%a5%87%e5%bf%83%e3%80%81%e5%ad%a9%e7%ab%a5%e8%88%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[199]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1122]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[《数据结构与算法基础》B站教学视频]]></title>
		<link>https://blog.siammm.cn/archives/203</link>
		<pubDate>Mon, 21 Oct 2019 01:32:46 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=203</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>原文链接</h1>

:revolving_hearts: <a href="https://www.bilibili.com/read/cv3285768" title="原文链接">原文链接</a>

<h1>怎么发现</h1>

宣言在计算"最短路径问题"的时候，接触到了Dijkstra算法，但是从文字上看这个算法是比较枯燥的，想要寻找类似以前我推荐的文章一样，可以用gif图演示原理的教程。

于是一路寻找下来，找到该老师在B站上的视频，顺利完成了学习，理解了计算的过程。

<h1>为什么推荐</h1>

该老师是介绍青岛大学的教师，虽然我只看了两三节视频，但是不影响我对该系列视频的推荐。

老师的PPT和讲解点还是比较不错的，比较容易理解。

该系列视频非常齐全，估算大概有一百多节视频，相信是老师倾注了大量的精力心血在上面，也相信热情带来的是美好。

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/6b6e971c52f7fa861c126781fd22254c.png" alt="B站算法视频预览截图" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2019-10-21 09:32:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-21 01:32:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-21 09:33:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-21 01:33:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8a%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%b8%8e%e7%ae%97%e6%b3%95%e5%9f%ba%e7%a1%80%e3%80%8bb%e7%ab%99%e6%95%99%e5%ad%a6%e8%a7%86%e9%a2%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[935]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[199]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>726</wp:comment_id>
			<wp:comment_author><![CDATA[angevyges]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Opiteapex@rvmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-04 16:50:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-04 08:50:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vsviagrav.com/" / rel="nofollow ugc">sublingual viagra</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[宝塔面板数据库迁移一种小技巧方式]]></title>
		<link>https://blog.siammm.cn/archives/204</link>
		<pubDate>Fri, 25 Oct 2019 03:38:42 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

主要是自己偷懒过程琢磨出来测试的一种方式，迁移成功，所以写下这篇文章稍微记录一下操作步骤。

<h1>宝塔面板</h1>

宝塔面板是很方便的一款服务器管理操作面板，拥有很多服务器管理的常见操作的可视化。

今天我们要用到的是它的 <code>数据库备份</code> 功能

<h1>开始操作</h1>

要迁移数据，那么一般情况下两边服务器的mysql版本、配置应该<code>保持一致</code>

将变化的可能性尽可能减低，否则你不会预料到迁移过后会发生什么事..

其实这个方法只是在恢复数据的时候一种小灵活的手法。主体逻辑还是没有变化的。

<ul>
<li>先利用宝塔的数据库备份功能打包数据</li>
<li>下载数据压缩包</li>
<li>在新的服务器上创建同样名字的数据库</li>
<li>备份新服务器上的数据库（空，数据为0kb）</li>
<li>将第二步下载的压缩包上传到新服务器上的备份目录</li>
<li>将第四步备份的空压缩包名字复制，然后文件删除</li>
<li>原数据压缩包的名字修改为上一步复制下来的文件名</li>
<li>宝塔面板点击恢复数据</li>
</ul>

下面附带几张截图说明

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/343a85379ad0d11c90c05e72080cebd4.png" alt="" />

下载压缩包 宝塔默认的备份目录为 <code>/www/backup/database</code>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/76fdbbab0a1d2528f8d8755deee7171a.png" alt="" />

新的服务器先创建数据库，然后备份一个空的数据

进入备份目录，把备份下来的空压缩包复制文件名，文件删除

上传第二步下载的压缩包，然后修改文件名

进入数据库备份管理，恢复数据]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2019-10-25 11:38:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-25 03:38:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-25 11:38:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-25 03:38:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%9d%e5%a1%94%e9%9d%a2%e6%9d%bf%e6%95%b0%e6%8d%ae%e5%ba%93%e8%bf%81%e7%a7%bb%e4%b8%80%e7%a7%8d%e5%b0%8f%e6%8a%80%e5%b7%a7%e6%96%b9%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1149]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[仿新版微信转账页面 源码分享]]></title>
		<link>https://blog.siammm.cn/archives/205</link>
		<pubDate>Fri, 25 Oct 2019 03:59:07 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=205</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>截图预览</h1>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/61f54bc11a4a4013bc37cb1e3f97cb7b.png" alt="微信转账页面模板" />
<br/>
<img src="https://www.siammm.cn/wp-content/uploads/2019/10/92f1d693e976107f54a083ef1143e932.png" alt="仿新版微信转账页面 首页" />

<br/>

<img src="https://www.siammm.cn/wp-content/uploads/2019/10/3c54b4f07c2839dfbe4483ecc828a0a3.png" alt="仿新版微信转账页面 输入金额" />

<h1>介绍</h1>

主要用途：

<ul>
<li>支付系统页面 商户收款系统</li>
<li>门店系统的支付页面</li>
<li>支付成功后跳转广告页</li>
</ul>

功能：

<ul>
<li>模拟光标闪烁</li>
<li>金额小数点检测</li>
<li>金额小数点后位数检测</li>
<li>布局兼容</li>
</ul>

<h1>获取方式</h1>

因为本人服务器是小水管。承载不了下载量。

请添加我QQ 或者进交流群 私聊我发送。

<ul>
<li>QQ 59419979</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2019-10-25 11:59:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-25 03:59:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-25 12:00:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-25 04:00:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bb%bf%e6%96%b0%e7%89%88%e5%be%ae%e4%bf%a1%e8%bd%ac%e8%b4%a6%e9%a1%b5%e9%9d%a2-%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="category" nicename="%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab"><![CDATA[源码分享]]></category>
		<category domain="post_tag" nicename="%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab"><![CDATA[源码分享]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1283]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>737</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-07 17:30:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-07 09:30:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://priligyset.com/" / rel="nofollow ugc">dapoxetine</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[《开讲啦》日本著名光化学科学家——藤岛昭，幽默、科普、乐观主义、机会观念]]></title>
		<link>https://blog.siammm.cn/archives/206</link>
		<pubDate>Mon, 28 Oct 2019 11:26:12 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=206</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>原文链接</h1>

<a href="http://tv.cctv.com/2019/10/20/VIDENh1UwrPrR6prBvh1frHp191020.shtml?spm=C31267.PosekSpq74e8.EuKJr2VI3VlW.215" title="原文链接《开讲啦》">原文链接《开讲啦》</a>

<blockquote>
  本期嘉宾，藤岛昭，中国工程院外籍院士、日本著名光化学科学家。一个亲中的日本人，也是一个伟大的科学家，在光化学领域探索的前辈。培育了38名中国留学生，是中日文化、科学交流的桥梁。
</blockquote>

<h1>推荐原因</h1>

不知道是否因为日语独特的语气和词语，教授上台第一件事就是开始做实验，并且“自带配音”，第一印象是非常幽默可爱。

通过两三个简单的小实验，配合开讲啦精心制作的小短片，科普了光化学作用的原理和知识，能实实在在学到一点东西。

在提问过程中，我国青年代表有问到——光吸收甲醛的问题，学习到现在暂时没有靠谱的光化学产品上市出售；如果在室内装紫外线灯+光催化材料可以吸收甲醛，也可以在空调等地方加装，节约经济。

最重要的一点原因，是日本青年代表提问：如果在科学实验过程中不顺利，需要怎么做？

“那就是机会啊，如果实验一切都很顺利，那代表着这没什么大不了的，只是一件普通的事。如果遇到问题，所有人都无法解决，那么这就是你的机会所在”]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2019-10-28 19:26:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-28 11:26:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-28 19:26:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-28 11:26:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8a%e5%bc%80%e8%ae%b2%e5%95%a6%e3%80%8b%e6%97%a5%e6%9c%ac%e8%91%97%e5%90%8d%e5%85%89%e5%8c%96%e5%ad%a6%e7%a7%91%e5%ad%a6%e5%ae%b6-%e8%97%a4%e5%b2%9b%e6%98%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[199]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2148]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>721</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-25 14:49:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-25 06:49:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://vscialisv.com" rel="nofollow ugc">cialis online purchase[/url]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>736</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-07 10:20:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-07 02:20:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vsamoxilv.com/" / rel="nofollow ugc"></a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[EasySwoole安装，包含所有组件]]></title>
		<link>https://blog.siammm.cn/archives/207</link>
		<pubDate>Tue, 29 Oct 2019 09:42:20 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=207</guid>
		<description></description>
		<content:encoded><![CDATA[所有组件可以直接用，无需再一个一个引入，总大小8.6Mb

<pre><code class="language-json line-numbers">{
    "repositories": {
        "packagist": {
            "type": "composer",
            "url": "https://mirrors.aliyun.com/composer/"
        }
    },
    "require": {
        "easyswoole/easyswoole": "3.x",
        "easyswoole/orm": "^1.0",
        "easyswoole/redis": "^1.0",
        "easyswoole/wechat": "^1.0",
        "easyswoole/pay": "^1.2",
        "easyswoole/actor": "^2.0",
        "easyswoole/validate": "^1.2",
        "easyswoole/http": "^1.4",
        "easyswoole/atomic-limit": "^1.0",
        "easyswoole/queue": "^2.0",
        "easyswoole/redis-pool": "^2.0",
        "easyswoole/apollo": "^1.0",
        "easyswoole/ddl": "^1.0",
        "easyswoole/pool": "^1.0",
        "easyswoole/sync-invoker": "^1.0",
        "easyswoole/easy-whoops": "^3.0",
        "easyswoole/template": "^1.0",
        "easyswoole/task": "^1.0",
        "easyswoole/spl": "^1.3",
        "easyswoole/consul": "^1.0",
        "easyswoole/jwt": "^1.0",
        "easyswoole/memcache": "^1.0",
        "easyswoole/crypto": "^1.0",
        "easyswoole/log": "^1.0",
        "easyswoole/apollo-config": "^1.0",
        "easyswoole/config": "^1.0",
        "easyswoole/phpunit": "^1.0",
        "easyswoole/session": "^1.0",
        "easyswoole/annotation": "^1.0",
        "easyswoole/console": "^2.0",
        "easyswoole/policy": "^1.0",
        "easyswoole/verifycode": "^3.0",
        "easyswoole/trace": "^1.1"
    }
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2019-10-29 17:42:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-29 09:42:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-10-29 17:42:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-10-29 09:42:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[easyswoole%e5%ae%89%e8%a3%85%ef%bc%8c%e5%8c%85%e5%90%ab%e6%89%80%e6%9c%89%e7%bb%84%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[187]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1736]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php对象字段声明,easyswoole ORM 快速生成注释]]></title>
		<link>https://blog.siammm.cn/archives/210</link>
		<pubDate>Tue, 12 Nov 2019 03:40:03 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>ide提示</h1>

在PHPSTORM IDE中，我们可以通过注释给类写明可调用字段名，这样子才有语法提示。

比如在Thinkphp中，虽然允许我们可以通过对象属性方式去调用，但是并没有语法提示。

添加注释后 就舒服很多了。

格式如下

<pre><code class="language-php line-numbers">/**
 * Class RefundDetail
 * @property test_field 测试字段名
 */
class RefundDetail extends Mode
{

}
</code></pre>

使用

<pre><code class="language-php line-numbers">$class = new RefundDetail();
$class-&gt;test
</code></pre>

当我们输入一部分的时候，IDE就会提示我们语法啦~直接选中就可以了

<h1>easyswoole</h1>

在easyswoole中也是一样的，我们可以快速给类生成注释来达到语法提示

我写了一个小工具，可以通过SQL create table 语句，分析生成注释

<pre><code class="language-javascript line-numbers">$("#value").on("change", function () {
    let string = $("#value").val();

    if (string.slice(0, 6) !== "CREATE" &amp;&amp; string.slice(0, 6) !== "create") {
        alert("sql非法 请传入create table sql");
        return false;
    }


    let array = string.split(/[\n]/);

    let firstLine = array[0];
    var regExp = /`(.*?)`/gi;
    let dbName = regExp.exec(firstLine)[1];
    let tableName = regExp.exec(firstLine)[1];
    let returnString = `
/**
 * ${tableName}`;
    $.each(array, function (index, item) {
        if (index == 0) {
            return true;
        }
        // 判断是否为索引
        if (item.indexOf("PRIMARY KEY") != -1) {
            return false;
        }
        let regExpField = /`(.*?)`/gi;
        let field = regExpField.exec(item);

        if (field == null) {
            return true;
        }
        let comment = '';
        let commentExp = /'(.*?)'/gi;
        let commentReg = commentExp.exec(item);
        if (commentReg !== null) {
            comment = commentReg[1];
        }
      returnString += `
 * @property $${field[1]} ${comment}`;
    });
  returnString += `
 */`;
  console.log(returnString);
})
</code></pre>

效果如图

<img src="https://www.siammm.cn/wp-content/uploads/2019/11/de0746d4eb7762f74c72dc934fa7d01f.png" alt="" />

我的博客即将同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=8vto1mh8z7c8]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date><![CDATA[2019-11-12 11:40:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-12 03:40:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-12 11:16:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-12 03:16:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e5%af%b9%e8%b1%a1%e5%ad%97%e6%ae%b5%e5%a3%b0%e6%98%8eeasyswoole-orm-%e5%bf%ab%e9%80%9f%e7%94%9f%e6%88%90%e6%b3%a8%e9%87%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[187]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2138]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[《愿你历尽千帆，归来仍是少年》精美句子]]></title>
		<link>https://blog.siammm.cn/archives/211</link>
		<pubDate>Thu, 21 Nov 2019 00:42:30 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>素心人的坚守</h2>

<ul>
<li>我越来越强烈地感到，每天都汲汲于生或是汲汲于死的人们，大多掩饰不住越发强烈的渴望、迷惘和焦虑，逐渐作茧自缚，只有依靠外在物质的刺激，才能重新快乐起来。而那些多年来通过读书、探讨形成的思维方式和行为习惯，也正在悄悄滋润着另一些并不那么光鲜、奢华的简单生命。</li>
</ul>

<h2>上善若水</h2>

<ul>
<li>毕竟，无论饥馑还是富足，多了一份陪伴，人就不再孤单。</li>
<li>上善若水，水利万物而不争。</li>
</ul>

<h2>夏天的雨和梦魇</h2>

<ul>
<li>那么，走那么远，究竟图个什么？
大概是一定得找到那个在夏夜里不会幽怨地下午的乐土，然后安稳地住下去。
亦或遇到一个灵魂契合的赏雨之人，温一壶月光作酒，开怀对饮。</li>
</ul>

<h2>冬</h2>

<ul>
<li>突然就好想写点什么，因为生老病死，轮回不息。美好，伤痛，遗憾，满足...没有什么是永恒的。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2019-11-21 08:42:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-21 00:42:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-11-27 09:11:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-11-27 01:11:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%8a%e6%84%bf%e4%bd%a0%e5%8e%86%e5%b0%bd%e5%8d%83%e5%b8%86%ef%bc%8c%e5%bd%92%e6%9d%a5%e4%bb%8d%e6%98%af%e5%b0%91%e5%b9%b4%e3%80%8b%e7%b2%be%e7%be%8e%e5%8f%a5%e5%ad%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[212]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1161]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PHP中simplexml_load_string解析xml的正确方式]]></title>
		<link>https://blog.siammm.cn/archives/221</link>
		<pubDate>Wed, 18 Dec 2019 06:57:28 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=221</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>前言</h1>

为什么写这篇文章，因为他娘的宣言又踩坑了。

在对接别人接口时，他们使用的是xml格式交互的。

其中的格式可能如下

<pre data-language=XML><code class="language-markup line-numbers">    &lt;RSP2003&gt;
      &lt;TotalNum&gt;39&lt;/TotalNum&gt;
      &lt;CityList&gt;
        &lt;CityCode&gt;N1127&lt;/CityCode&gt;
        &lt;CityName&gt;三水四会&lt;/CityName&gt;
        &lt;CityTypeCode&gt;3&lt;/CityTypeCode&gt;
        &lt;CityTypeName&gt;内陆城市&lt;/CityTypeName&gt;
        &lt;PinyinJX&gt;SSSH&lt;/PinyinJX&gt;
        &lt;PinyinQP&gt;Sanshuisihui&lt;/PinyinQP&gt;
        &lt;CityOrder&gt;207&lt;/CityOrder&gt;
        &lt;CityOperationType&gt;2&lt;/CityOperationType&gt;
      &lt;/CityList&gt;
      // 这是一个list  如果还有更多元素 就在下面继续
      &lt;CityList&gt;
        &lt;CityCode&gt;N1127&lt;/CityCode&gt;
        &lt;CityName&gt;三水四会&lt;/CityName&gt;
        &lt;CityTypeCode&gt;3&lt;/CityTypeCode&gt;
        &lt;CityTypeName&gt;内陆城市&lt;/CityTypeName&gt;
        &lt;PinyinJX&gt;SSSH&lt;/PinyinJX&gt;
        &lt;PinyinQP&gt;Sanshuisihui&lt;/PinyinQP&gt;
        &lt;CityOrder&gt;207&lt;/CityOrder&gt;
        &lt;CityOperationType&gt;2&lt;/CityOperationType&gt;
      &lt;/CityList&gt;
    &lt;/RSP2003&gt;
</code></pre>

有的情况下，<code>CityList里只有一个元素</code>，一般情况下是<code>多个</code>

一开始写的php程序如下

<pre><code class="language-php line-numbers">&lt;?php
$xml = '伪代码 xml字符串如上';

echo json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA));
</code></pre>

<h2>只有一个元素的时候</h2>

<pre><code class="language-json line-numbers">"RSP2003": {
    "TotalNum": "39",
    "CityList": {
        "CityCode": "N1127",
        "CityName": "\u4e09\u6c34\u56db\u4f1a",
        "CityTypeCode": "3",
        "CityTypeName": "\u5185\u9646\u57ce\u5e02",
        "PinyinJX": "SSSH",
        "PinyinQP": "Sanshuisihui",
        "CityOrder": "207",
        "CityOperationType": "2"
    }
}
</code></pre>

<h2>多个元素的时候</h2>

<pre><code class="language-json line-numbers">"RSP2003": {
    "TotalNum": "39",
    "CityList": [{
        "CityCode": "N1127",
        "CityName": "\u4e09\u6c34\u56db\u4f1a",
        "CityTypeCode": "3",
        "CityTypeName": "\u5185\u9646\u57ce\u5e02",
        "PinyinJX": "SSSH",
        "PinyinQP": "Sanshuisihui",
        "CityOrder": "207",
        "CityOperationType": "2"
    }, {
        "CityCode": "N1128",
        "CityName": "\u5927\u6ca5\u76d0\u6b65",
        "CityTypeCode": "3",
        "CityTypeName": "\u5185\u9646\u57ce\u5e02",
        "PinyinJX": "DLYB",
        "PinyinQP": "daliyanbu",
        "CityOrder": "208",
        "CityOperationType": "2"
    }]
</code></pre>

<h2>问题所在</h2>

对接我php接口的是安卓客户端，json字符串中在一个元素的时候是对象类型，多个元素的时候是数组类型，安卓客户端解析就失败了。

所以引申出这篇文章，详细测试、记录一下php中解析xml方式和细节

<h1>simplexml_load_string</h1>

<code>simplexml_load_string</code>函数将会把<code>每一个节点</code>都解析成一个<code>SimpleXMLElement</code>对象

php官方文档地址：https://www.php.net/manual/zh/class.simplexmlelement.php

注意这里我描述的是：每一个节点。

首先我们先来解析一个最简单的例子

<pre><code class="language-php line-numbers">$xml = &lt;&lt;&lt;xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;RSP2003&gt;
    &lt;TotalNum&gt;39&lt;/TotalNum&gt;
&lt;/RSP2003&gt;
xml;
$object = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA);
var_dump($object);
</code></pre>

输出内容

<pre><code class="line-numbers">object(SimpleXMLElement)#1 (1) {
  ["TotalNum"]=&gt;
  string(2) "39"
}
</code></pre>

可以看到，这里是一个对象，我们需要怎么获取里面的TotalNum节点呢，TotalNum这个值又是什么类型的？ <code>在这一步打印出来它是一个string类型</code>  我们接着看吧

<pre><code class="language-php line-numbers">var_dump($object-&gt;TotalNum);
</code></pre>

输出  TotalNum又是一个SimpleXMLElement对象，它的值储存在[0]中 <code>我们写数组的下标</code>

<pre><code class="line-numbers">object(SimpleXMLElement)#2 (1) {
  [0]=&gt;
  string(2) "39"
}
</code></pre>

继续取出

<pre><code class="line-numbers">var_dump($object-&gt;TotalNum[0]);
</code></pre>

输出内容 <code>注意哈。这里是真实的运行结果，不是我复制重复了(对象的编号已经增加了)，自己可以去测试一下</code>

<pre><code class="line-numbers">object(SimpleXMLElement)#4 (1) {
  [0]=&gt;
  string(2) "39"
}
</code></pre>

那么我们这个值到底怎么取出呢！！

<h2>取出SimpleXMLElement对象的值</h2>

<pre><code class="line-numbers">var_dump($object-&gt;TotalNum-&gt;__toString());
</code></pre>

回到我们最开始的问题，怎么解析xml列表

<h2>解析列表，（只有一个元素也为数组）</h2>

<pre><code class="language-php line-numbers">&lt;?php

$xml = &lt;&lt;&lt;xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;RSP2003&gt;
    &lt;TotalNum&gt;39&lt;/TotalNum&gt;
    &lt;CityList&gt;
        &lt;CityName&gt;第一个城市&lt;/CityName&gt;
    &lt;/CityList&gt;
    &lt;CityList&gt;
        &lt;CityName&gt;第二个城市&lt;/CityName&gt;
    &lt;/CityList&gt;
&lt;/RSP2003&gt;
xml;

$object = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA);

var_dump(count($object-&gt;TotalNum)); // 1
var_dump(count($object-&gt;CityList)); // 2
var_dump($object-&gt;CityList-&gt;count()); // 2

var_dump($object-&gt;CityList[0]);
var_dump($object-&gt;CityList[1]);
</code></pre>

<h2>用法探讨</h2>

尝试了挺多种逻辑，都无法用函数封装成自动解析（因为每一个节点都是平等的，怎么知道它要解析成数组还是对象呢？）

<code>如果你有好想法，希望能留言一起讨论</code>

我觉得只能面向过程式地手动组装成数组，然后输出api结果]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date><![CDATA[2019-12-18 14:57:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-18 06:57:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-12-18 16:16:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-12-18 08:16:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e4%b8%ad%e8%a7%a3%e6%9e%90xml%e7%9a%84%e6%ad%a3%e7%a1%ae%e6%96%b9%e5%bc%8f%ef%bc%8cphp%e4%b8%ad%e8%a7%a3%e6%9e%90xml%e7%9a%84%e6%96%b9%e5%bc%8f%e5%af%b9%e6%af%94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1092]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php-fpm应用与php-swoole应用进行通信]]></title>
		<link>https://blog.siammm.cn/archives/229</link>
		<pubDate>Thu, 02 Jan 2020 06:02:53 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>基础要求</h1>

<ul>
<li>linux万物皆文件</li>
<li>socket通信</li>
<li>基础进制转换</li>
</ul>

原文地址：<a href="https://www.siammm.cn/archives/229" title="https://www.siammm.cn/archives/229">https://www.siammm.cn/archives/229</a>

<h1>写在前面</h1>

这篇文章是自己练习的内容，主要想实现应用间的通信机制。

<h1>Workerman中提供的建议方案</h1>

<blockquote>
  与其它mvc框架结合建议以上图的方式(ThinkPHP为例)：<br/>
  1、ThinkPHP与Workerman是两个独立的系统，独立部署(可部署在不同服务器)，互不干扰。<br/>
  2、ThinkPHP以HTTP协议提供网页页面在浏览器渲染展示。<br/>
  3、ThinkPHP提供的页面的js发起websocket连接，连接workerman<br/>
  4、连接后给Workerman发送一个数据包(包含用户名密码或者某种token串)用于验证websocket连接属于哪个用户。<br/>
  5、仅在ThinkPHP需要向浏览器推送数据时，才调用workerman的socket接口推送数据。<br/>
  6、其余请求还是按照原本ThinkPHP的HTTP方式调用处理。<br/>
  总结：<br/>
  把Workerman作为一个可以向浏览器推送的通道，仅仅在需要向浏览器推送数据时才调用Workerman接口完成推送。业务逻辑全部在ThinkPHP中完成。
</blockquote>

我们使用swoole环境的常驻内存、协程特性来做一些其他事务，如：任务队列及其消费、缓存、异步执行等情况时

可以如建议中第5步所说，FPM环境调用Swoole环境提供的接口（可以用TCP/HTTP等方式）来开始一个任务

<h1>进程通信</h1>

上面的方案可以用在单机中，也可以用在集群部署中。

进程通信一般仅限于单机中使用

进程通信的方式有好几种，这里主要写明我测试的一种。

<h2>unix socket 文件</h2>

在linux环境中，万物皆为文件，套接字也可以用文件来表示，然后一个进程（一般是swoole环境）监听它，其他进程（FPM环境）连接它，并且发送数据

<blockquote>
  这里使用的是Easyswoole框架提供的一个基类，如果是纯Swoole环境可以下载框架源码并查看原理
</blockquote>

<h3>EasySwoole部分</h3>

继承了<code>AbstractUnixProcess</code>，封装好了很多内容，直接写明onAccept 接受数据做处理即可

<pre><code class="language-php line-numbers"><br />namespace App\UnixSocket;

use EasySwoole\Component\Process\Socket\AbstractUnixProcess;
use Swoole\Coroutine\Socket;

class Siam extends AbstractUnixProcess
{

    function onAccept(Socket $socket)
    {
        // 收取包头4字节计算包长度 收不到4字节包头丢弃该包
        $header = $socket-&gt;recvAll(4, 1);

        if (strlen($header) != 4) {
            $socket-&gt;sendAll(self::pack(json_encode([
                'res' =&gt; 'fail',
                'msg' =&gt; '长度有误',
            ], 256)));
            $socket-&gt;close();
            return;
        }

        // 收包头声明的包长度 包长一致进入命令处理流程
        // 多处close是为了快速释放连接
        $allLength = self::packDataLength($header);
        $data = $socket-&gt;recvAll($allLength, 1);
        if (strlen($data) == $allLength) {
            echo $data;

            // 执行任务逻辑

            $socket-&gt;sendAll(self::pack(json_encode([
                'res' =&gt; 'ok',
                'msg' =&gt; '长度相同',
            ], 256)));
            $socket-&gt;close();
        }else{

            $socket-&gt;sendAll(self::pack(json_encode([
                'res' =&gt; 'fail',
                'msg' =&gt; '长度不相等',
            ], 256)));
            $socket-&gt;close();
        }
    }

    static function pack($string)
    {
        return pack('N', strlen($string)) . $string;
    }

    static function packDataLength($head)
    {
        return unpack('N', $head)[1];
    }
}
</code></pre>

写好了任务逻辑，还需要加入启动该进程

<pre><code class="language-php line-numbers">EasySwooleEvent.php文件
    public static function mainServerCreate(EventRegister $register)
    {
        $config = new UnixProcessConfig();
        $config-&gt;setSocketFile(EASYSWOOLE_ROOT."/Temp/siam_unix.sock");
        $config-&gt;setProcessName('siam_unix');

        $siam = new Siam($config);
        ServerManager::getInstance()-&gt;getSwooleServer()-&gt;addProcess($siam-&gt;getProcess());
    }
</code></pre>

<h3>普通环境发送数据</h3>

<pre><code class="language-php line-numbers">&lt;?php
$sock = dirname(__FILE__)."/Temp/siam_unix.sock";

$unixSock = stream_socket_client("unix:///".$sock);

fwrite($unixSock, siam_pack('my name is siam'));

//echo fread($unixSock, 4096)."\n";

fclose($unixSock);




function siam_pack($string)
{
    return pack('N', strlen($string)) . $string;
}

function packDataLength($head)
{
    return unpack('N', $head)[1];
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2020-01-02 14:02:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-02 06:02:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-02 14:11:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-02 06:11:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-fpm%e5%ba%94%e7%94%a8%e4%b8%8ephp-swoole%e5%ba%94%e7%94%a8%e8%bf%9b%e8%a1%8c%e9%80%9a%e4%bf%a1%e7%9a%84%e5%87%a0%e7%a7%8d%e6%96%b9%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e8%bf%9b%e7%a8%8b%e9%80%9a%e4%bf%a1"><![CDATA[进程通信]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1117]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[187]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[mysql从5.7迁移表结构到5.5报错 near '(0) NULL DEFAULT NULL']]></title>
		<link>https://blog.siammm.cn/archives/234</link>
		<pubDate>Thu, 09 Jan 2020 07:31:17 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>问题由来</h1>

问题如标题所示，在开发过程的时候，需要创建一张表，从另一个环境导出的表结构sql文件，在我电脑上导入，遇到该报错

<pre><code class="line-numbers">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '(0) NULL DEFAULT NULL'
</code></pre>

报错的那一行内容为

<pre><code class="line-numbers">`refund_success_time` datetime(0) NULL DEFAULT NULL COMMENT '退款成功时间',
</code></pre>

宣言博客 Siam 原文链接：<a href="https://www.siammm.cn/archives/234" title="https://www.siammm.cn/archives/234">https://www.siammm.cn/archives/234</a>

<h1>排查思路</h1>

将导出的sql导入回原来的环境中（另开一个数据库），测试结果：<code>正常</code>。

那么sql语句一般是正常没问题的， 一般是环境差异导致的，如（版本不同）

原来的表创建过程是使用软件可视化的，datetime长度这里没有填写，默认是为0，所以首先是对这个的不理解

从这里去找了资料，发现对datetime长度的说明资料很少，但还是有一个百度回答说到了（虽然不够准确）

原文为：

<blockquote>
  在navicat里面datetime的长度好像指的是秒后面的小数点位数，可以设置为0-6位
</blockquote>

不准确的地方有以下

<ul>
<li>并不是在navicat这个软件里，而是mysql数据库中</li>
<li>在mysql数据库中也会有不同的版本差异（导致这篇文章遇到问题的原因）</li>
<li>所用词“好像指的是”，代表回答该问题的前辈并没有找过官方文献、测试</li>
</ul>

<h1>官方文献</h1>

宣言为了测试该问题，并准确定位和分析，找到了mysql官方的文献，原文为：

<blockquote>
  11.2.7 Fractional Seconds in Time Values
      MySQL 5.6 has fractional seconds support for TIME, DATETIME, and TIMESTAMP values, with up to microseconds (6 digits) precision:
      To define a column that includes a fractional seconds part, use the syntax type_name(fsp), where type_name is TIME, DATETIME, or TIMESTAMP, and fsp is the fractional seconds precision. For example:
</blockquote>

重点为第一句，mysql在5.6后支持了小数秒，精度高达微秒（6位）

<h1>解决该问题</h1>

解决该问题（或者说从根源上避免遇到此类问题），应该保证开发环境的一致，同一项目的所有开发人员都应该保持所有环境的版本号一致（最好精确到小版本）

如果只是为了临时在mysql5.5完成测试，并且确认业务程序不需要使用到时间的小数秒，可以将sql文件中的长度设置删除，然后导入

<pre><code class="line-numbers">datetime(0) NULL DEFAULT NULL
改为 datetime NULL DEFAULT NULL
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2020-01-09 15:31:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-09 07:31:17]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-09 15:31:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-09 07:31:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e4%bb%8e5-7%e8%bf%81%e7%a7%bb%e8%a1%a8%e7%bb%93%e6%9e%84%e5%88%b05-5%e6%8a%a5%e9%94%99-near-0-null-default-null]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1400]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>731</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-05 17:20:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-05 09:20:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://vslevitrav.com/" / rel="nofollow ugc">best price for levitra 20mg</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>755</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-17 18:52:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-17 10:52:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://gcialisk.com/" / rel="nofollow ugc">buy viagra cialis online</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Vue vant引入，tabbar封装使用示例]]></title>
		<link>https://blog.siammm.cn/archives/236</link>
		<pubDate>Tue, 14 Jan 2020 08:57:32 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=236</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Vant</h1>

tabbar使用教程：https://youzan.github.io/vant/#/zh-CN/tabbar

关于基本的安装、引入组件就不再详细讲解，请自行按照文档安装章节进行。

<h2>封装Tabbar</h2>

在不同页面显示tabbar，如果tabbar修改，则需要变动多个页面

封装成组件后，统一引用组件，修改tabbar则只需要改动组件文件

<h3>封装后引用代码</h3>

active代表要高亮组件中第几个图标，必须为数值

<pre data-language=HTML><code class="language-markup line-numbers">&lt;template&gt;
  &lt;!-- 这里显示其他内容 --&gt;
  &lt;TabbarHtml v-bind:active=2 /&gt;
&lt;/template&gt;

&lt;script&gt;
import TabbarHtml from '@/components/Tabbar.vue'

export default {
  components: {
    TabbarHtml
  }
}

&lt;/script&gt;
</code></pre>

<h3>tabbar组件代码</h3>

<ul>
<li>使用tabbarTempValue值来监听，使用active值来接收。这是为了防止props为单向数据绑定，在组件内改变值后会产生报错，父页面无法接收</li>
<li>onChange事件监听并路由跳转  这里使用的是vue-router</li>
</ul>

<pre data-language=HTML><code class="language-markup line-numbers">&lt;template&gt;
  &lt;div class="tabbar"&gt;
    &lt;van-tabbar v-model="tabbarTempValue" @change="onChange"&gt;
      &lt;van-tabbar-item icon="home-o" url="/Home"&gt;标签&lt;/van-tabbar-item&gt;
      &lt;van-tabbar-item icon="search"&gt;标签&lt;/van-tabbar-item&gt;
      &lt;van-tabbar-item icon="friends-o"&gt;标签&lt;/van-tabbar-item&gt;
      &lt;van-tabbar-item icon="setting-o"&gt;标签&lt;/van-tabbar-item&gt;
    &lt;/van-tabbar&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;

import Vue from 'vue';
import { Tabbar, TabbarItem } from 'vant';
import { Icon } from 'vant';
import { Notify } from 'vant';

Vue.use(Notify);
Vue.use(Tabbar).use(TabbarItem);
Vue.use(Icon);

export default {
  props: {
    active: Number
  },
  data() {
    return {
      tabbarTempValue: this.active
    }
  },
  methods: {
    onChange(index) {
      const routerArray = [
        "/",
        "/Home",
        "/Home",
        "/Home"
      ];
      this.$router.push(routerArray[index])
    }
  }
}
&lt;/script&gt;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2020-01-14 16:57:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-14 08:57:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-14 16:58:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-14 08:58:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vue-vant%e5%bc%95%e5%85%a5%ef%bc%8ctabbar%e5%b0%81%e8%a3%85%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="vue"><![CDATA[Vue]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[237]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2113]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>740</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.167]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-08 12:29:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-08 04:29:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://sscialisvv.com/" / rel="nofollow ugc">buy cialis cheap</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[PHP解析Markdown库,parsedown扩展自定义语法]]></title>
		<link>https://blog.siammm.cn/archives/239</link>
		<pubDate>Fri, 28 Feb 2020 03:09:19 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=239</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在开发系统过程中，有些信息编写储存是使用Markdown通用语法，但由于各个平台的会新增一些独特规范，一般的解析库都是只包含了<code>标准语法</code>，对于自定义语法是不支持解析的（如vuepress文档系统中的::: tip 提示语块）

我们从vuepress迁移文档系统到自己实现的文档系统时，特定标签无法解析，需要扩展解析库的功能，来完成自定义语法。

PHP常见的Markdown解析库是parsedown。这个库非常的轻量，只有一个文件，无需依赖其他扩展。

<h2>如何扩展自定义语法</h2>

我们可以在库的wiki中找到 https://github.com/erusev/parsedown/wiki/Tutorial:-Create-Extensions

<h2>嵌套解析</h2>

我们经过上面的教程已经扩展了::: tip的语法

使用如下

<pre><code class="line-numbers">::: tip
提示语句
:::
</code></pre>

但是如果中间的内容为其他符合md标准的语法，没办法嵌套解析，所以需要继续修改逻辑

旧代码如下

<pre><code class="line-numbers">    protected function blockNoticeComplete($Block)
    {
        $text = $Block['element']['text']['text'];
        $Block['element']['text']['text'] = $text;
        return $Block;
    }
</code></pre>

改为新代码，需要把$text文字再调用一次解析器 解析成html。但是此时会被自动反转义，在页面上显示如下情况

<img src="https://www.siammm.cn/wp-content/uploads/2020/02/14fc4fddf29570ae5d6ff453eb08cd6c.png" alt="" />

所以我们需要追踪在哪里决定转义，并取消该标签的自动转义。

php中转义的函数为<code>htmlspecialchars</code>

在这个库里搜索，找到如下方法

<pre><code class="language-php line-numbers">protected static function escape($text, $allowQuotes = false)
    {
        return htmlspecialchars($text, $allowQuotes ? ENT_NOQUOTES : ENT_QUOTES, 'UTF-8');
    }
</code></pre>

再搜索该方法，决定转义的核心代码逻辑如下

<pre><code class="language-php line-numbers">    if (isset($Element['text']))
        {
            $text = $Element['text'];
        }
        // very strongly consider an alternative if you're writing an
        // extension
        elseif (isset($Element['rawHtml']))
        {
            $text = $Element['rawHtml'];
            $allowRawHtmlInSafeMode = isset($Element['allowRawHtmlInSafeMode']) &amp;&amp; $Element['allowRawHtmlInSafeMode'];
            $permitRawHtml = !$this-&gt;safeMode || $allowRawHtmlInSafeMode;
        }
</code></pre>

所以我们修改标签解析逻辑为返回rawHtml

<pre><code class="language-php line-numbers">        unset ($Block['element']['text']['text']);
        $Block['element']['text']['rawHtml'] = html_entity_decode((new static)-&gt;text($text));
        $Block['element']['text']['allowRawHtmlInSafeMode'] = true;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date><![CDATA[2020-02-28 11:09:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-28 03:09:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-02-28 11:09:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-02-28 03:09:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e8%a7%a3%e6%9e%90markdown%e5%ba%93parsedown%e6%89%a9%e5%b1%95%e8%87%aa%e5%ae%9a%e4%b9%89%e8%af%ad%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[985]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>742</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-08 23:29:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-08 15:29:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://propeciaset.com/" / rel="nofollow ugc">finpecia</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[swoole,swoole_timer_tick() must be callable, array given 报错异常]]></title>
		<link>https://blog.siammm.cn/archives/240</link>
		<pubDate>Wed, 04 Mar 2020 01:11:55 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>报错提示</h1>

<blockquote>
  Fatal error: Uncaught TypeError: Argument 2 passed to Swoole\Timer::swoole_timer_tick() must be callable, array given
</blockquote>

<h1>触发场景</h1>

在easyswoole旧版的Component组件中的Pool抽象方法（用于实现通用连接池），有一行代码是

<pre><code class="language-php line-numbers">if ($conf-&gt;getIntervalCheckTime() &gt; 0) {
    swoole_timer_tick($conf-&gt;getIntervalCheckTime(), [$this, 'intervalCheck']);
}
</code></pre>

定时触发这个检查方法，来完成<code>最小连接池保持、掉线检测</code>等操作。

于是就在这里产生了这个异常

<h1>解决问题</h1>

搜索了php官方对于callable的定义, 是允许数组这种形式传递的 https://www.php.net/manual/zh/language.types.callable.php

咨询swoole开发组的成员twosee，也反馈这个类型判断是调用zendapi完成的，理论不应该出问题

给出的解决方案是使用php推荐新增的<code>Closure</code>

<pre><code class="language-php line-numbers">if ($conf-&gt;getIntervalCheckTime() &gt; 0) {
    swoole_timer_tick($conf-&gt;getIntervalCheckTime(), \Closure::fromCallable([$this, 'intervalCheck']));
}
</code></pre>

easyswoole框架内部交流后也说明这个问题是由于swoole版本变动，很早以前就在新版做了兼容（将intervalCheck改为public方法）]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2020-03-04 09:11:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-04 01:11:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-04 09:11:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-04 01:11:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[swooleswoole_timer_tick-must-be-callable-array-given-%e6%8a%a5%e9%94%99%e5%bc%82%e5%b8%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="post_tag" nicename="easyswoole"><![CDATA[easyswoole]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="swoole"><![CDATA[swoole]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[83]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1282]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Mysql 乘法除法精度不一致，除法后四位小数]]></title>
		<link>https://blog.siammm.cn/archives/242</link>
		<pubDate>Fri, 06 Mar 2020 08:04:33 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=242</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>问题</h1>

今天在写项目功能的时候，有一个统计金额的情况，然后需要进行单位转换，所以写下了大概如下功能的语句，但得到的数据为小数点后4位精度，正常我们只需要2位就足够。

<pre><code class="language-sql line-numbers">select total_fee / 100 from orders
</code></pre>

继续排查寻找资料，进行精度转换，找了一圈的资料都不太满意，继续进行测试

<h1>测试</h1>

测试bug和未知情况，我们一定要<code>最小复现，精简测试</code>，防止其他语句对结果产生干扰。

<pre><code class="language-sql line-numbers">select 1 / 100;
// 得到 0.0100
</code></pre>

<pre><code class="language-sql line-numbers">select 1 * 0.01;
// 得到 0.01
</code></pre>

并且在3/4台设备上运行，不同mysql版本环境都是这样子的结果。

所以初步得知<code>Mysql中，乘法和除法对小数点后的精度不一致</code>

在国内的论坛中没有找到合适的资料，于是到国外论坛寻找，提问，交流。

<h1>答案</h1>

首先感谢其他前辈对问题的解答和指点，我们也将尽量详细地记录问题的排查。

文明之所以能延续，是因为它们有记忆。希望文章也能帮到更多的朋友。

<ul>
<li>除法的精度默认是小数点后4位</li>
<li>乘法的精度使用<code>操作数的精度和</code>的方式来判断，如例子中的<code>1*0.01</code> 精度分别是小数点后0位和2位，那么就是<code>0+2 =2</code> 结果也将使用2位精度</li>
</ul>

测试

<pre><code class="language-sql line-numbers">select 1.00 * 0.01;
// 结果 0.0100
</code></pre>

符合上诉结论。感谢国外前辈指教。

原文链接 Siam博客 宣言博客 <a href="https://www.siammm.cn/archives/242" title="https://www.siammm.cn/archives/242">https://www.siammm.cn/archives/242</a>

<h2>除法使用2位精度</h2>

那么我们的问题 如果是要坚持用除法解决，我们可以使用函数来进行转换精度，

<pre><code class="language-sql line-numbers">CAST( @x / @y AS DECIMAL(m,n) )
</code></pre>

DECIMAL的参数可以百度看这个，基本创建过表结构的都能明白。

@x和@y就是除数和被除数。

同时我还提出疑问，是否能在mysql里设置默认除法精度，我们就可以不用每次sql都使用函数计算了。

前辈回复：如果你不想有时候出现出乎意料的情况，那么需要每次都强制使用类型转换。

<h3>mysql相关说明文献</h3>

https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html

<blockquote>
  In division performed with /, the scale of the result when using two exact-value operands is the scale of the first operand plus the value of the div_precision_increment system variable (which is 4 by default). For example, the result of the expression 5.05 / 0.014 has a scale of six decimal places (360.714286).
</blockquote>

<h3>除法的精度规则</h3>

由上面引用的文献可知：当使用两个数值进行计算时，结果的精度由<code>第一个操作数的精度 + 系统变量div_precision_increment的值决定</code>，如我们例子中的1 精度是0，系统变量精度是4位默认，所以得到的结果是4位精度

<pre><code class="language-sql line-numbers">set div_precision_increment = 2;
// 再运行select 1 / 100; 得到 0.01 符合想要的结果
</code></pre>

所以我们还可以通过修改默认变量，来改变除法的默认精度。

此时我们再测试

<pre><code class="language-sql line-numbers">select 1.0 / 100;
// 结果 0.010 符合上文所述结论
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date><![CDATA[2020-03-06 16:04:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-06 08:04:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-06 16:18:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-06 08:18:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-%e4%b9%98%e6%b3%95%e9%99%a4%e6%b3%95%e7%b2%be%e5%ba%a6%e4%b8%8d%e4%b8%80%e8%87%b4%ef%bc%8c%e9%99%a4%e6%b3%95%e5%90%8e%e5%9b%9b%e4%bd%8d%e5%b0%8f%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1266]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_81d4336cf29d7d378fda09d80b7389ef]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[vue-cli引入vue-router]]></title>
		<link>https://blog.siammm.cn/archives/248</link>
		<pubDate>Wed, 18 Mar 2020 08:30:46 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=248</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code class="language-cmd line-numbers">vue ui
</code></pre>

开启图形页面  在浏览器中创建项目

右上角 项目管理器，新建项目成功后切换为新项目

在左侧选择<code>插件</code>

列表中则会显示当前已经安装的插件

同时在导航栏上方会有几个按钮，可以添加新的插件，如果我们之前没有安装过router插件，则会显示该按钮，点击安装即可。

原文Siam博客http://blog.siammm.cn

<img src="https://www.siammm.cn/wp-content/uploads/2020/03/165086840f106d7e0529501fcae5e1ef.png" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2020-03-18 16:30:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-18 08:30:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-18 16:30:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-18 08:30:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vue-cli%e5%bc%95%e5%85%a5vue-router]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="vue"><![CDATA[Vue]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[237]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[982]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>733</wp:comment_id>
			<wp:comment_author><![CDATA[angevyges]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Opiteapex@rvmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-06 07:09:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-05 23:09:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vsprednisonev.com/" / rel="nofollow ugc">order prednisone online from canada</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[转 - Android下一次OOM调试过程]]></title>
		<link>https://blog.siammm.cn/archives/249</link>
		<pubDate>Wed, 18 Mar 2020 09:48:35 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=249</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>分享原因</h1>

<ul>
<li>调试过程记录非常详细，是很好排查思路学习和锻炼的学习资料</li>
<li>Android基于Linux内核，Linux对线程、进程、描述符等限制参数的功能</li>
<li>技术文章</li>
</ul>

可以导致OOM的原因有以下几种：

<ul>
<li>文件描述符(fd)数目超限，即proc/pid/fd下文件数目突破/proc/pid/limits中的限制。可能的发生场景有：</li>
<li>短时间内大量请求导致socket的fd数激增，大量（重复）打开文件等</li>
<li>线程数超限，即proc/pid/status中记录的线程数（threads项）突破/proc/sys/kernel/threads-max中规定的最大线程数。可能的发生场景有：</li>
<li>app内多线程使用不合理，如多个不共享线程池的OKhttpclient等等</li>
<li>传统的java堆内存超限，即申请堆内存大小超过了 Runtime.getRuntime().maxMemory()</li>
<li>（低概率）32为系统进程逻辑空间被占满导致OOM.</li>
</ul>

<h1>原文地址</h1>

https://blog.csdn.net/zhizhuodewo6/article/details/81486384]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2020-03-18 17:48:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-18 09:48:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-18 17:48:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-18 09:48:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%acandroid%e4%b8%8b%e4%b8%80%e6%ac%a1oom%e8%b0%83%e8%af%95%e8%bf%87%e7%a8%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="share"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e4%ba%ab%e4%b8%96%e7%95%8c"><![CDATA[分享世界]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e8%99%9a%e6%8b%9f%e6%9c%ba"><![CDATA[虚拟机]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[250]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ffcaeeb6713bd6a55b457cd0ef1b554b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[668]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ApiCloudApp开发 - 快速调试]]></title>
		<link>https://blog.siammm.cn/archives/251</link>
		<pubDate>Sat, 21 Mar 2020 13:43:21 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

<ul>
<li>快速监听、预览、复发 HTTP网络请求</li>
<li>在USB连线开发时如何电脑查看console.log日志</li>
<li>编译后无法运行的错误</li>
</ul>

原文博客：http://blog.siammm.cn

<h2>解决过程</h2>

@@@

在需要调试的页面引入vconsole
但每个页面都需要引入

换一种思路：封装一个console方法，储存到数据库中

再加上一个页面可以查询

￥￥￥

<h2>封装通用工具</h2>

@@@

封装日志上报方法

<pre><code class="language-javascript line-numbers">log(str){
    // 储存到数据库
    let consoleData = api.getGlobalData({
        key :"siamConsoleData"
    })
    if (consoleData == ''){
        consoleData = []
    }else{
        consoleData = JSON.parse(consoleData)
    }
    consoleData.unshift(str);
    api.setGlobalData({
        key :"siamConsoleData",
        value: JSON.stringify(consoleData)
    })
}
</code></pre>

在首页增加一个按钮，进入日志详情页

<pre><code class="language-javascript line-numbers"><br />openLog(){
    console.log("测试吧")
    if (this.siamconsole ){
        api.closeFrame({
            name: 'siamConsole'
        });
        this.siamconsole = false;
        return true;
    }
    this.siamconsole = true;
    api.openFrame({
        name: 'siamConsole',
        url: 'widget://html/siam/console.html',
        rect: $.rect(),
        pageParam: {
            name: 'test'
        }
    });
},
</code></pre>

<pre data-language=HTML><code class="language-markup line-numbers">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,initial-scale=1.0,width=device-width" /&gt;
    &lt;meta name="format-detection" content="telephone=no,email=no,date=no,address=no"&gt;
    &lt;title&gt;Siam Console &lt;/title&gt;
    &lt;link rel="stylesheet" href="../../../css/swiper.min.css"&gt;
    &lt;link rel="stylesheet" href="../../../css/common.css"&gt;
    &lt;script src="../../script/vue.min.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="../../script/frame.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="../../script/baseConfig.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="../../script/common.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="../../script/swiper.min.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;style&gt;
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="app" v-cloak&gt;
        &lt;ul&gt;
          &lt;li v-for="(item,index) in consoleList" style="font-size:14px"&gt;
            {{item}}
          &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;script type="text/javascript"&gt;
        apiready = function() {
            var app = new Vue({
                el:'#app',
                data:{
                  consoleList:[
                    '测试'
                  ]
                },
                methods:{
                  init(){

                              api.refreshHeaderLoadDone();//管他有不有下拉刷新，都给他关了。&lt;Z&gt;&lt;/Z&gt;
                      let consoleData = YY.getData("siamConsoleData")
                      if (consoleData == ''){
                        consoleData = [];
                      }else{
                        consoleData = JSON.parse(consoleData)
                      }

                      this.consoleList = consoleData;
                  }
                },
                mounted:function(){
                  this.init();
                }
            });


            //下拉刷新
            $.pullDown({
                bgColor:"transparent",
                success:function(){
                  YY.log("??")
                  app.init();
                }
            });
        }

    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

在ajax封装里上报日志

<pre><code class="language-javascript line-numbers">// 注入网络请求记录
YY.log(JSON.stringify({
    send :send,
    ret: ret,
    err: err
}))
</code></pre>

￥￥￥]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2020-03-21 21:43:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-21 13:43:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-22 14:45:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-22 06:45:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[apicloudapp%e5%bc%80%e5%8f%91-%e5%bf%ab%e9%80%9f%e8%b0%83%e8%af%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="category" nicename="%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab"><![CDATA[源码分享]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[976]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[250]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[WordPress二开-文章内容部分隐藏]]></title>
		<link>https://blog.siammm.cn/archives/254</link>
		<pubDate>Sun, 22 Mar 2020 09:59:52 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>原理</h1>

在php从数据库读取文件出来之后，不要马上输出，先执行正则替换、删除的步骤即可

<h1>修改文件地址</h1>

WordPress是设计了模板主题的概念的，模板主题所在目录为：<code>wordpress/wp-content/themes</code>

在该目录下，每一套主题又有一个新的目录，假设我们使用的模板主题名字为siam
那么完整路径应该为<code>wordpress/wp-content/themes/siam</code>

在该目录下搜索文件内容<code>the_content</code>

有调用该函数的就是对应的文章内容（可能有多个，对应多种布局，比如图片列表文章、纯文字文章等等 根据自己主题判断）

修改逻辑

这里贴上我的处理逻辑参考

原文博客：http://blog.siammm.cn
原文地址：https://www.siammm.cn/archives/254

<pre><code class="language-php line-numbers">ob_start();
the_content();
$content = ob_get_contents();
ob_end_clean();

if(!current_user_can('manage_options')){
    // 循环遍历
    $replace = true;
    while($replace){
        $b= (strpos($content,"……"));
        $c= (strpos($content,"***"));
        if ($b &amp;&amp; $c){
            // 处理了一次，那么看看是否需要继续处理
            $content = substr_replace($content,'&lt;h5 style="border:1px solid #000;"&gt;SIAM 暂时隐藏该部分内容~ 很抱歉&lt;/h5&gt;', $b,$c-$b+strlen("&amp;&amp;&amp;"));
        }else{
            $replace = false;
        }
    }
}


echo $content;
</code></pre>

<h1>效果</h1>

@@@

隐藏内容

￥￥￥]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2020-03-22 17:59:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-22 09:59:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-24 16:34:15]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-24 08:34:15]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress%e4%ba%8c%e5%bc%80-%e6%96%87%e7%ab%a0%e5%86%85%e5%ae%b9%e9%83%a8%e5%88%86%e9%9a%90%e8%97%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1025]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>727</wp:comment_id>
			<wp:comment_author><![CDATA[duerboarbam]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pwzvwChimafoepiphegarse@annabisoilweb.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.165]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-04 23:32:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-04 15:32:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[azithromycin and alcohol  https://azithromaxww.com/  zithromax antibiotic  <a href="https://azithromaxww.com/" rel="nofollow ugc">zithromax 500mg </a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[ApiCloudApp开发-$api is undefined]]></title>
		<link>https://blog.siammm.cn/archives/255</link>
		<pubDate>Tue, 24 Mar 2020 08:44:58 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

在apicloud文档中 关于数据储存的部分，可以支持我们h5开发常用到的<code>localStore</code>模块

使用过程中遇到报错提示<code>$api is undefined</code>

记录遇到该问题及其解决方案

<h1>文档</h1>

文档demo如下

<pre><code class="language-javascript line-numbers">$api.setStorage('name','Tom');
</code></pre>

但是使用不行。

这里的<code>$api</code>与之前我使用的api.xxx不同。所以猜测有没有可能是文档编写错误，直接调用<code>api.setStorage()</code>  也是失败的。

原文博客https://www.siammm.cn
原文地址https://www.siammm.cn/archives/255

<h1>解决问题</h1>

直到后面使用到apicloud的前端框架，才知道这个问题是怎么导致的。

<ul>
<li>api对象是全局基础对象，在ApiCloud启动的时候初始化并注入到js的。</li>
<li>$api 是前端框架提供的一个对象，默认是没有引入的</li>
</ul>

出现这个问题主要是因为我们没有太多的精力和时间先完整的学习文档再进行开发，公司任务比较繁重，经常跳着观看，就弄混淆两个对象了。

所以我们只需要引入前端框架的js代码即可。

<blockquote>
  使用APICloud前端框架需引入api.js和api.css文件。api.js、api.css
</blockquote>

开源地址：https://github.com/apicloudcom/apicloud-js-framework]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date><![CDATA[2020-03-24 16:44:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-24 08:44:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-24 16:44:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-24 08:44:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[apicloudapp%e5%bc%80%e5%8f%91-api-is-undefined]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[250]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1012]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php与githook实现自动更新]]></title>
		<link>https://blog.siammm.cn/archives/256</link>
		<pubDate>Wed, 25 Mar 2020 08:28:40 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>githook</h1>

git系统仓库一般都会支持这个hook配置，在发生事件的时候触发执行，可以是https推送等通知形式。

我们使用gitee+php来达到自动更新项目代码的需求。

<h2>用户组和权限</h2>

<ul>
<li>php 是以 <code>www</code> 用户组运行在系统上的，</li>
</ul>

如果我们使用php的函数 <code>shell_exec("cd /www/wwwroot/xxxx &amp;&amp; sudo git pull origin master");</code> 来执行的话会返回NULL。执行失败

<ul>
<li>git 属于 <code>root</code> 用户组</li>
</ul>

在php中使用git会因为权限而失败

解决方案：

编辑<code>/etc/sudoers</code>文件，如下：

(原文博客https://www.siammm.cn      https://www.siammm.cn/archives/256)

<pre><code class="language-vim line-numbers">root    ALL=(ALL)       找到这一行，在下方加入一行：
www     ALL=NOPASSWD:/usr/bin/git     这一行的意思是让www用户组可以不用密码使用git
</code></pre>

此时可以使用git客户端。如下可以正常返回，但是执行pull的时候还是返回NULL

<pre><code class="language-php line-numbers">var_dump(shell_exec("git version"));
</code></pre>

涉及文件夹权限，没有权限更改文件

<ul>
<li>可以将文件夹设置777权限 或者归属为www用户组</li>
<li>在php shell_exec 执行中加入sudo</li>
</ul>

<pre><code class="language-php line-numbers">&lt;?php

$json =  file_get_contents("php://input");

$array = json_decode($json , true);

if (isset($array['ref']) &amp;&amp; $array['total_commits_count']&gt;0 &amp;&amp; isset($array['password']) &amp;&amp; $array['password'] == 'xxxxxxx'){
    $res = shell_exec("cd /www/wwwroot/default/testHook/yanpay &amp;&amp; sudo git pull origin master");
    var_dump( $res) ;
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2020-03-25 16:28:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-25 08:28:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-25 16:29:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-25 08:29:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e4%b8%8egithook%e5%ae%9e%e7%8e%b0%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%96%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1081]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[【源码解读】TP5读取本地图片输出后，设置header头无效，图片乱码]]></title>
		<link>https://blog.siammm.cn/archives/257</link>
		<pubDate>Wed, 25 Mar 2020 09:11:40 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=257</guid>
		<description></description>
		<content:encoded><![CDATA[在Thinkphp程序中读取本地图片，做出加工处理（如合并二维码等水印），然后输出给客户端，一直输出图片内容乱码。

设置了header image/png 不生效。

写下这篇TP源码排查文章，看看问题到底出现在哪个步骤。

<h2>乱码</h2>

<img src="https://www.siammm.cn/wp-content/uploads/2020/03/3dc71e5f0bd67bfa20220a277fd8ba48.png" alt="" />

<h2>设置响应头无效</h2>

<pre><code class="language-php line-numbers">public function test(){
    // 请求头不生效，还是乱码
    header('Content-type: image/png');
    $file = "xxxxx\public\static\img/test.png";
    echo file_get_contents($file);
}
</code></pre>

<h2>排查TP源码</h2>

还记得我们这篇文章吗：TP为什么可以return就输出字符串或者模板内容等等，在原生PHP不行呢？

<a href="https://www.siammm.cn/archives/168" title="https://www.siammm.cn/archives/168">https://www.siammm.cn/archives/168</a>

从这篇文章，大概的问题还是出现在这个控制器调度类里面，我继续查看该部分源码

还是这段熟悉的源码，一样的配方，不一样的问题（bug）。

<pre><code class="language-php line-numbers">// 输出数据到客户端
if ($data instanceof Response) {
    $response = $data;
} elseif (!is_null($data)) {
    // 默认自动识别响应输出类型
    $type = $request-&gt;isAjax() ?
        Config::get('default_ajax_return') :
    Config::get('default_return_type');

    $response = Response::create($data, $type);
} else {
    $response = Response::create();
}
</code></pre>

因为我们在控制器中<code>没有return任何数据</code>，这里的$data==NULL，所以会走最后一步的

<pre><code class="language-php line-numbers">$response = Response::create();
</code></pre>

ok，那么我们看看默认的这个Response类都带了什么东东吧。

<pre><code class="language-php line-numbers"><br />// 原始数据
protected $data;

// 当前的contentType
protected $contentType = 'text/html';

// 字符集
protected $charset = 'utf-8';

//状态
protected $code = 200;

// 输出参数
protected $options = [];
// header参数
protected $header = [];

protected $content = null;
</code></pre>

可以看到，这里的contentType默认是text/html；

<pre><code class="language-php line-numbers">/**
 * 页面输出类型
 * @param string $contentType 输出类型
 * @param string $charset     输出编码
 * @return $this
 */
public function contentType($contentType, $charset = 'utf-8')
{
    $this-&gt;header['Content-Type'] = $contentType . '; charset=' . $charset;
    return $this;
}
</code></pre>

在TP框架核心中，最后步骤是调用

<pre><code class="language-php line-numbers">$response-&gt;send();
</code></pre>

这个send的代码如下，也是这个问题根源所在。

<pre><code class="language-php line-numbers">if (!headers_sent() &amp;&amp; !empty($this-&gt;header)) {
    // 发送状态码
    http_response_code($this-&gt;code);
    // 发送头部信息
    foreach ($this-&gt;header as $name =&gt; $val) {
        if (is_null($val)) {
            header($name);
        } else {
            header($name . ':' . $val);
        }
    }
}
</code></pre>

所以我们的header头 图片信息，被这里覆盖了

<h2>如何解决</h2>

<ul>
<li>手动调用实例化response类，并且在其中设置响应头</li>
</ul>

<pre><code class="language-php line-numbers">$response = new Response();
$response-&gt;header('Content-type: image/png');
$response-&gt;data(file_get_contents($file));
return $response;
</code></pre>

<ul>
<li>我们在控制器输出图片信息后，直接die掉，不要让它走后面的框架默认事件。（虽然这样子不符合框架设计思想）</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2020-03-25 17:11:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-25 09:11:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-03-25 17:18:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-03-25 09:18:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%ba%90%e7%a0%81%e8%a7%a3%e8%af%bb%e3%80%91tp5%e8%af%bb%e5%8f%96%e6%9c%ac%e5%9c%b0%e5%9b%be%e7%89%87%e8%be%93%e5%87%ba%e5%90%8e%ef%bc%8c%e8%ae%be%e7%bd%aeheader%e5%a4%b4%e6%97%a0%e6%95%88]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1609]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[程序优化之"变量名长短",内存逻辑地址,物理地址]]></title>
		<link>https://blog.siammm.cn/archives/263</link>
		<pubDate>Sat, 04 Apr 2020 14:26:06 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>程序优化为何没有说明"变量名长度"</h1>

网上有着不少常见的程序优化点的文章，比如PHP中使用单引号、双引号的性能差别等等。

但这其中并没有说到"变量名长度"会影响性能，那么它为什么不会影响性能呢，就需要引入我们今天要讲的这篇文章的知识了。

<h1>编译过程内存地址</h1>

我们的程序代码在运行的时候（或者之前）需要先经过编译器的处理，编译成更为底层的代码。

编译时是不分配内存的。此时只是根据声明时的类型进行占位，到以后程序执行时分配内存才会正确。所以声明是给编译器看的。变量名在编译过后的程序中是以<code>内存地址</code>存在的。所以它的长度<code>不会影响程序性能，只会占用你的代码文件大小(基本可以忽略)</code>

引用一下文献说明

<blockquote>
  接下来，汇编器会将汇编代码转换为二进制目标代码文件。目标代码文件是机器代码的一种形式，它包含所有指令的二进制表现，但是还没有填入全局值的地址。
</blockquote>

<h1>原文博客</h1>

<a href="https://www.siammm.cn/archives/257" title="地址">地址</a>

<h2>程序如何确认内存地址</h2>

我们都知道，所有内存数据都是储存在我们硬件<code>内存条</code>上面的，那么它的空间是固定的，并且某个位置被占用的时候，应该是不能被其他程序使用的，否则将会内存冲突。

（一个空教室，小明已经坐了一个位置，其他同学不能坐在他大腿上了诶）

<h2>物理内存地址</h2>

上面这个概念就是<code>物理内存地址</code>，描述说明在硬件中实际的储存位置(好比 二排三列)

<h2>逻辑内存地址</h2>

那么我们的程序在编译完成之后，怎么确定它在运行时到底使用哪一块内存地址呢？

使用的是相对的逻辑内存地址。

比如我们有以下一份PHP代码

<pre><code class="language-php line-numbers">&lt;?php
$a = 1;
$b = 3;
</code></pre>

那么编译后的程序可能如下（用文字描述）

<pre><code class="line-numbers">Location = 向系统申请内存地址，并返回物理内存地址

申请一块内存，储存代码$a的值，对应的物理内存地址为 ·Location + 1·
申请一块内存，储存代码$b的值，对应的物理内存地址为 ·Location + 1 + 1·

这里用1来代表一个变量需要占用的大小(仅仅为了说明，每个语言的数据结构不同)

</code></pre>

这就是相对的逻辑内存地址了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2020-04-04 22:26:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-04 14:26:06]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-04 22:26:06]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-04 14:26:06]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%a8%8b%e5%ba%8f%e4%bc%98%e5%8c%96%e4%b9%8b%e5%8f%98%e9%87%8f%e5%90%8d%e9%95%bf%e7%9f%ad%e5%86%85%e5%ad%98%e9%80%bb%e8%be%91%e5%9c%b0%e5%9d%80%e7%89%a9%e7%90%86%e5%9c%b0%e5%9d%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="category" nicename="mixed"><![CDATA[杂乱知识]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9f%ba%e7%a1%80"><![CDATA[计算机基础]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1158]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[132]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[vue vant cdn引入方式，组件使用样式错乱]]></title>
		<link>https://blog.siammm.cn/archives/265</link>
		<pubDate>Wed, 13 May 2020 08:24:29 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>问题复现</h1>

使用的是vant cdn方式引入框架，而非vue-cli

在使用一些组件，如宫格，复制文档的示例代码， 但是并不能正常运行，效果如下图。

<pre data-language=HTML><code class="language-markup line-numbers">&lt;div id="app"&gt;
    &lt;van-grid&gt;
      &lt;van-grid-item icon="photo-o" text="文字" /&gt;
      &lt;van-grid-item icon="photo-o" text="文字" /&gt;
      &lt;van-grid-item icon="photo-o" text="文字" /&gt;
      &lt;van-grid-item icon="photo-o" text="文字" /&gt;
    &lt;/van-grid&gt;
&lt;/div&gt;
</code></pre>

效果图：
<img src="https://www.siammm.cn/wp-content/uploads/2020/05/wp_editor_md_e85abb5e9fdb8112bb42e0dad032c468.jpg" alt="" />

<h1>出现问题的原因</h1>

在经过一番寻找资料后，最终在github的issue中找到关于该问题的答复：

<blockquote>
  Vue 不支持在 HTML 里直接使用自闭合标签，Vue 官方文档里有说明的，请使用完整的标签
</blockquote>

在vue的文档中找到以下相关描述

<blockquote>
  自闭合组件表示它们不仅没有内容，而且刻意没有内容。其不同之处就好像书上的一页白纸对比贴有“本页有意留白”标签的白纸。而且没有了额外的闭合标签，你的代码也更简洁。<br/>
  不幸的是，HTML 并不支持自闭合的自定义元素——只有官方的“空”元素。所以上述策略仅适用于进入 DOM 之前 Vue 的模板编译器能够触达的地方，然后再产出符合 DOM 规范的 HTML。
</blockquote>

html规范中对于自闭和标签有强制规范，用户不可自定义新增，
所以我们在示例代码中的·van-grid-item·标签不能正常工作。

在vue-cli中能正常工作的原因是，我们的xxx.vue文件会经过vue编译器，编译成规范的html代码，然后再运行。

原文博客链接：https://www.siammm.cn/archives/265

<h1>问题解决</h1>

<pre data-language=HTML><code class="language-markup line-numbers">&lt;div id="app"&gt;
    &lt;van-grid&gt;
      &lt;van-grid-item icon="photo-o" text="文字"&gt;&lt;/van-grid-item&gt;
      &lt;van-grid-item icon="photo-o" text="文字"&gt;&lt;/van-grid-item&gt;
      &lt;van-grid-item icon="photo-o" text="文字"&gt;&lt;/van-grid-item&gt;
      &lt;van-grid-item icon="photo-o" text="文字"&gt;&lt;/van-grid-item&gt;
    &lt;/van-grid&gt;
&lt;/div&gt;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2020-05-13 16:24:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-13 08:24:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-13 16:26:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-13 08:26:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[vue-vant-cdn%e5%bc%95%e5%85%a5%e6%96%b9%e5%bc%8f%ef%bc%8c%e7%bb%84%e4%bb%b6%e4%bd%bf%e7%94%a8%e6%a0%b7%e5%bc%8f%e9%94%99%e4%b9%b1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="vant"><![CDATA[Vant]]></category>
		<category domain="post_tag" nicename="vue"><![CDATA[Vue]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[237]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1319]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[phpstome/idea 忽略指定文件夹里的todo，代码任务管理]]></title>
		<link>https://blog.siammm.cn/archives/267</link>
		<pubDate>Thu, 21 May 2020 02:57:13 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>使用TODO管理自己的时间和任务</h1>

<h2>什么是todo</h2>

常见的名词是：TODO LIST ，一般出现在“个人规划”中出现，记录一定周期内需要完成的任务、完成任务情况

可能如下图

<img src="https://www.siammm.cn/wp-content/uploads/2020/05/wp_editor_md_4766caac363d5574d2c00e24a6c6119f.jpg" alt="" />

在代码中，我们通过在注释中编写todo，来记录某些<code>待完善</code>功能点

如下

<img src="https://www.siammm.cn/wp-content/uploads/2020/05/wp_editor_md_a74f8911f31acf930ad028638283678a.jpg" alt="" />

<h2>phpstorm 中的todo</h2>

格式为 两个斜杠加todo名词

// todo
或
// TODO

采用大写小写都正常工作，看个人喜欢。

然后在左下角，有一个<code>TODO面板</code>，我们可以在这个面板中查看整个项目中待完成的任务

<img src="https://www.siammm.cn/wp-content/uploads/2020/05/wp_editor_md_e3da39e6d5f0dd900055525e34f98ebc.jpg" alt="" />

<h2>出现的问题</h2>

我们使用composer等包管理，引入他人的包，他们的代码也有包含todo任务注释，我们在这里面板也把他们的任务统计了，不方便我们自己的项目开发管理。

所以我们需要把他们的文件夹忽略（或者说 只监听我们自己的项目目录）

siam博客 原文地址： https://www.siammm.cn/archives/267

<h2>只监听自己设置的目录</h2>

我们在TODO面板中，切换到<code>Scope Based</code>中，可以看到这里的<code>Scope</code>默认是All Places

也就是全部文件，默认预设了好几个选项，大家可以一一测试

我们这里讲一下怎么自定义目录规则

<img src="https://www.siammm.cn/wp-content/uploads/2020/05/wp_editor_md_47a5a3757423f72879391ec78b4498a8.jpg" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2020-05-21 10:57:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-21 02:57:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-05-22 08:54:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-05-22 00:54:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[phpstome-idea-%e5%bf%bd%e7%95%a5%e6%8c%87%e5%ae%9a%e6%96%87%e4%bb%b6%e5%a4%b9%e9%87%8c%e7%9a%84todo%ef%bc%8c%e4%bb%a3%e7%a0%81%e4%bb%bb%e5%8a%a1%e7%ae%a1%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1039]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>730</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-05 15:15:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-05 07:15:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://gcialisk.com/" / rel="nofollow ugc">cialis online cheap</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>754</wp:comment_id>
			<wp:comment_author><![CDATA[estikeseD]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tiseicefs@manmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-17 16:55:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-17 08:55:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://vsnolvadexv.com/" / rel="nofollow ugc">buy nolvadex for lab rats</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[php 微信支付分 开发过程 H5商城先享后付]]></title>
		<link>https://blog.siammm.cn/archives/283</link>
		<pubDate>Thu, 02 Jul 2020 03:28:55 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=283</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>前言</h1>

公司项目需要，在H5商城、小程序商城、APP商城、线下促销场景，推出最新的微信支付分功能。

（类似花呗） 先签约，后续付款

遇到一些问题，写下此文章。

有不明确的地方，欢迎添加我QQ 59419979 一起交流补充。

<h1>问题</h1>

<h2>the permission value is offline verifying</h2>

在H5情况下，按照微信支付分的唤起代码执行后，提示该情况。

原因：引入JSSDK后，需要进行获取js_ticket进行config。详见以下文档地址：

<pre><code class="line-numbers">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#1
</code></pre>

其中重点文字：<strong>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用</strong>

<h2>PHP HMAC-SHA256</h2>

微信支付分 唤起部分的签名类型，仅支持<code>HMAC-SHA256</code>

以下为签名过程代码

<pre><code class="language-php line-numbers">function sign_hmac_sha256($data, $key)
{
    ksort($data);
    $string = $this-&gt;array2url($data);

    $string .=  "&amp;key=" .$key;
    $tem = hash_hmac("sha256", $string, $key, true);

    return strtoupper(bin2hex($tem));
}

$data = [
    'mch_id'         =&gt; $this-&gt;mchId,
    'service_id'     =&gt; $this-&gt;service_id,
    'out_request_no' =&gt; "SIAM_59419979".time().rand(1000,9999),
    'timestamp'      =&gt; time(),
    'nonce_str'      =&gt; md5(time()),
    'sign_type'      =&gt; 'HMAC-SHA256',
];

$data['sign'] = sign_hmac_sha256($data, 'xxxx 微信支付 商户后台的key 值');

// array to url 返回前端 即可
</code></pre>

<h2>当前服务未上线</h2>

微信支付分的是新功能业务，也由于部门的流程升级，需要<code>先开发，验收后上线</code>，所以需要开发完成后联系微信官方进行验收。

<h1>完结语</h1>

以上为我在开发微信支付分过程遇到的小问题记录，希望能帮助到有需要的人，后续有遇到新问题将会持续更新本文章。

<ul>
<li>原文博客地址：http://blog.siammm.cn</li>
<li>QQ 59419979</li>
<li>Siam 宣言</li>
</ul>

by the way. 吐槽一下微信官方~ 跟支付宝的态度完全没得比

<img src="https://www.siammm.cn/wp-content/uploads/2020/07/wp_editor_md_9725e019ba69f656147516478d4edbcf.jpg" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date><![CDATA[2020-07-02 11:28:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-02 03:28:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-07-02 11:28:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-07-02 03:28:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98%e5%88%86-%e5%bc%80%e5%8f%91%e8%bf%87%e7%a8%8b-h5%e5%95%86%e5%9f%8e%e5%85%88%e4%ba%ab%e5%90%8e%e4%bb%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[151]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[911]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>741</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-08 17:50:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-08 09:50:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="https://vscialisv.com/" / rel="nofollow ugc">generic 5 mg cialis</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[微信小程序webview，a锚点跳转，回退时一直保留在原页面]]></title>
		<link>https://blog.siammm.cn/archives/285</link>
		<pubDate>Thu, 30 Jul 2020 07:47:42 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=285</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

公司业务，需要写一个页面导航，大概功能如下（APP排版，webview嵌套在小程序中）

<img src="https://www.siammm.cn/wp-content/uploads/2020/07/wp_editor_md_9e40612d7c54bb960332699721f5db9c.jpg" alt="" />

当点击导航的时候，也可以自动跳转到相应的地方。使用的是<code>a标签的锚点跳转</code>

功能和效果都是在浏览器上测试正常的，但在小程序上遇到以下问题

<h2>点击回退按钮无法退出页面</h2>

当我们有点击过导航的时候，假设从One点击到Two

相当于url变动：index.html#One  -> index.html#Two

当点击小程序右上角的回退按钮的时候，不会退出当前webview页面 返回到<code>小程序的夫级页面</code>

而是从index.html#Two -> index.html#One，页面也滑动到One区域。

如果在此页面上点击过10个导航，那么将需要点击11次回退才能退出当前页面。

不符合业务逻辑。所以需要更改实现方案。

<h2>解决方案</h2>

使用jq滑动跳转页面区域。

实现代码如下

.nav-one是一开始的a标签，现在改为div，但是class不改变

<pre><code class="language-javascript line-numbers">$(".nav-one").on("click", function(){
    // 高亮状态改变
    $(this).siblings().removeClass('nav-now');
    $(this).addClass('nav-now');
    // 区域名
    let clickStr = $(this).data("str");
    // 筛选到合适的html里的dom元素，获取高度，然后将浏览器向下滑动
    $.each($("h1"), function(index,item){
        if (item.innerText === clickStr){
            let htmlDom = $('html');
            htmlDom.scrollTop($(item).offset().top - 50);
            return false;
        }
    });
});
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2020-07-30 15:47:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-30 07:47:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-07-30 15:47:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-07-30 07:47:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8fwebview%ef%bc%8ca%e9%94%9a%e7%82%b9%e8%b7%b3%e8%bd%ac%ef%bc%8c%e5%9b%9e%e9%80%80%e6%97%b6%e4%b8%80%e7%9b%b4%e4%bf%9d%e7%95%99%e5%9c%a8%e5%8e%9f%e9%a1%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="jquery"><![CDATA[Jquery]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[151]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1249]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>744</wp:comment_id>
			<wp:comment_author><![CDATA[Homiloono]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cumbale@svmail.xyz]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.167]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-10 23:04:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-10 15:04:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="http://vslevitrav.com/" / rel="nofollow ugc">generic levitra professional</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>748</wp:comment_id>
			<wp:comment_author><![CDATA[Ivan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ivanhutchison@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-12 22:42:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-12 14:42:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hmm it appears like your blog ate my first comment (it was extremely long) so I guess I'll just sum it up what I wrote and say, I'm thoroughly enjoying your blog.
I too am an aspiring blog blogger but I'm still new to the 
whole thing. Do you have any tips for rookie blog writers?

I'd genuinely appreciate it.

my web-site <a href="https://area52.com/delta-8-vapes/" rel="nofollow ugc">delta 8 carts arkansas</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>751</wp:comment_id>
			<wp:comment_author><![CDATA[Roxanna]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[roxannacrum@inbox.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-14 01:04:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-13 17:04:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I will immediately seize your rss as I can't to find your email subscription link or e-newsletter service.

Do you've any? Please let me recognize so that I may subscribe.

Thanks.

My blog: <a href="https://area52.com/delta-8-gummies/" rel="nofollow ugc">super chill delta 8 gummies review</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[PHP EasyWechat SDK 微信公众号原页面获取用户信息]]></title>
		<link>https://blog.siammm.cn/archives/288</link>
		<pubDate>Mon, 16 Nov 2020 04:39:30 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>前因</h1>

由于EasyWechat文档编写的不够完善，在这里补充一下。

官方提供的文档如下

<pre><code class="language-php line-numbers">$app = Factory::officialAccount($config);
$oauth = $app-&gt;oauth;

// 未登录
if (empty($_SESSION['wechat_user'])) {

  $_SESSION['target_url'] = 'user/profile';

  return $oauth-&gt;redirect();
  // 这里不一定是return，如果你的框架action不是返回内容的话你就得使用
  // $oauth-&gt;redirect()-&gt;send();
}

// 已经登录过
$user = $_SESSION['wechat_user'];
</code></pre>

但是这不适用于<code>在当前页面获取授权</code>的需求，而是跳转到一个新的页面 <code>user/profile</code>

<h1>实现方法</h1>

在这里提供一下我的写法参考

<pre><code class="language-php line-numbers">public static function login()
{
    $app      = Factory::officialAccount($config);
    $customer = Session::get('customer_info');
    if (!$customer){
        if (!input('?code')){
            $app-&gt;oauth-&gt;redirect(Url::full())-&gt;send();
            return '';
        }else{
            $customer_info = $app-&gt;oauth-&gt;user();

            Session::set('customer_info', $customer_info);
            return $customer;
        }
    }

    return $customer;
}
</code></pre>

接着在<code>任意地方</code>调用上述封装方法即可

<pre><code class="language-php line-numbers">$customer = Auth::login();
</code></pre>

<h2>注意事项</h2>

<ul>
<li>代码中的Session为TP框架，其他框架或者原生 请替换为对应的处理。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date><![CDATA[2020-11-16 12:39:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-16 04:39:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-11-16 12:39:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-11-16 04:39:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-easywechat-sdk-%e5%be%ae%e4%bf%a1%e5%85%ac%e4%bc%97%e5%8f%b7%e5%8e%9f%e9%a1%b5%e9%9d%a2%e8%8e%b7%e5%8f%96%e7%94%a8%e6%88%b7%e4%bf%a1%e6%81%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e4%bf%a1"><![CDATA[微信]]></category>
		<category domain="post_tag" nicename="%e6%ba%90%e7%a0%81%e5%88%86%e4%ba%ab"><![CDATA[源码分享]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[151]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[806]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[微信公众号应用开发流程 免费内网穿透映射本地，实现调试]]></title>
		<link>https://blog.siammm.cn/archives/289</link>
		<pubDate>Sat, 21 Nov 2020 03:50:25 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>写在前面</h1>

众所周知，我们微信开发过程会遇到以下两个场景：

<ul>
<li>用户扫码、点击菜单、发送消息 等，【微信】会转发到【我们在微信后台配置的域名】，实现逻辑处理，推送消息给用户  或者  做相应的逻辑处理</li>
<li>公众号页面，需要登录获取openid，跳转的域名需要白名单。不利于本地调试</li>
</ul>

<h1>内网映射</h1>

我们可以使用一系列内网穿透映射的工具，可以在公网访问本地开放的程序，（无论是自己搭建还是使用其他产品 都适用）

如果是自己搭建或者使用付费的内网穿透工具，那么隧道域名将可以固定，我们在以下两个地方配置为获取到的内网域名，微信将会把所有请求 转发到 我们本地的这个穿透域名上，就可以实时调试了

<ul>
<li>获取openid的授权域名</li>
<li>微信公众号接管服务器域名</li>
</ul>

<h2>免费内网穿透的问题</h2>

这里在使用一些免费内网穿透产品遇到的问题，并不是所有免费内网穿透都有此问题，记录此篇文章是增加一种程序思维。解决问题的思路。

我使用的工具，分配的免费域名，会不定期变动，如第一次分配为<code>siamA.xxxx.com</code> 可能一个小时后会变成<code>siamB.xxxx.com</code>  这个时候就不适用我们上面说的这种，直接配置穿透域名在微信后台  因为需要反复修改，比较麻烦

<h1>nginx 线上域名</h1>

我这里的做法是：提前把业务以后上线的域名准备好，部署在服务器，通过<code>转发</code> 再转发到穿透域名。

如果内网穿透域名变化，只需要在服务器修改一次内网域名（此步骤可以通过脚本，实现自动切换  非本篇文章思路重点内容）
不需要反复去登录微信后台修改授权域名。（特别是登录微信公众号需要公司领导扫码的情况）

以下为nginx转发配置文件

<pre><code class="line-numbers">location ^~ /
{
    expires 12h;
    if ($request_uri ~* "(php|jsp|cgi|asp|aspx)")
    {
         expires 0;
    }
    proxy_pass http://siamC.xxxx.com;
    proxy_set_header Host siamC.xxxx.com;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header REMOTE-HOST $remote_addr;

    #持久化连接相关配置
    #proxy_connect_timeout 30s;
    #proxy_read_timeout 86400s;
    #proxy_send_timeout 30s;
    #proxy_http_version 1.1;
    #proxy_set_header Upgrade $http_upgrade;
    #proxy_set_header Connection "upgrade";
    add_header X-Cache $upstream_cache_status;

    #Set Nginx Cache

        add_header Cache-Control no-cache;
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2020-11-21 11:50:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-21 03:50:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-11-25 10:37:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-11-25 02:37:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e4%bf%a1%e5%85%ac%e4%bc%97%e5%8f%b7%e5%ba%94%e7%94%a8%e5%bc%80%e5%8f%91%e6%b5%81%e7%a8%8b-%e5%85%8d%e8%b4%b9%e5%86%85%e7%bd%91%e7%a9%bf%e9%80%8f%e6%98%a0%e5%b0%84%e6%9c%ac%e5%9c%b0%ef%bc%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%be%ae%e4%bf%a1"><![CDATA[微信]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[151]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[628]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[三言两语记录mysql for update锁]]></title>
		<link>https://blog.siammm.cn/archives/291</link>
		<pubDate>Wed, 25 Nov 2020 14:48:53 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=291</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>FOR UPDATE</h1>

中文直译的意思是：用于更新。

理解：这次查询的数据我要用于更新操作，所以麻烦Mysql帮我加锁，其他进程在我更新完成之前不能发起for update请求（可以发起普通select请求， 用于前端展示）

用途：防止高并发情况下，比如用户连续快速点击两次购买，导致商品数量超卖  为负数等情况

<h1>必要条件</h1>

<ul>
<li>mysql innodb引擎</li>
<li>在事务中启用for update（直到commit 或者rollback 此次更新操作结束 释放锁）</li>
<li>mysql暂无for update nowait  需要封装，增加控制超时时间的逻辑，这样子伪nowait</li>
<li>select命中索引或者主键，则为行锁，没有命中则为表锁（需要注意 避免影响业务）</li>
</ul>

<h1>测试步骤</h1>

1.一个连接A  发起事务，执行select for update

<pre><code class="language-sql line-numbers">START TRANSACTION;
select * from test where  id = "Auth" for update;
</code></pre>

2.另一个连接B 发起普通select请求，正常返回结果

3.连接B 发起select for update请求，由于第一个步骤的事务还没有结束，所以不能获取，会一直堵塞，直到超时 或者锁被释放后返回

4.没有nowait  可以封装如下逻辑

<pre><code class="language-php line-numbers">function testNowait(){
    // 执行sql  超时时间更改为0.5s
    // 执行for update
    // 0.5s后则返回失败（默认可能长达1分钟）
    // 恢复为默认的超时时间，避免影响其他sql执行
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2020-11-25 22:48:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-25 14:48:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-11-25 22:51:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-11-25 14:51:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%89%e8%a8%80%e4%b8%a4%e8%af%ad%e8%ae%b0%e5%bd%95mysql-for-update%e9%94%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[733]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[TP5.0安装testing 单元测试 报错]]></title>
		<link>https://blog.siammm.cn/archives/292</link>
		<pubDate>Tue, 01 Dec 2020 03:24:41 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=292</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>常见问题记录</h1>

The each() function is deprecated. This message will be suppressed on further calls

<ul>
<li>原因：使用了比较高版本的php，topthink/tesing v1.x仅限php7.1使用   太高太低都会出现报错</li>
</ul>

[think\exception\ErrorException]
Class 'TestCase' not found

<ul>
<li>原因：默认生成的单元测试示例没有加入命名空间。</li>
</ul>

在ExampleTest.php和TestCase.php中加入

<pre><code class="language-php line-numbers">namespace tests;
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date><![CDATA[2020-12-01 11:24:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-01 03:24:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-01 11:24:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-01 03:24:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tp5-0%e5%ae%89%e8%a3%85testing-%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95-%e6%8a%a5%e9%94%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[673]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>722</wp:comment_id>
			<wp:comment_author><![CDATA[Shanice]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shaniceoreilly@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.164]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-26 00:24:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-25 16:24:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When some one searches for his essential thing, thus he/she desires to be available that in detail, thus that thing 
is maintained over here.

My web site - <a href="https://www.peninsuladailynews.com/marketplace/top-3-best-delta-8-thc-gummies-weed-edibles-for-sale/" rel="nofollow ugc">weed edibles</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>724</wp:comment_id>
			<wp:comment_author><![CDATA[Graig]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[graighorn@bigstring.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.163]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-06-26 01:12:53]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-06-25 17:12:53]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When I initially left a comment I appear to have clicked on the -Notify me when new comments are added- checkbox 
and now whenever a comment is added I recieve four emails with the exact same comment.

Is there a way you can remove me from that service?

Kudos!

my web blog: <a href="https://www.heraldnet.com/marketplace/best-delta-8-thc-vape-cartridges-to-buy-in-2021/" rel="nofollow ugc">weed vape</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>749</wp:comment_id>
			<wp:comment_author><![CDATA[Rodrick]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rodrick_porras@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.166]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-13 01:38:08]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-12 17:38:08]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for sharing your thoughts about PHP. Regards

My website :: <a href="https://area52.com/delta-8-gummies/" rel="nofollow ugc">delta 8 gummies vegan</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>750</wp:comment_id>
			<wp:comment_author><![CDATA[Vida]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[vidaunaipon@whale-mail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[43.230.89.167]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-07-13 01:46:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-07-12 17:46:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice post. I just stumbled upon your blog and wanted to say that I have really loved browsing your weblog posts.
In any case I will be subscribing on your rss feed and I hope you write again soon!

Take a look at my blog post :: <a href="https://area52.com/delta-8-gummies/" rel="nofollow ugc">queen hemp delta 8 gummies</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[PHP数组排序 解决数值型版本号排序错乱]]></title>
		<link>https://blog.siammm.cn/archives/294</link>
		<pubDate>Wed, 02 Dec 2020 03:31:19 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>问题</h1>

本人在写EasySwoole新的组件时，使用到了插件思维，所以需要做包的解析等逻辑。在解析下列版本解析时，发现一些小问题。做个记录。

<pre><code class="language-php line-numbers">v1.0.php
v2.0.php
v10.0.php
</code></pre>

普通调用

<pre><code class="language-php line-numbers">asort($list);
</code></pre>

返回的结果是

<pre><code class="language-php line-numbers">v1.0.php
v10.0.php
v2.0.php
</code></pre>

<h1>解决</h1>

<pre><code class="language-php line-numbers">ksort($list, SORT_STRING | SORT_FLAG_CASE | SORT_NATURAL); // 对键排序
asort($list, SORT_STRING | SORT_FLAG_CASE | SORT_NATURAL); // 对值排序
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date><![CDATA[2020-12-02 11:31:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-02 03:31:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-02 11:31:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-02 03:31:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e6%95%b0%e7%bb%84%e6%8e%92%e5%ba%8f-%e8%a7%a3%e5%86%b3%e6%95%b0%e5%80%bc%e5%9e%8b%e7%89%88%e6%9c%ac%e5%8f%b7%e6%8e%92%e5%ba%8f%e9%94%99%e4%b9%b1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[605]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[el-dialog里的数组不更新，在关闭的一瞬间更新了]]></title>
		<link>https://blog.siammm.cn/archives/297</link>
		<pubDate>Mon, 08 Mar 2021 09:16:22 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=297</guid>
		<description></description>
		<content:encoded><![CDATA[<pre data-language=HTML><code class="language-markup line-numbers">&lt;el-dialog title="拆单" :visible.sync="dialog_split"&gt;
    &lt;div v-for="(item, i) in split_goods_json" &gt;
        &lt;el-input v-model="split_goods_json[i].split_number" style="width: 150px;"&gt;
        &lt;/el-input&gt;
    &lt;/div&gt;
&lt;/el-dialog&gt;
</code></pre>

但是在方法中更新数据不会重新渲染，其实这个问题的本质也不是dialog的问题，而是vue的机制问题，

https://cn.vuejs.org/v2/guide/reactivity.html

<h1>Vue 不能检测以下数组的变动</h1>

当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue

当你修改数组的长度时，例如：vm.items.length = newLength

为了解决第一类问题，以下两种方式都可以实现和 vm.items[indexOfItem] = newValue 相同的效果，同时也将在响应式系统内触发状态更新：

<pre><code class="language-javascript line-numbers">// Vue.set
Vue.set(vm.items, indexOfItem, newValue)
// Array.prototype.splice
vm.items.splice(indexOfItem, 1, newValue)
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date><![CDATA[2021-03-08 17:16:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-03-08 09:16:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-03-08 17:16:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-03-08 09:16:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[el-dialog%e9%87%8c%e7%9a%84%e6%95%b0%e7%bb%84%e4%b8%8d%e6%9b%b4%e6%96%b0%ef%bc%8c%e5%9c%a8%e5%85%b3%e9%97%ad%e7%9a%84%e4%b8%80%e7%9e%ac%e9%97%b4%e6%9b%b4%e6%96%b0%e4%ba%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_582b2aee00dda310c492402571c3436e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[437]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Thinkphp6，注解注释生成api列表]]></title>
		<link>https://blog.siammm.cn/archives/300</link>
		<pubDate>Fri, 30 Apr 2021 07:57:40 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=300</guid>
		<description></description>
		<content:encoded><![CDATA[自己写的一个小功能需要用到，稍微存一下该段代码，

接口代码需要写的格式
<img src="https://www.siammm.cn/wp-content/uploads/2021/04/wp_editor_md_9597b279b4f9cf9a7838ef38b4586077.jpg" alt="" />

<pre><code class="language-php line-numbers">// 遍历controller目录下的文件，判断注释中是否包含@Siam-Api
$dir = app_path()."/controller/";
$dir_contain = scandir($dir);
unset($dir_contain[0]);
unset($dir_contain[1]);// . 和 ..

$doc_list = [];

foreach ($dir_contain as $child_path){
    $path = $dir.$child_path . "/";
    // 只遍历控制器目录下的文件 不遍历子目录 可以自行改造
    if (is_dir($dir.$child_path)) continue;

    $file_list = glob($path. '*.php');
    foreach ($file_list as $file_path){
        $className = basename($file_path);
        $className = str_replace(".php", "",$className);

        $namespace = app()-&gt;getNamespace()."\\controller\\".$className;

        $class_reflec = new ReflectionClass($namespace);
        $method_list = $class_reflec-&gt;getMethods();
        foreach ($method_list as $method_reflec){
            // 包含@Siam-Api才需要解析源码
            $method_doc = $method_reflec-&gt;getDocComment();
            if (strpos( $method_doc,"@Siam-Api") == false) continue;
            $method_code = FileHelper::get_file_content_by_line($file_path, $method_reflec-&gt;getStartLine(), $method_reflec-&gt;getEndLine());

            // 参数解析逻辑，可以通过代码解析，也可以自己在注释里声明  然后解析 逻辑跟@Siam-Api这个字段一致

            // 解析源码里是否有validate  没有则是无参数
            if (strpos($method_code, "validate([") === false) {
                $param = [];
            }else{
                $param = [];
                // 解析参数列表
                $pattern_1 = '/\$this-&gt;validate\(([\s\S]*?)\);/';
                preg_match($pattern_1, $method_code, $matches);
                if (!isset($matches[1])) continue;
                // 拿到validate的代码，按行解析
                $param_code = explode("\n", $matches[1]);
                foreach ($param_code as $param_code_one){
                    if (strpos($param_code_one, "=&gt;") === false) continue;
                    $param_code_one = str_replace(" ", "", $param_code_one);
                    // 正则匹配取出 字段名、规则、注释
                    $param_field_pattern = '/\'([\s\S]*?)\'=&gt;\'([\s\S]*?)\'([\s\S]*)/';
                    preg_match($param_field_pattern, $param_code_one, $matches_param_field);
                    $param_field_note = str_replace(",", "", $matches_param_field[3]);
                    $param_field_note = str_replace("//", "", $param_field_note);

                    $param[] = [
                        $matches_param_field[1],// 字段名
                        $matches_param_field[2],// 规则
                        $param_field_note,// 注释
                    ];
                }
            }
            // groupName method_path method_dec逻辑自行扩展
            $doc_list['groupName'][] = [
                'method_name' =&gt; $method_reflec-&gt;getName(),
                'method_path' =&gt; '',
                'method_dec'  =&gt; '',
                'param'       =&gt; $param
            ];
        }
    }
}
// 应该返回成json等格式，然后前段html接入
var_dump($doc_list);
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date><![CDATA[2021-04-30 15:57:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-30 07:57:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-30 15:58:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-30 07:58:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[thinkphp6%ef%bc%8c%e6%b3%a8%e8%a7%a3%e6%b3%a8%e9%87%8a%e7%94%9f%e6%88%90api%e5%88%97%e8%a1%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[275]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[宝塔备份大数据导入本地失败 max_allowed_packet]]></title>
		<link>https://blog.siammm.cn/archives/305</link>
		<pubDate>Mon, 21 Jun 2021 07:43:57 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>问题场景</h1>

从线上备份拉了一个备份sql压缩包，想导入到本地开发脚本测试

使用<code>Navicat Premium</code>(试用) 导入时，报错max_allowed_packet参数相关的错误，

原因是mysql.ini配置中，设置了相关的执行脚本的最大包，默认是2M，我导出的文件有190+M，故 执行失败

<h2>解决问题</h2>

最大执行包 设置为200M（具体根据你的脚本文件，可以设置大一点。）

<pre><code class="line-numbers">set global max_allowed_packet = 200*1024*1024
</code></pre>

在本地执行完就无所谓啦，如果在线上生产中使用，记得导入完成之后要把参数改为默认的哦~]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date><![CDATA[2021-06-21 15:43:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-06-21 07:43:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-06-21 15:43:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-06-21 07:43:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%9d%e5%a1%94%e5%a4%87%e4%bb%bd%e5%a4%a7%e6%95%b0%e6%8d%ae%e5%af%bc%e5%85%a5%e6%9c%ac%e5%9c%b0%e5%a4%b1%e8%b4%a5-max_allowed_packet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[135]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[203]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php cli web server with rewrite router]]></title>
		<link>https://blog.siammm.cn/archives/310</link>
		<pubDate>Mon, 05 Jul 2021 01:35:28 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=310</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>前言</h2>

在此前的文章中，我曾说过php cli开启的web server 没办法像nginx一样实现伪静态等自由的路由规则，这篇文章记录一下，补上这个知识缺口。

<h2>PHP CLI WEB SERVER</h2>

<pre><code class="language-shell line-numbers">php -S 127.0.0.1:8000
</code></pre>

以上命令可以开启一个php自带的web server服务，我们可以在后续加上一个文件名，作为入口文件，在其中编写rewrite router规则

如

<pre><code class="language-shell line-numbers">php -S 127.0.0.1:8000 router.php
</code></pre>

<h2>Router代码</h2>

<pre><code class="language-php line-numbers">&lt;?php
if (is_file($_SERVER["DOCUMENT_ROOT"] . $_SERVER["SCRIPT_NAME"])) {
    return false;
} else {
    // 伪静态.jpg后缀 其实是php
    if (strpos($_SERVER['SCRIPT_NAME'], ".jpg") !== false){
        $_SERVER['SCRIPT_NAME'] = str_replace('.jpg', '.php',$_SERVER['SCRIPT_NAME']);
        require $_SERVER["DOCUMENT_ROOT"].$_SERVER['SCRIPT_NAME'];
    }
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2021-07-05 09:35:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-07-05 01:35:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-05 09:35:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-05 01:35:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php-cli-web-server-with-rewrite-router]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[171]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[php一份代码分层规范]]></title>
		<link>https://blog.siammm.cn/archives/314</link>
		<pubDate>Mon, 06 Sep 2021 08:24:22 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>控制器层</h2>

<ul>
<li>事务开关</li>
<li>调用Service Validata进行数据验证</li>
<li>调用Process Service Do</li>
<li><ul>
<li>Other Service Validata</li>
</ul></li>
<li><ul>
<li>Other Service Do</li>
</ul></li>
</ul>

<pre><code class="language-php line-numbers">public function createOrder(Request $request)
    {
        DB::beginTransaction();
        try {
            $this-&gt;orderService-&gt;validatorCreateOrder($request);
            $goods = $this-&gt;orderService-&gt;validatorGoods($request);
            // 设置商品
            $this-&gt;orderProcessService-&gt;setGoods($goods);
            // 优惠码
            $coupon = $this-&gt;orderService-&gt;validatorCoupon($request);
            // 设置优惠码
            $this-&gt;orderProcessService-&gt;setCoupon($coupon);
            $otherIpt = $this-&gt;orderService-&gt;validatorChargeInput($goods, $request);
            $this-&gt;orderProcessService-&gt;setOtherIpt($otherIpt);
            // 数量
            $this-&gt;orderProcessService-&gt;setBuyAmount($request-&gt;input('by_amount'));
            // 支付方式
            $this-&gt;orderProcessService-&gt;setPayID($request-&gt;input('payway'));
            // 下单邮箱
            $this-&gt;orderProcessService-&gt;setEmail($request-&gt;input('email'));
            // ip地址
            $this-&gt;orderProcessService-&gt;setBuyIP($request-&gt;getClientIp());
            // 查询密码
            $this-&gt;orderProcessService-&gt;setSearchPwd($request-&gt;input('search_pwd', ''));
            // 创建订单
            $order = $this-&gt;orderProcessService-&gt;createOrder();
            DB::commit();
            // 设置订单cookie
            $this-&gt;queueCookie($order-&gt;order_sn);
            return redirect(url('/bill', ['orderSN' =&gt; $order-&gt;order_sn]));
        } catch (RuleValidationException $exception) {
            DB::rollBack();
            return $this-&gt;err($exception-&gt;getMessage());
        }
    }
</code></pre>

<h2>Service层</h2>

<ul>
<li>Validata —— 数据有效性验证</li>
<li>Do —— 查询数据的封装 调用Model</li>
<li>支持嵌套事务的框架 Service可做事务开关</li>
</ul>

<pre><code class="language-php line-numbers">    public function validatorCoupon(Request $request):? Coupon
    {
        // 如果提交了优惠码
        if ($request-&gt;filled('coupon_code')) {
            // 查询优惠码是否存在
            $coupon = $this-&gt;couponService-&gt;withHasGoods($request-&gt;input('coupon_code'), $request-&gt;input('gid'));
            // 此商品没有这个优惠码
            if (empty($coupon)) {
                throw new RuleValidationException(__('dujiaoka.prompt.coupon_does_not_exist'));
            }
            // 剩余次数不足
            if ($coupon-&gt;ret &lt;= 0) {
                throw new RuleValidationException(__('dujiaoka.prompt.coupon_lack_of_available_opportunities'));
            }
            return $coupon;
        }
        return null;
    }
</code></pre>

<pre><code class="language-php line-numbers">    public function withGoodsByAmountAndStatusUnsold(int $goodsID, int $byAmount)
    {
        $carmis = Carmis::query()
            -&gt;where('goods_id', $goodsID)
            -&gt;where('status', Carmis::STATUS_UNSOLD)
            -&gt;take($byAmount)
            -&gt;get();
        return $carmis ? $carmis-&gt;toArray() : null;
    }
</code></pre>

<h2>Process Service层</h2>

复杂的逻辑，有进度的 ，比如功能的审批、比如订单的创建这种影响比较大的链条式请求

<ul>
<li>调用Service</li>
<li>Save Data To Do Process —— 保存数据 进行处理</li>
<li>支持嵌套事务的框架 Process Service可做事务开关</li>
</ul>

<pre><code class="language-php line-numbers">            // ip地址
            $this-&gt;orderProcessService-&gt;setBuyIP($request-&gt;getClientIp());
            // 查询密码
            $this-&gt;orderProcessService-&gt;setSearchPwd($request-&gt;input('search_pwd', ''));
            // 创建订单
            $order = $this-&gt;orderProcessService-&gt;createOrder();
</code></pre>

<h2>Job层</h2>

任务层，如发送邮件任务，发送接口请求任务（ERP等），入队任务

<h2>Model层</h2>

对数据的<code>自动化</code>进行设置，<code>不进行</code>封装 如 getByIds等，封装到逻辑中
- 时间戳自动更新
- 格式自动转化
- 附加字段
- 关联关系

<h2>实例举例</h2>

酒吧系统：
下单
- 控制器
- - 事务
- - 调用GoodsService验证 店铺、商品有效性（商品id有效性、是否属于当前店铺、是否下架等）
- - 调用OrderProcessService，进行订单进程性处理，setStaff员工信息，setGoods下单商品信息，setTable信息等
- - OrderProcessService 调用 OrderService 进行订单插入，调用GoodsService 进行库存减少，调用TableService进行统计信息更新等
- - - 调用Job层，进行ERP信息推送对接
- - - 调用Job层，进行小票任务推送
- - 请求结束，事务、响应]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date><![CDATA[2021-09-06 16:24:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-09-06 08:24:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-09-06 16:24:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-09-06 08:24:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[php%e4%b8%80%e4%bb%bd%e4%bb%a3%e7%a0%81%e5%88%86%e5%b1%82%e8%a7%84%e8%8c%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[92]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[TP6 新出的“虚拟模型”怎么用?]]></title>
		<link>https://blog.siammm.cn/archives/316</link>
		<pubDate>Mon, 25 Oct 2021 03:54:36 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=316</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>虚拟模型</h1>

引用官网文档说明

<blockquote>
  虚拟模型不会写入数据库，数据只能保存在内存中，而且只能通过实例化的方式来创建数据，虚拟模型可以保留模型的大部分功能，包括获取器、模型事件，甚至是关联操作。
</blockquote>

<h2>什么是模型?</h2>

想要更好地理解虚拟模型的用途，我们需要先回过头来思考一下基础的设计理念

ORM中的Model，是面向对象的一个典型运用，把数据抽象定义，实体转化

<ul>
<li>把数据库的设计定义 转为 <code>模型类的定义</code></li>
<li>把数据库的一行数据 转为 <code>一个模型实例</code></li>
</ul>

<h2>虚拟模型的运用?</h2>

从官网的说明中提及“不会写入数据库”，也即 模型类的定义 不再跟数据库挂钩。但是其他特性还是要保留的，比如获取器、事件、类型转化、关联查询等等。

虚拟模型的定义，也是依然要进行“数据抽象定义”。比如有一个数据集合，不需要储存，但是在执行过程中，需要<code>多处使用</code>。

那么可以把这部分数据集合，定义一个名字，抽象成虚拟模型，并实例化，就可以传递使用。

并且可以以此进行业务逻辑的封装。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2021-10-25 11:54:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-25 03:54:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-10-25 11:54:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-10-25 03:54:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[tp6-%e6%96%b0%e5%87%ba%e7%9a%84%e8%99%9a%e6%8b%9f%e6%a8%a1%e5%9e%8b%e6%80%8e%e4%b9%88%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="thinkphp"><![CDATA[Thinkphp]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[蓝奏云 批量下载 油猴]]></title>
		<link>https://blog.siammm.cn/archives/317</link>
		<pubDate>Wed, 27 Oct 2021 03:09:40 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://www.siammm.cn/?p=317</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code class="language-javascript line-numbers">// ==UserScript==
// @name         Siam蓝奏云批量下载
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  自用，需要弹窗等权限以及微调代码，不会用不要下载
// @author       Siam
// @match        *://*.lanzoux.com/*
// @match        *://*.lanzous.com/*
// @match        *://*.lanzoui.com/*
// @grant        none
// @require      http://code.jquery.com/jquery-3.4.1.min.js
// ==/UserScript==

(function() {
    'use strict';
    function siam(){
        if ($('.txt').length === 0){
            var a=$(".rets")[0]
            var a2=document.createElement("a");
            if (!!a){
                a.appendChild(a2)
            }
            a2.innerHTML=' !!!!!!!点击此处将此页文档全部下载!!!!!!'
            a2.onclick=function(){
                var nu=$('#infos').find('a').length
                for(let i=0; i&lt;nu; i++){
                    setTimeout(function(){$('#infos').find('a')[i].click() }, i*2500)
                }
            }
        }else{
            $('.txt')[0].click();
            setTimeout(function(){
                window.parent.close()
            },1000)
        }
    }
    setTimeout(siam,1500)
})();
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2021-10-27 11:09:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-27 03:09:40]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-10-27 11:09:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-10-27 03:09:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%93%9d%e5%a5%8f%e4%ba%91-%e6%89%b9%e9%87%8f%e4%b8%8b%e8%bd%bd-%e6%b2%b9%e7%8c%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"><![CDATA[常见问题]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[166]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[47]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[使用ELK替换业务日志记录]]></title>
		<link>https://blog.siammm.cn/archives/320</link>
		<pubDate>Tue, 15 Feb 2022 04:10:20 +0000</pubDate>
		<dc:creator><![CDATA[Siam]]></dc:creator>
		<guid isPermaLink="false">https://blog.siammm.cn/?p=320</guid>
		<description></description>
		<content:encoded><![CDATA[公司在快速开发阶段，将日志存入了Mysql，不利于做各做条件的检索查询。速度较慢。使用ELK方案，优化该部分逻辑。并开发toB日志自查系统，提供给客户快速对接。

<h1>ELK</h1>

Elasticsearch、Logstash 和 Kibana 三个软件的简称

<h2>简单架构图</h2>

<img src="http://blog.siammm.cn/wp-content/uploads/2022/02/wp_editor_md_763628059c5ca787cf55fd1e6e5a9663.jpg" alt="" />

原文地址-> https://blog.siammm.cn/archives/320

来自：siam博客。简单理解和笔记

<h2>资源记录</h2>

<ul>
<li>Elasticsearch： https://www.elastic.co/cn/downloads/elasticsearch</li>
<li>Logstash：https://www.elastic.co/cn/downloads/logstash</li>
<li>Kibana：https://www.elastic.co/cn/downloads/kibana</li>
<li>elasticsearch-head：https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/</li>
<li>Elasticsearch: 权威指南
：https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</li>
<li>Elasticsearch-php：https://www.elastic.co/guide/cn/elasticsearch/php/current/index.html</li>
</ul>

<h3>Elasticsearch</h3>

这个不用说，必须安装

<h3>Logstash</h3>

用于收集日志，在程序和ES之间，可以让程序产生的日志不用直接提交到ES，减少传输时间。

程序可以插入到Redis，Kafka

Logstash相当于<code>队列消费者</code>，将日志写入ES

<h3>Kibana和elasticsearch-head</h3>

可视化客户端，不是必须安装，如果是公司内部自己用的日志，那么可以直接安装，简化开发流程。

如果是对B业务，需要将日志<code>在业务开发平台，提供给客户查询</code>，则可以不安装Kibana，需要自行开发业务系统，做<code>权限管理、查询Elasticsearch和展示</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date><![CDATA[2022-02-15 12:10:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-02-15 04:10:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-02-15 12:13:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-02-15 04:13:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bd%bf%e7%94%a8elk%e6%9b%bf%e6%8d%a2%e4%b8%9a%e5%8a%a1%e6%97%a5%e5%bf%97%e8%ae%b0%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e8%bf%90%e7%bb%b4%e3%80%81%e6%9e%b6%e6%9e%84"><![CDATA[运维、架构]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_bj_lazy_load_skip_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[thumbnailUrl]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[bigfa_ding]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	